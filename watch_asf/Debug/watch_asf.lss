
watch_asf.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000074e0  00000000  00000000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000048  20000000  000074e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000290  20000048  00007528  00020048  2**2
                  ALLOC
  3 .stack        00001000  200002d8  000077b8  00020048  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
  6 .debug_info   0003ae96  00000000  00000000  000200c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004657  00000000  00000000  0005af5f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00008f4c  00000000  00000000  0005f5b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000898  00000000  00000000  00068502  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000be0  00000000  00000000  00068d9a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0000722d  00000000  00000000  0006997a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000e693  00000000  00000000  00070ba7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000894e3  00000000  00000000  0007f23a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001cdc  00000000  00000000  00108720  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	d8 12 00 20 25 20 00 00 23 20 00 00 23 20 00 00     ... % ..# ..# ..
	...
      2c:	23 20 00 00 00 00 00 00 00 00 00 00 23 20 00 00     # ..........# ..
      3c:	23 20 00 00 23 20 00 00 23 20 00 00 23 20 00 00     # ..# ..# ..# ..
      4c:	23 20 00 00 15 01 00 00 23 20 00 00 23 20 00 00     # ......# ..# ..
      5c:	23 20 00 00 23 20 00 00 2d 0e 00 00 3d 0e 00 00     # ..# ..-...=...
      6c:	4d 0e 00 00 5d 0e 00 00 00 00 00 00 00 00 00 00     M...]...........
      7c:	85 1c 00 00 95 1c 00 00 a5 1c 00 00 4d 1d 00 00     ............M...
      8c:	5d 1d 00 00 6d 1d 00 00 00 00 00 00 00 00 00 00     ]...m...........
      9c:	23 20 00 00 23 20 00 00 23 20 00 00 23 20 00 00     # ..# ..# ..# ..
      ac:	23 20 00 00 00 00 00 00                             # ......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000048 	.word	0x20000048
      d4:	00000000 	.word	0x00000000
      d8:	000074e0 	.word	0x000074e0

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	2000004c 	.word	0x2000004c
     108:	000074e0 	.word	0x000074e0
     10c:	000074e0 	.word	0x000074e0
     110:	00000000 	.word	0x00000000

00000114 <EIC_Handler>:
}

/** Handler for the EXTINT hardware module interrupt. */

void EIC_Handler(void)
{
     114:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     116:	2200      	movs	r2, #0
     118:	4b10      	ldr	r3, [pc, #64]	; (15c <EIC_Handler+0x48>)
     11a:	701a      	strb	r2, [r3, #0]
     11c:	2300      	movs	r3, #0

	if (eic_index < EIC_INST_NUM) {
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
     11e:	4910      	ldr	r1, [pc, #64]	; (160 <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
     120:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     122:	4e10      	ldr	r6, [pc, #64]	; (164 <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     124:	4c0d      	ldr	r4, [pc, #52]	; (15c <EIC_Handler+0x48>)
     126:	e00a      	b.n	13e <EIC_Handler+0x2a>
		return eics[eic_index];
     128:	490d      	ldr	r1, [pc, #52]	; (160 <EIC_Handler+0x4c>)
     12a:	e008      	b.n	13e <EIC_Handler+0x2a>
     12c:	7823      	ldrb	r3, [r4, #0]
     12e:	3301      	adds	r3, #1
     130:	b2db      	uxtb	r3, r3
     132:	7023      	strb	r3, [r4, #0]
     134:	2b0f      	cmp	r3, #15
     136:	d810      	bhi.n	15a <EIC_Handler+0x46>
		return NULL;
     138:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
     13a:	2b1f      	cmp	r3, #31
     13c:	d9f4      	bls.n	128 <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
     13e:	0028      	movs	r0, r5
     140:	4018      	ands	r0, r3
     142:	2201      	movs	r2, #1
     144:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
     146:	6908      	ldr	r0, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
     148:	4210      	tst	r0, r2
     14a:	d0ef      	beq.n	12c <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
     14c:	610a      	str	r2, [r1, #16]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     14e:	009b      	lsls	r3, r3, #2
     150:	599b      	ldr	r3, [r3, r6]
     152:	2b00      	cmp	r3, #0
     154:	d0ea      	beq.n	12c <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
     156:	4798      	blx	r3
     158:	e7e8      	b.n	12c <EIC_Handler+0x18>
			}
		}
	}
}
     15a:	bd70      	pop	{r4, r5, r6, pc}
     15c:	200000ca 	.word	0x200000ca
     160:	40001800 	.word	0x40001800
     164:	200000cc 	.word	0x200000cc

00000168 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
     168:	4a04      	ldr	r2, [pc, #16]	; (17c <_extint_enable+0x14>)
     16a:	7813      	ldrb	r3, [r2, #0]
     16c:	2102      	movs	r1, #2
     16e:	430b      	orrs	r3, r1
     170:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     172:	7853      	ldrb	r3, [r2, #1]
     174:	b25b      	sxtb	r3, r3
     176:	2b00      	cmp	r3, #0
     178:	dbfb      	blt.n	172 <_extint_enable+0xa>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
     17a:	4770      	bx	lr
     17c:	40001800 	.word	0x40001800

00000180 <_system_extint_init>:
{
     180:	b500      	push	{lr}
     182:	b083      	sub	sp, #12
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     184:	4a12      	ldr	r2, [pc, #72]	; (1d0 <_system_extint_init+0x50>)
     186:	6993      	ldr	r3, [r2, #24]
     188:	2140      	movs	r1, #64	; 0x40
     18a:	430b      	orrs	r3, r1
     18c:	6193      	str	r3, [r2, #24]
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
     18e:	a901      	add	r1, sp, #4
     190:	2302      	movs	r3, #2
     192:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
     194:	2005      	movs	r0, #5
     196:	4b0f      	ldr	r3, [pc, #60]	; (1d4 <_system_extint_init+0x54>)
     198:	4798      	blx	r3
	system_gclk_chan_enable(EIC_GCLK_ID);
     19a:	2005      	movs	r0, #5
     19c:	4b0e      	ldr	r3, [pc, #56]	; (1d8 <_system_extint_init+0x58>)
     19e:	4798      	blx	r3
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
     1a0:	4a0e      	ldr	r2, [pc, #56]	; (1dc <_system_extint_init+0x5c>)
     1a2:	7813      	ldrb	r3, [r2, #0]
     1a4:	2101      	movs	r1, #1
     1a6:	430b      	orrs	r3, r1
     1a8:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     1aa:	7853      	ldrb	r3, [r2, #1]
     1ac:	b25b      	sxtb	r3, r3
     1ae:	2b00      	cmp	r3, #0
     1b0:	dbfb      	blt.n	1aa <_system_extint_init+0x2a>
     1b2:	4b0b      	ldr	r3, [pc, #44]	; (1e0 <_system_extint_init+0x60>)
     1b4:	0019      	movs	r1, r3
     1b6:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
     1b8:	2200      	movs	r2, #0
     1ba:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
     1bc:	4299      	cmp	r1, r3
     1be:	d1fc      	bne.n	1ba <_system_extint_init+0x3a>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     1c0:	2210      	movs	r2, #16
     1c2:	4b08      	ldr	r3, [pc, #32]	; (1e4 <_system_extint_init+0x64>)
     1c4:	601a      	str	r2, [r3, #0]
	_extint_enable();
     1c6:	4b08      	ldr	r3, [pc, #32]	; (1e8 <_system_extint_init+0x68>)
     1c8:	4798      	blx	r3
}
     1ca:	b003      	add	sp, #12
     1cc:	bd00      	pop	{pc}
     1ce:	46c0      	nop			; (mov r8, r8)
     1d0:	40000400 	.word	0x40000400
     1d4:	000014d1 	.word	0x000014d1
     1d8:	00001445 	.word	0x00001445
     1dc:	40001800 	.word	0x40001800
     1e0:	200000cc 	.word	0x200000cc
     1e4:	e000e100 	.word	0xe000e100
     1e8:	00000169 	.word	0x00000169

000001ec <system_board_init>:
{
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
     1ec:	4770      	bx	lr
	...

000001f0 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     1f0:	4b0c      	ldr	r3, [pc, #48]	; (224 <cpu_irq_enter_critical+0x34>)
     1f2:	681b      	ldr	r3, [r3, #0]
     1f4:	2b00      	cmp	r3, #0
     1f6:	d106      	bne.n	206 <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     1f8:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
     1fc:	2b00      	cmp	r3, #0
     1fe:	d007      	beq.n	210 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     200:	2200      	movs	r2, #0
     202:	4b09      	ldr	r3, [pc, #36]	; (228 <cpu_irq_enter_critical+0x38>)
     204:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     206:	4a07      	ldr	r2, [pc, #28]	; (224 <cpu_irq_enter_critical+0x34>)
     208:	6813      	ldr	r3, [r2, #0]
     20a:	3301      	adds	r3, #1
     20c:	6013      	str	r3, [r2, #0]
}
     20e:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
     210:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     212:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     216:	2200      	movs	r2, #0
     218:	4b04      	ldr	r3, [pc, #16]	; (22c <cpu_irq_enter_critical+0x3c>)
     21a:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     21c:	3201      	adds	r2, #1
     21e:	4b02      	ldr	r3, [pc, #8]	; (228 <cpu_irq_enter_critical+0x38>)
     220:	701a      	strb	r2, [r3, #0]
     222:	e7f0      	b.n	206 <cpu_irq_enter_critical+0x16>
     224:	20000064 	.word	0x20000064
     228:	20000068 	.word	0x20000068
     22c:	20000000 	.word	0x20000000

00000230 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     230:	4b08      	ldr	r3, [pc, #32]	; (254 <cpu_irq_leave_critical+0x24>)
     232:	681a      	ldr	r2, [r3, #0]
     234:	3a01      	subs	r2, #1
     236:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     238:	681b      	ldr	r3, [r3, #0]
     23a:	2b00      	cmp	r3, #0
     23c:	d109      	bne.n	252 <cpu_irq_leave_critical+0x22>
     23e:	4b06      	ldr	r3, [pc, #24]	; (258 <cpu_irq_leave_critical+0x28>)
     240:	781b      	ldrb	r3, [r3, #0]
     242:	2b00      	cmp	r3, #0
     244:	d005      	beq.n	252 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     246:	2201      	movs	r2, #1
     248:	4b04      	ldr	r3, [pc, #16]	; (25c <cpu_irq_leave_critical+0x2c>)
     24a:	701a      	strb	r2, [r3, #0]
     24c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     250:	b662      	cpsie	i
	}
}
     252:	4770      	bx	lr
     254:	20000064 	.word	0x20000064
     258:	20000068 	.word	0x20000068
     25c:	20000000 	.word	0x20000000

00000260 <rtc_calendar_enable>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     260:	6802      	ldr	r2, [r0, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
     262:	7a93      	ldrb	r3, [r2, #10]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_calendar_is_syncing(module)) {
     264:	b25b      	sxtb	r3, r3
     266:	2b00      	cmp	r3, #0
     268:	dbfb      	blt.n	262 <rtc_calendar_enable+0x2>
		/* Wait for synchronization */
	}

	/* Enable RTC module. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_ENABLE;
     26a:	8813      	ldrh	r3, [r2, #0]
     26c:	2102      	movs	r1, #2
     26e:	430b      	orrs	r3, r1
     270:	8013      	strh	r3, [r2, #0]
}
     272:	4770      	bx	lr

00000274 <rtc_calendar_disable>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     274:	6802      	ldr	r2, [r0, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
     276:	7a93      	ldrb	r3, [r2, #10]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_calendar_is_syncing(module)) {
     278:	b25b      	sxtb	r3, r3
     27a:	2b00      	cmp	r3, #0
     27c:	dbfb      	blt.n	276 <rtc_calendar_disable+0x2>
		/* Wait for synchronization */
	}

	/* Disbale interrupt */
	rtc_module->MODE2.INTENCLR.reg = RTC_MODE2_INTENCLR_MASK;
     27e:	23c1      	movs	r3, #193	; 0xc1
     280:	7193      	strb	r3, [r2, #6]
	/* Clear interrupt flag */
	rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_MASK;
     282:	7213      	strb	r3, [r2, #8]

	/* Disable RTC module. */
	rtc_module->MODE2.CTRL.reg &= ~RTC_MODE2_CTRL_ENABLE;
     284:	8813      	ldrh	r3, [r2, #0]
     286:	2102      	movs	r1, #2
     288:	438b      	bics	r3, r1
     28a:	8013      	strh	r3, [r2, #0]
}
     28c:	4770      	bx	lr
	...

00000290 <rtc_calendar_reset>:
 * Resets the RTC module to hardware defaults.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_reset(struct rtc_module *const module)
{
     290:	b570      	push	{r4, r5, r6, lr}
     292:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     294:	6805      	ldr	r5, [r0, #0]

	/* Disable module before reset. */
	rtc_calendar_disable(module);
     296:	4b06      	ldr	r3, [pc, #24]	; (2b0 <rtc_calendar_reset+0x20>)
     298:	4798      	blx	r3
	Rtc *const rtc_module = module->hw;
     29a:	6822      	ldr	r2, [r4, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
     29c:	7a93      	ldrb	r3, [r2, #10]
#if RTC_CALENDAR_ASYNC == true
	module->registered_callback = 0;
	module->enabled_callback    = 0;
#endif

	while (rtc_calendar_is_syncing(module)) {
     29e:	b25b      	sxtb	r3, r3
     2a0:	2b00      	cmp	r3, #0
     2a2:	dbfb      	blt.n	29c <rtc_calendar_reset+0xc>
		/* Wait for synchronization */
	}

	/* Initiate software reset. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_SWRST;
     2a4:	882b      	ldrh	r3, [r5, #0]
     2a6:	2201      	movs	r2, #1
     2a8:	4313      	orrs	r3, r2
     2aa:	802b      	strh	r3, [r5, #0]
}
     2ac:	bd70      	pop	{r4, r5, r6, pc}
     2ae:	46c0      	nop			; (mov r8, r8)
     2b0:	00000275 	.word	0x00000275

000002b4 <rtc_calendar_time_to_register_value>:
 * \return 32-bit value.
 */
uint32_t rtc_calendar_time_to_register_value(
		struct rtc_module *const module,
		const struct rtc_calendar_time *const time)
{
     2b4:	b510      	push	{r4, lr}
	/* Initialize return value. */
	uint32_t register_value;

	/* Set year value into register_value minus initial year. */
	register_value = (time->year - module->year_init_value) <<
     2b6:	88cb      	ldrh	r3, [r1, #6]
     2b8:	88c2      	ldrh	r2, [r0, #6]
     2ba:	1a9a      	subs	r2, r3, r2
     2bc:	0692      	lsls	r2, r2, #26
			RTC_MODE2_CLOCK_YEAR_Pos;

	/* Set month value into register_value. */
	register_value |= (time->month << RTC_MODE2_CLOCK_MONTH_Pos);
     2be:	794b      	ldrb	r3, [r1, #5]
     2c0:	059b      	lsls	r3, r3, #22

	/* Set day value into register_value. */
	register_value |= (time->day << RTC_MODE2_CLOCK_DAY_Pos);
     2c2:	790c      	ldrb	r4, [r1, #4]
     2c4:	0464      	lsls	r4, r4, #17

	/* Set 24 hour value into register_value. */
	register_value |= (time->hour << RTC_MODE2_CLOCK_HOUR_Pos);
     2c6:	4323      	orrs	r3, r4
     2c8:	788c      	ldrb	r4, [r1, #2]
     2ca:	0324      	lsls	r4, r4, #12
     2cc:	4323      	orrs	r3, r4
     2ce:	4313      	orrs	r3, r2

	/* Check if 24 h clock and set pm flag. */
	if (!(module->clock_24h) && (time->pm)) {
     2d0:	7902      	ldrb	r2, [r0, #4]
     2d2:	2a00      	cmp	r2, #0
     2d4:	d105      	bne.n	2e2 <rtc_calendar_time_to_register_value+0x2e>
     2d6:	78ca      	ldrb	r2, [r1, #3]
     2d8:	2a00      	cmp	r2, #0
     2da:	d002      	beq.n	2e2 <rtc_calendar_time_to_register_value+0x2e>
		/* Set pm flag. */
		register_value |= RTC_MODE2_CLOCK_HOUR_PM;
     2dc:	2280      	movs	r2, #128	; 0x80
     2de:	0252      	lsls	r2, r2, #9
     2e0:	4313      	orrs	r3, r2
	}

	/* Set minute value into register_value. */
	register_value |= (time->minute << RTC_MODE2_CLOCK_MINUTE_Pos);
     2e2:	7848      	ldrb	r0, [r1, #1]
     2e4:	0180      	lsls	r0, r0, #6

	/* Set second value into register_value. */
	register_value |= (time->second << RTC_MODE2_CLOCK_SECOND_Pos);
     2e6:	780a      	ldrb	r2, [r1, #0]
     2e8:	4310      	orrs	r0, r2
     2ea:	4318      	orrs	r0, r3

	return register_value;
}
     2ec:	bd10      	pop	{r4, pc}

000002ee <rtc_calendar_register_value_to_time>:
 */
void rtc_calendar_register_value_to_time(
		struct rtc_module *const module,
		const uint32_t register_value,
		struct rtc_calendar_time *const time)
{
     2ee:	b510      	push	{r4, lr}
	/* Set year plus value of initial year. */
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
     2f0:	0e8b      	lsrs	r3, r1, #26
			RTC_MODE2_CLOCK_YEAR_Pos) + module->year_init_value;
     2f2:	88c4      	ldrh	r4, [r0, #6]
     2f4:	191b      	adds	r3, r3, r4
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
     2f6:	80d3      	strh	r3, [r2, #6]

	/* Set month value into time struct. */
	time->month = ((register_value & RTC_MODE2_CLOCK_MONTH_Msk) >>
     2f8:	018b      	lsls	r3, r1, #6
     2fa:	0f1b      	lsrs	r3, r3, #28
     2fc:	7153      	strb	r3, [r2, #5]
			RTC_MODE2_CLOCK_MONTH_Pos);

	/* Set day value into time struct. */
	time->day = ((register_value & RTC_MODE2_CLOCK_DAY_Msk) >>
     2fe:	028b      	lsls	r3, r1, #10
     300:	0edb      	lsrs	r3, r3, #27
     302:	7113      	strb	r3, [r2, #4]
			RTC_MODE2_CLOCK_DAY_Pos);

	if (module->clock_24h) {
     304:	7903      	ldrb	r3, [r0, #4]
     306:	2b00      	cmp	r3, #0
     308:	d10c      	bne.n	324 <rtc_calendar_register_value_to_time+0x36>
		time->hour = ((register_value & RTC_MODE2_CLOCK_HOUR_Msk) >>
				RTC_MODE2_CLOCK_HOUR_Pos);
	} else {
		/* Set hour in 12h mode. */
		time->hour = ((register_value &
				(RTC_MODE2_CLOCK_HOUR_Msk & ~RTC_MODE2_CLOCK_HOUR_PM)) >>
     30a:	040b      	lsls	r3, r1, #16
     30c:	0f1b      	lsrs	r3, r3, #28
		time->hour = ((register_value &
     30e:	7093      	strb	r3, [r2, #2]
				RTC_MODE2_CLOCK_HOUR_Pos);

		/* Set pm flag */
		time->pm = ((register_value & RTC_MODE2_CLOCK_HOUR_PM) != 0);
     310:	03cb      	lsls	r3, r1, #15
     312:	0fdb      	lsrs	r3, r3, #31
     314:	70d3      	strb	r3, [r2, #3]
	}

	/* Set minute value into time struct. */
	time->minute = ((register_value & RTC_MODE2_CLOCK_MINUTE_Msk) >>
     316:	0988      	lsrs	r0, r1, #6
     318:	233f      	movs	r3, #63	; 0x3f
     31a:	4018      	ands	r0, r3
     31c:	7050      	strb	r0, [r2, #1]
			RTC_MODE2_CLOCK_MINUTE_Pos);

	/* Set second value into time struct. */
	time->second = ((register_value & RTC_MODE2_CLOCK_SECOND_Msk) >>
     31e:	4019      	ands	r1, r3
     320:	7011      	strb	r1, [r2, #0]
			RTC_MODE2_CLOCK_SECOND_Pos);
}
     322:	bd10      	pop	{r4, pc}
		time->hour = ((register_value & RTC_MODE2_CLOCK_HOUR_Msk) >>
     324:	03cb      	lsls	r3, r1, #15
     326:	0edb      	lsrs	r3, r3, #27
     328:	7093      	strb	r3, [r2, #2]
     32a:	e7f4      	b.n	316 <rtc_calendar_register_value_to_time+0x28>

0000032c <rtc_calendar_set_time>:
 * \param[in] time  The time to set in the calendar
 */
void rtc_calendar_set_time(
		struct rtc_module *const module,
		const struct rtc_calendar_time *const time)
{
     32c:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     32e:	6804      	ldr	r4, [r0, #0]

	uint32_t register_value = rtc_calendar_time_to_register_value(module, time);
     330:	4b03      	ldr	r3, [pc, #12]	; (340 <rtc_calendar_set_time+0x14>)
     332:	4798      	blx	r3
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
     334:	7aa3      	ldrb	r3, [r4, #10]

	while (rtc_calendar_is_syncing(module)) {
     336:	b25b      	sxtb	r3, r3
     338:	2b00      	cmp	r3, #0
     33a:	dbfb      	blt.n	334 <rtc_calendar_set_time+0x8>
		/* Wait for synchronization */
	}

	/* Write value to register. */
	rtc_module->MODE2.CLOCK.reg = register_value;
     33c:	6120      	str	r0, [r4, #16]
}
     33e:	bd10      	pop	{r4, pc}
     340:	000002b5 	.word	0x000002b5

00000344 <rtc_calendar_get_time>:
 * \param[out] time  Pointer to value that will be filled with current time
 */
void rtc_calendar_get_time(
		struct rtc_module *const module,
		struct rtc_calendar_time *const time)
{
     344:	b510      	push	{r4, lr}
     346:	000a      	movs	r2, r1
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     348:	6803      	ldr	r3, [r0, #0]

	/* Change of read method based on value of continuously_update value in
	 * the configuration structure. */
	if (!(module->continuously_update)) {
     34a:	7941      	ldrb	r1, [r0, #5]
     34c:	2900      	cmp	r1, #0
     34e:	d006      	beq.n	35e <rtc_calendar_get_time+0x1a>
		rtc_module->MODE2.READREQ.reg = RTC_READREQ_RREQ;

		while (rtc_calendar_is_syncing(module)) {
			/* Wait for synchronization */
		}
	} else if (!(rtc_module->MODE2.READREQ.reg & RTC_READREQ_RCONT)){
     350:	8859      	ldrh	r1, [r3, #2]
     352:	0449      	lsls	r1, r1, #17
     354:	d50b      	bpl.n	36e <rtc_calendar_get_time+0x2a>
			/* Wait for synchronization */
		}
	}

	/* Read value. */
	uint32_t register_value = rtc_module->MODE2.CLOCK.reg;
     356:	6919      	ldr	r1, [r3, #16]

	/* Convert value to time structure. */
	rtc_calendar_register_value_to_time(module, register_value, time);
     358:	4b0a      	ldr	r3, [pc, #40]	; (384 <rtc_calendar_get_time+0x40>)
     35a:	4798      	blx	r3
}
     35c:	bd10      	pop	{r4, pc}
		rtc_module->MODE2.READREQ.reg = RTC_READREQ_RREQ;
     35e:	490a      	ldr	r1, [pc, #40]	; (388 <rtc_calendar_get_time+0x44>)
     360:	8059      	strh	r1, [r3, #2]
	Rtc *const rtc_module = module->hw;
     362:	6804      	ldr	r4, [r0, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
     364:	7aa1      	ldrb	r1, [r4, #10]
		while (rtc_calendar_is_syncing(module)) {
     366:	b249      	sxtb	r1, r1
     368:	2900      	cmp	r1, #0
     36a:	dbfb      	blt.n	364 <rtc_calendar_get_time+0x20>
     36c:	e7f3      	b.n	356 <rtc_calendar_get_time+0x12>
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_RREQ;
     36e:	8859      	ldrh	r1, [r3, #2]
     370:	24c0      	movs	r4, #192	; 0xc0
     372:	0224      	lsls	r4, r4, #8
     374:	4321      	orrs	r1, r4
     376:	8059      	strh	r1, [r3, #2]
	Rtc *const rtc_module = module->hw;
     378:	6804      	ldr	r4, [r0, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
     37a:	7aa1      	ldrb	r1, [r4, #10]
		while (rtc_calendar_is_syncing(module)) {
     37c:	b249      	sxtb	r1, r1
     37e:	2900      	cmp	r1, #0
     380:	dbfb      	blt.n	37a <rtc_calendar_get_time+0x36>
     382:	e7e8      	b.n	356 <rtc_calendar_get_time+0x12>
     384:	000002ef 	.word	0x000002ef
     388:	ffff8000 	.word	0xffff8000

0000038c <rtc_calendar_set_alarm>:
 */
enum status_code rtc_calendar_set_alarm(
		struct rtc_module *const module,
		const struct rtc_calendar_alarm_time *const alarm,
		const enum rtc_calendar_alarm alarm_index)
{
     38c:	b570      	push	{r4, r5, r6, lr}
     38e:	000d      	movs	r5, r1
     390:	0014      	movs	r4, r2

	Rtc *const rtc_module = module->hw;

	/* Sanity check. */
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
		return STATUS_ERR_INVALID_ARG;
     392:	2317      	movs	r3, #23
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
     394:	2a01      	cmp	r2, #1
     396:	d901      	bls.n	39c <rtc_calendar_set_alarm+0x10>

	/* Set alarm mask */
	rtc_module->MODE2.Mode2Alarm[alarm_index].MASK.reg = alarm->mask;

	return STATUS_OK;
}
     398:	0018      	movs	r0, r3
     39a:	bd70      	pop	{r4, r5, r6, pc}
	Rtc *const rtc_module = module->hw;
     39c:	6806      	ldr	r6, [r0, #0]
	uint32_t register_value = rtc_calendar_time_to_register_value(module, &(alarm->time));
     39e:	4b06      	ldr	r3, [pc, #24]	; (3b8 <rtc_calendar_set_alarm+0x2c>)
     3a0:	4798      	blx	r3
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
     3a2:	7ab3      	ldrb	r3, [r6, #10]
	while (rtc_calendar_is_syncing(module)) {
     3a4:	b25b      	sxtb	r3, r3
     3a6:	2b00      	cmp	r3, #0
     3a8:	dbfb      	blt.n	3a2 <rtc_calendar_set_alarm+0x16>
     3aa:	00e4      	lsls	r4, r4, #3
     3ac:	1934      	adds	r4, r6, r4
	rtc_module->MODE2.Mode2Alarm[alarm_index].ALARM.reg = register_value;
     3ae:	61a0      	str	r0, [r4, #24]
	rtc_module->MODE2.Mode2Alarm[alarm_index].MASK.reg = alarm->mask;
     3b0:	7a2b      	ldrb	r3, [r5, #8]
     3b2:	7723      	strb	r3, [r4, #28]
	return STATUS_OK;
     3b4:	2300      	movs	r3, #0
     3b6:	e7ef      	b.n	398 <rtc_calendar_set_alarm+0xc>
     3b8:	000002b5 	.word	0x000002b5

000003bc <rtc_calendar_init>:
{
     3bc:	b530      	push	{r4, r5, lr}
     3be:	b083      	sub	sp, #12
     3c0:	0005      	movs	r5, r0
     3c2:	0014      	movs	r4, r2
	module->hw = hw;
     3c4:	6001      	str	r1, [r0, #0]
     3c6:	4a1c      	ldr	r2, [pc, #112]	; (438 <rtc_calendar_init+0x7c>)
     3c8:	6993      	ldr	r3, [r2, #24]
     3ca:	2120      	movs	r1, #32
     3cc:	430b      	orrs	r3, r1
     3ce:	6193      	str	r3, [r2, #24]
	gclk_chan_conf.source_generator = GCLK_GENERATOR_2;
     3d0:	a901      	add	r1, sp, #4
     3d2:	2302      	movs	r3, #2
     3d4:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(RTC_GCLK_ID, &gclk_chan_conf);
     3d6:	2004      	movs	r0, #4
     3d8:	4b18      	ldr	r3, [pc, #96]	; (43c <rtc_calendar_init+0x80>)
     3da:	4798      	blx	r3
	system_gclk_chan_enable(RTC_GCLK_ID);
     3dc:	2004      	movs	r0, #4
     3de:	4b18      	ldr	r3, [pc, #96]	; (440 <rtc_calendar_init+0x84>)
     3e0:	4798      	blx	r3
	rtc_calendar_reset(module);
     3e2:	0028      	movs	r0, r5
     3e4:	4b17      	ldr	r3, [pc, #92]	; (444 <rtc_calendar_init+0x88>)
     3e6:	4798      	blx	r3
	module->clock_24h           = config->clock_24h;
     3e8:	7923      	ldrb	r3, [r4, #4]
     3ea:	712b      	strb	r3, [r5, #4]
	module->continuously_update = config->continuously_update;
     3ec:	78e3      	ldrb	r3, [r4, #3]
     3ee:	716b      	strb	r3, [r5, #5]
	module->year_init_value     = config->year_init_value;
     3f0:	88e3      	ldrh	r3, [r4, #6]
     3f2:	80eb      	strh	r3, [r5, #6]
	_rtc_instance[0] = module;
     3f4:	4b14      	ldr	r3, [pc, #80]	; (448 <rtc_calendar_init+0x8c>)
     3f6:	601d      	str	r5, [r3, #0]
	Rtc *const rtc_module = module->hw;
     3f8:	682a      	ldr	r2, [r5, #0]
	tmp_reg = RTC_MODE2_CTRL_MODE(2) | config->prescaler;
     3fa:	8823      	ldrh	r3, [r4, #0]
	if (!(config->clock_24h)) {
     3fc:	7921      	ldrb	r1, [r4, #4]
     3fe:	2900      	cmp	r1, #0
     400:	d017      	beq.n	432 <rtc_calendar_init+0x76>
	tmp_reg = RTC_MODE2_CTRL_MODE(2) | config->prescaler;
     402:	2108      	movs	r1, #8
     404:	430b      	orrs	r3, r1
	if (config->clear_on_match) {
     406:	78a1      	ldrb	r1, [r4, #2]
     408:	2900      	cmp	r1, #0
     40a:	d001      	beq.n	410 <rtc_calendar_init+0x54>
		tmp_reg |= RTC_MODE2_CTRL_MATCHCLR;
     40c:	2180      	movs	r1, #128	; 0x80
     40e:	430b      	orrs	r3, r1
	rtc_module->MODE2.CTRL.reg = tmp_reg;
     410:	8013      	strh	r3, [r2, #0]
	if (config->continuously_update) {
     412:	78e3      	ldrb	r3, [r4, #3]
     414:	2b00      	cmp	r3, #0
     416:	d004      	beq.n	422 <rtc_calendar_init+0x66>
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT;
     418:	8853      	ldrh	r3, [r2, #2]
     41a:	2180      	movs	r1, #128	; 0x80
     41c:	01c9      	lsls	r1, r1, #7
     41e:	430b      	orrs	r3, r1
     420:	8053      	strh	r3, [r2, #2]
		rtc_calendar_set_alarm(module, &(config->alarm[i]), (enum rtc_calendar_alarm)i);
     422:	0021      	movs	r1, r4
     424:	3108      	adds	r1, #8
     426:	2200      	movs	r2, #0
     428:	0028      	movs	r0, r5
     42a:	4b08      	ldr	r3, [pc, #32]	; (44c <rtc_calendar_init+0x90>)
     42c:	4798      	blx	r3
}
     42e:	b003      	add	sp, #12
     430:	bd30      	pop	{r4, r5, pc}
		tmp_reg |= RTC_MODE2_CTRL_CLKREP;
     432:	2148      	movs	r1, #72	; 0x48
     434:	430b      	orrs	r3, r1
     436:	e7e6      	b.n	406 <rtc_calendar_init+0x4a>
     438:	40000400 	.word	0x40000400
     43c:	000014d1 	.word	0x000014d1
     440:	00001445 	.word	0x00001445
     444:	00000291 	.word	0x00000291
     448:	2000010c 	.word	0x2000010c
     44c:	0000038d 	.word	0x0000038d

00000450 <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
     450:	b5f0      	push	{r4, r5, r6, r7, lr}
     452:	46d6      	mov	lr, sl
     454:	464f      	mov	r7, r9
     456:	4646      	mov	r6, r8
     458:	b5c0      	push	{r6, r7, lr}
     45a:	b08a      	sub	sp, #40	; 0x28
     45c:	0006      	movs	r6, r0
     45e:	000f      	movs	r7, r1
     460:	0014      	movs	r4, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
     462:	6031      	str	r1, [r6, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     464:	0008      	movs	r0, r1
     466:	4ba0      	ldr	r3, [pc, #640]	; (6e8 <i2c_master_init+0x298>)
     468:	4798      	blx	r3
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     46a:	4aa0      	ldr	r2, [pc, #640]	; (6ec <i2c_master_init+0x29c>)
     46c:	6a11      	ldr	r1, [r2, #32]
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     46e:	1c85      	adds	r5, r0, #2
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     470:	2301      	movs	r3, #1
     472:	40ab      	lsls	r3, r5
     474:	430b      	orrs	r3, r1
     476:	6213      	str	r3, [r2, #32]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
     478:	a909      	add	r1, sp, #36	; 0x24
     47a:	7b23      	ldrb	r3, [r4, #12]
     47c:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     47e:	3014      	adds	r0, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     480:	b2c5      	uxtb	r5, r0
     482:	0028      	movs	r0, r5
     484:	4b9a      	ldr	r3, [pc, #616]	; (6f0 <i2c_master_init+0x2a0>)
     486:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     488:	0028      	movs	r0, r5
     48a:	4b9a      	ldr	r3, [pc, #616]	; (6f4 <i2c_master_init+0x2a4>)
     48c:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     48e:	7b20      	ldrb	r0, [r4, #12]
     490:	2100      	movs	r1, #0
     492:	4b99      	ldr	r3, [pc, #612]	; (6f8 <i2c_master_init+0x2a8>)
     494:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
     496:	683b      	ldr	r3, [r7, #0]
		return STATUS_ERR_DENIED;
     498:	201c      	movs	r0, #28
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
     49a:	079b      	lsls	r3, r3, #30
     49c:	d505      	bpl.n	4aa <i2c_master_init+0x5a>
	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
}
     49e:	b00a      	add	sp, #40	; 0x28
     4a0:	bc1c      	pop	{r2, r3, r4}
     4a2:	4690      	mov	r8, r2
     4a4:	4699      	mov	r9, r3
     4a6:	46a2      	mov	sl, r4
     4a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
     4aa:	683b      	ldr	r3, [r7, #0]
		return STATUS_BUSY;
     4ac:	3817      	subs	r0, #23
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
     4ae:	07db      	lsls	r3, r3, #31
     4b0:	d4f5      	bmi.n	49e <i2c_master_init+0x4e>
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
     4b2:	6830      	ldr	r0, [r6, #0]
     4b4:	4b8c      	ldr	r3, [pc, #560]	; (6e8 <i2c_master_init+0x298>)
     4b6:	4699      	mov	r9, r3
     4b8:	4798      	blx	r3
     4ba:	0005      	movs	r5, r0
	_sercom_set_handler(instance_index, _i2c_master_interrupt_handler);
     4bc:	498f      	ldr	r1, [pc, #572]	; (6fc <i2c_master_init+0x2ac>)
     4be:	4b90      	ldr	r3, [pc, #576]	; (700 <i2c_master_init+0x2b0>)
     4c0:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     4c2:	00ad      	lsls	r5, r5, #2
     4c4:	4b8f      	ldr	r3, [pc, #572]	; (704 <i2c_master_init+0x2b4>)
     4c6:	50ee      	str	r6, [r5, r3]
	module->registered_callback = 0;
     4c8:	2300      	movs	r3, #0
     4ca:	7633      	strb	r3, [r6, #24]
	module->enabled_callback = 0;
     4cc:	7673      	strb	r3, [r6, #25]
	module->buffer_length = 0;
     4ce:	2500      	movs	r5, #0
     4d0:	8373      	strh	r3, [r6, #26]
	module->buffer_remaining = 0;
     4d2:	83b3      	strh	r3, [r6, #28]
	module->status = STATUS_OK;
     4d4:	2225      	movs	r2, #37	; 0x25
     4d6:	54b5      	strb	r5, [r6, r2]
	module->buffer = NULL;
     4d8:	6233      	str	r3, [r6, #32]
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
     4da:	3314      	adds	r3, #20
     4dc:	603b      	str	r3, [r7, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     4de:	6833      	ldr	r3, [r6, #0]
     4e0:	4698      	mov	r8, r3
	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
     4e2:	0018      	movs	r0, r3
     4e4:	47c8      	blx	r9
     4e6:	4681      	mov	r9, r0
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     4e8:	2380      	movs	r3, #128	; 0x80
     4ea:	aa08      	add	r2, sp, #32
     4ec:	7013      	strb	r3, [r2, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     4ee:	7055      	strb	r5, [r2, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     4f0:	2301      	movs	r3, #1
     4f2:	7093      	strb	r3, [r2, #2]
	config->powersave    = false;
     4f4:	70d5      	strb	r5, [r2, #3]
	uint32_t pad0 = config->pinmux_pad0;
     4f6:	69e0      	ldr	r0, [r4, #28]
	uint32_t pad1 = config->pinmux_pad1;
     4f8:	6a27      	ldr	r7, [r4, #32]
	if (pad0 == PINMUX_DEFAULT) {
     4fa:	2800      	cmp	r0, #0
     4fc:	d100      	bne.n	500 <i2c_master_init+0xb0>
     4fe:	e0af      	b.n	660 <i2c_master_init+0x210>
	pin_conf.mux_position = pad0 & 0xFFFF;
     500:	ab08      	add	r3, sp, #32
     502:	7018      	strb	r0, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     504:	2302      	movs	r3, #2
     506:	aa08      	add	r2, sp, #32
     508:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
     50a:	0c00      	lsrs	r0, r0, #16
     50c:	b2c0      	uxtb	r0, r0
     50e:	0011      	movs	r1, r2
     510:	4b7d      	ldr	r3, [pc, #500]	; (708 <i2c_master_init+0x2b8>)
     512:	4798      	blx	r3
	if (pad1 == PINMUX_DEFAULT) {
     514:	2f00      	cmp	r7, #0
     516:	d100      	bne.n	51a <i2c_master_init+0xca>
     518:	e0a7      	b.n	66a <i2c_master_init+0x21a>
	pin_conf.mux_position = pad1 & 0xFFFF;
     51a:	ab08      	add	r3, sp, #32
     51c:	701f      	strb	r7, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     51e:	2302      	movs	r3, #2
     520:	aa08      	add	r2, sp, #32
     522:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
     524:	0c3f      	lsrs	r7, r7, #16
     526:	b2f8      	uxtb	r0, r7
     528:	0011      	movs	r1, r2
     52a:	4b77      	ldr	r3, [pc, #476]	; (708 <i2c_master_init+0x2b8>)
     52c:	4798      	blx	r3
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
     52e:	8aa3      	ldrh	r3, [r4, #20]
     530:	80f3      	strh	r3, [r6, #6]
	module->buffer_timeout = config->buffer_timeout;
     532:	8ae3      	ldrh	r3, [r4, #22]
     534:	8133      	strh	r3, [r6, #8]
	if (config->run_in_standby || system_is_debugger_present()) {
     536:	7e23      	ldrb	r3, [r4, #24]
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
     538:	2280      	movs	r2, #128	; 0x80
	if (config->run_in_standby || system_is_debugger_present()) {
     53a:	2b00      	cmp	r3, #0
     53c:	d104      	bne.n	548 <i2c_master_init+0xf8>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     53e:	4b73      	ldr	r3, [pc, #460]	; (70c <i2c_master_init+0x2bc>)
     540:	789b      	ldrb	r3, [r3, #2]
     542:	079b      	lsls	r3, r3, #30
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
     544:	0fdb      	lsrs	r3, r3, #31
     546:	01da      	lsls	r2, r3, #7
	tmp_ctrla |= config->transfer_speed;
     548:	68a1      	ldr	r1, [r4, #8]
     54a:	6923      	ldr	r3, [r4, #16]
     54c:	430b      	orrs	r3, r1
     54e:	4313      	orrs	r3, r2
	if (config->scl_low_timeout) {
     550:	2224      	movs	r2, #36	; 0x24
     552:	5ca2      	ldrb	r2, [r4, r2]
     554:	2a00      	cmp	r2, #0
     556:	d002      	beq.n	55e <i2c_master_init+0x10e>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
     558:	2280      	movs	r2, #128	; 0x80
     55a:	05d2      	lsls	r2, r2, #23
     55c:	4313      	orrs	r3, r2
		tmp_ctrla |= config->inactive_timeout;
     55e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
     560:	4313      	orrs	r3, r2
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
     562:	222c      	movs	r2, #44	; 0x2c
     564:	5ca2      	ldrb	r2, [r4, r2]
     566:	2a00      	cmp	r2, #0
     568:	d103      	bne.n	572 <i2c_master_init+0x122>
     56a:	2280      	movs	r2, #128	; 0x80
     56c:	0492      	lsls	r2, r2, #18
     56e:	4291      	cmp	r1, r2
     570:	d102      	bne.n	578 <i2c_master_init+0x128>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
     572:	2280      	movs	r2, #128	; 0x80
     574:	0512      	lsls	r2, r2, #20
     576:	4313      	orrs	r3, r2
	if (config->slave_scl_low_extend_timeout) {
     578:	222d      	movs	r2, #45	; 0x2d
     57a:	5ca2      	ldrb	r2, [r4, r2]
     57c:	2a00      	cmp	r2, #0
     57e:	d002      	beq.n	586 <i2c_master_init+0x136>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
     580:	2280      	movs	r2, #128	; 0x80
     582:	0412      	lsls	r2, r2, #16
     584:	4313      	orrs	r3, r2
	if (config->master_scl_low_extend_timeout) {
     586:	222e      	movs	r2, #46	; 0x2e
     588:	5ca2      	ldrb	r2, [r4, r2]
     58a:	2a00      	cmp	r2, #0
     58c:	d002      	beq.n	594 <i2c_master_init+0x144>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
     58e:	2280      	movs	r2, #128	; 0x80
     590:	03d2      	lsls	r2, r2, #15
     592:	4313      	orrs	r3, r2
	i2c_module->CTRLA.reg |= tmp_ctrla;
     594:	4642      	mov	r2, r8
     596:	6812      	ldr	r2, [r2, #0]
     598:	4313      	orrs	r3, r2
     59a:	4642      	mov	r2, r8
     59c:	6013      	str	r3, [r2, #0]
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
     59e:	2380      	movs	r3, #128	; 0x80
     5a0:	005b      	lsls	r3, r3, #1
     5a2:	6053      	str	r3, [r2, #4]
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
     5a4:	4648      	mov	r0, r9
     5a6:	3014      	adds	r0, #20
     5a8:	b2c0      	uxtb	r0, r0
     5aa:	4b59      	ldr	r3, [pc, #356]	; (710 <i2c_master_init+0x2c0>)
     5ac:	4798      	blx	r3
     5ae:	9007      	str	r0, [sp, #28]
	uint32_t fscl        = 1000 * config->baud_rate;
     5b0:	23fa      	movs	r3, #250	; 0xfa
     5b2:	009b      	lsls	r3, r3, #2
     5b4:	6822      	ldr	r2, [r4, #0]
     5b6:	435a      	muls	r2, r3
     5b8:	4691      	mov	r9, r2
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
     5ba:	6863      	ldr	r3, [r4, #4]
     5bc:	469a      	mov	sl, r3
	tmp_baud = (int32_t)(div_ceil(
     5be:	4d55      	ldr	r5, [pc, #340]	; (714 <i2c_master_init+0x2c4>)
     5c0:	47a8      	blx	r5
     5c2:	9000      	str	r0, [sp, #0]
     5c4:	9101      	str	r1, [sp, #4]
     5c6:	464b      	mov	r3, r9
     5c8:	0058      	lsls	r0, r3, #1
     5ca:	47a8      	blx	r5
     5cc:	9002      	str	r0, [sp, #8]
     5ce:	9103      	str	r1, [sp, #12]
     5d0:	8e20      	ldrh	r0, [r4, #48]	; 0x30
     5d2:	47a8      	blx	r5
     5d4:	9004      	str	r0, [sp, #16]
     5d6:	9105      	str	r1, [sp, #20]
     5d8:	4f4f      	ldr	r7, [pc, #316]	; (718 <i2c_master_init+0x2c8>)
     5da:	4a50      	ldr	r2, [pc, #320]	; (71c <i2c_master_init+0x2cc>)
     5dc:	4b50      	ldr	r3, [pc, #320]	; (720 <i2c_master_init+0x2d0>)
     5de:	9800      	ldr	r0, [sp, #0]
     5e0:	9901      	ldr	r1, [sp, #4]
     5e2:	47b8      	blx	r7
     5e4:	0002      	movs	r2, r0
     5e6:	000b      	movs	r3, r1
     5e8:	9804      	ldr	r0, [sp, #16]
     5ea:	9905      	ldr	r1, [sp, #20]
     5ec:	47b8      	blx	r7
     5ee:	4e4d      	ldr	r6, [pc, #308]	; (724 <i2c_master_init+0x2d4>)
     5f0:	2200      	movs	r2, #0
     5f2:	4b4d      	ldr	r3, [pc, #308]	; (728 <i2c_master_init+0x2d8>)
     5f4:	47b0      	blx	r6
     5f6:	9004      	str	r0, [sp, #16]
     5f8:	9105      	str	r1, [sp, #20]
     5fa:	4648      	mov	r0, r9
     5fc:	47a8      	blx	r5
     5fe:	0002      	movs	r2, r0
     600:	000b      	movs	r3, r1
     602:	9804      	ldr	r0, [sp, #16]
     604:	9905      	ldr	r1, [sp, #20]
     606:	47b8      	blx	r7
     608:	0002      	movs	r2, r0
     60a:	000b      	movs	r3, r1
     60c:	4d47      	ldr	r5, [pc, #284]	; (72c <i2c_master_init+0x2dc>)
     60e:	9800      	ldr	r0, [sp, #0]
     610:	9901      	ldr	r1, [sp, #4]
     612:	47a8      	blx	r5
     614:	9a02      	ldr	r2, [sp, #8]
     616:	9b03      	ldr	r3, [sp, #12]
     618:	47b0      	blx	r6
     61a:	2200      	movs	r2, #0
     61c:	4b44      	ldr	r3, [pc, #272]	; (730 <i2c_master_init+0x2e0>)
     61e:	47a8      	blx	r5
     620:	9a02      	ldr	r2, [sp, #8]
     622:	9b03      	ldr	r3, [sp, #12]
     624:	4d43      	ldr	r5, [pc, #268]	; (734 <i2c_master_init+0x2e4>)
     626:	47a8      	blx	r5
     628:	4b43      	ldr	r3, [pc, #268]	; (738 <i2c_master_init+0x2e8>)
     62a:	4798      	blx	r3
     62c:	0005      	movs	r5, r0
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
     62e:	2380      	movs	r3, #128	; 0x80
     630:	049b      	lsls	r3, r3, #18
     632:	68a2      	ldr	r2, [r4, #8]
     634:	429a      	cmp	r2, r3
     636:	d01e      	beq.n	676 <i2c_master_init+0x226>
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
     638:	0003      	movs	r3, r0
     63a:	2040      	movs	r0, #64	; 0x40
     63c:	2dff      	cmp	r5, #255	; 0xff
     63e:	d900      	bls.n	642 <i2c_master_init+0x1f2>
     640:	e72d      	b.n	49e <i2c_master_init+0x4e>
	int32_t tmp_baudlow_hs = 0;
     642:	2400      	movs	r4, #0
	int32_t tmp_baud_hs = 0;
     644:	2000      	movs	r0, #0
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
     646:	25ff      	movs	r5, #255	; 0xff
     648:	401d      	ands	r5, r3
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
     64a:	0624      	lsls	r4, r4, #24
     64c:	4325      	orrs	r5, r4
     64e:	0400      	lsls	r0, r0, #16
     650:	23ff      	movs	r3, #255	; 0xff
     652:	041b      	lsls	r3, r3, #16
     654:	4018      	ands	r0, r3
     656:	4305      	orrs	r5, r0
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
     658:	4643      	mov	r3, r8
     65a:	60dd      	str	r5, [r3, #12]
	enum status_code tmp_status_code = STATUS_OK;
     65c:	2000      	movs	r0, #0
     65e:	e71e      	b.n	49e <i2c_master_init+0x4e>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
     660:	2100      	movs	r1, #0
     662:	4640      	mov	r0, r8
     664:	4b35      	ldr	r3, [pc, #212]	; (73c <i2c_master_init+0x2ec>)
     666:	4798      	blx	r3
     668:	e74a      	b.n	500 <i2c_master_init+0xb0>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
     66a:	2101      	movs	r1, #1
     66c:	4640      	mov	r0, r8
     66e:	4b33      	ldr	r3, [pc, #204]	; (73c <i2c_master_init+0x2ec>)
     670:	4798      	blx	r3
     672:	0007      	movs	r7, r0
     674:	e751      	b.n	51a <i2c_master_init+0xca>
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
     676:	26fa      	movs	r6, #250	; 0xfa
     678:	00b6      	lsls	r6, r6, #2
     67a:	4653      	mov	r3, sl
     67c:	435e      	muls	r6, r3
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
     67e:	9800      	ldr	r0, [sp, #0]
     680:	9901      	ldr	r1, [sp, #4]
     682:	0002      	movs	r2, r0
     684:	000b      	movs	r3, r1
     686:	4c27      	ldr	r4, [pc, #156]	; (724 <i2c_master_init+0x2d4>)
     688:	47a0      	blx	r4
     68a:	9000      	str	r0, [sp, #0]
     68c:	9101      	str	r1, [sp, #4]
     68e:	0030      	movs	r0, r6
     690:	4b20      	ldr	r3, [pc, #128]	; (714 <i2c_master_init+0x2c4>)
     692:	4798      	blx	r3
     694:	2200      	movs	r2, #0
     696:	4b2a      	ldr	r3, [pc, #168]	; (740 <i2c_master_init+0x2f0>)
     698:	47b8      	blx	r7
     69a:	0002      	movs	r2, r0
     69c:	000b      	movs	r3, r1
     69e:	9800      	ldr	r0, [sp, #0]
     6a0:	9901      	ldr	r1, [sp, #4]
     6a2:	4c24      	ldr	r4, [pc, #144]	; (734 <i2c_master_init+0x2e4>)
     6a4:	47a0      	blx	r4
     6a6:	2200      	movs	r2, #0
     6a8:	4b21      	ldr	r3, [pc, #132]	; (730 <i2c_master_init+0x2e0>)
     6aa:	4c20      	ldr	r4, [pc, #128]	; (72c <i2c_master_init+0x2dc>)
     6ac:	47a0      	blx	r4
     6ae:	4b22      	ldr	r3, [pc, #136]	; (738 <i2c_master_init+0x2e8>)
     6b0:	4798      	blx	r3
     6b2:	1e04      	subs	r4, r0, #0
		if (tmp_baudlow_hs) {
     6b4:	d00c      	beq.n	6d0 <i2c_master_init+0x280>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
     6b6:	0031      	movs	r1, r6
     6b8:	9807      	ldr	r0, [sp, #28]
     6ba:	4b22      	ldr	r3, [pc, #136]	; (744 <i2c_master_init+0x2f4>)
     6bc:	4798      	blx	r3
     6be:	3802      	subs	r0, #2
     6c0:	1b00      	subs	r0, r0, r4
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
     6c2:	002b      	movs	r3, r5
     6c4:	2dff      	cmp	r5, #255	; 0xff
     6c6:	d80c      	bhi.n	6e2 <i2c_master_init+0x292>
     6c8:	28ff      	cmp	r0, #255	; 0xff
     6ca:	d9bc      	bls.n	646 <i2c_master_init+0x1f6>
     6cc:	2040      	movs	r0, #64	; 0x40
     6ce:	e6e6      	b.n	49e <i2c_master_init+0x4e>
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
     6d0:	0071      	lsls	r1, r6, #1
     6d2:	1e48      	subs	r0, r1, #1
     6d4:	9b07      	ldr	r3, [sp, #28]
     6d6:	469c      	mov	ip, r3
     6d8:	4460      	add	r0, ip
     6da:	4b1a      	ldr	r3, [pc, #104]	; (744 <i2c_master_init+0x2f4>)
     6dc:	4798      	blx	r3
     6de:	3801      	subs	r0, #1
     6e0:	e7ef      	b.n	6c2 <i2c_master_init+0x272>
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
     6e2:	2040      	movs	r0, #64	; 0x40
     6e4:	e6db      	b.n	49e <i2c_master_init+0x4e>
     6e6:	46c0      	nop			; (mov r8, r8)
     6e8:	00000d7d 	.word	0x00000d7d
     6ec:	40000400 	.word	0x40000400
     6f0:	000014d1 	.word	0x000014d1
     6f4:	00001445 	.word	0x00001445
     6f8:	00000c35 	.word	0x00000c35
     6fc:	00000a49 	.word	0x00000a49
     700:	00000dc9 	.word	0x00000dc9
     704:	20000110 	.word	0x20000110
     708:	000015c9 	.word	0x000015c9
     70c:	41002000 	.word	0x41002000
     710:	000014ed 	.word	0x000014ed
     714:	00006d99 	.word	0x00006d99
     718:	00006181 	.word	0x00006181
     71c:	e826d695 	.word	0xe826d695
     720:	3e112e0b 	.word	0x3e112e0b
     724:	000052f9 	.word	0x000052f9
     728:	40240000 	.word	0x40240000
     72c:	00006681 	.word	0x00006681
     730:	3ff00000 	.word	0x3ff00000
     734:	00005919 	.word	0x00005919
     738:	00006cad 	.word	0x00006cad
     73c:	00000c81 	.word	0x00000c81
     740:	40080000 	.word	0x40080000
     744:	00004395 	.word	0x00004395

00000748 <_i2c_master_address_response>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     748:	6803      	ldr	r3, [r0, #0]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
     74a:	7e1a      	ldrb	r2, [r3, #24]
     74c:	0792      	lsls	r2, r2, #30
     74e:	d507      	bpl.n	760 <_i2c_master_address_response+0x18>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
     750:	2202      	movs	r2, #2
     752:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
     754:	8b5b      	ldrh	r3, [r3, #26]
     756:	079b      	lsls	r3, r3, #30
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
     758:	2041      	movs	r0, #65	; 0x41

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
	}

	return STATUS_OK;
     75a:	17db      	asrs	r3, r3, #31
     75c:	4018      	ands	r0, r3
}
     75e:	4770      	bx	lr
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     760:	8b5a      	ldrh	r2, [r3, #26]
     762:	0752      	lsls	r2, r2, #29
     764:	d506      	bpl.n	774 <_i2c_master_address_response+0x2c>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     766:	6859      	ldr	r1, [r3, #4]
     768:	22c0      	movs	r2, #192	; 0xc0
     76a:	0292      	lsls	r2, r2, #10
     76c:	430a      	orrs	r2, r1
     76e:	605a      	str	r2, [r3, #4]
		return STATUS_ERR_BAD_ADDRESS;
     770:	2018      	movs	r0, #24
     772:	e7f4      	b.n	75e <_i2c_master_address_response+0x16>
	return STATUS_OK;
     774:	2000      	movs	r0, #0
     776:	e7f2      	b.n	75e <_i2c_master_address_response+0x16>

00000778 <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
     778:	b530      	push	{r4, r5, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     77a:	6802      	ldr	r2, [r0, #0]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
     77c:	2300      	movs	r3, #0
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     77e:	2401      	movs	r4, #1
     780:	2502      	movs	r5, #2
     782:	7e11      	ldrb	r1, [r2, #24]
     784:	4221      	tst	r1, r4
     786:	d10b      	bne.n	7a0 <_i2c_master_wait_for_bus+0x28>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
     788:	7e11      	ldrb	r1, [r2, #24]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     78a:	4229      	tst	r1, r5
     78c:	d106      	bne.n	79c <_i2c_master_wait_for_bus+0x24>

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
     78e:	3301      	adds	r3, #1
     790:	b29b      	uxth	r3, r3
     792:	8901      	ldrh	r1, [r0, #8]
     794:	4299      	cmp	r1, r3
     796:	d8f4      	bhi.n	782 <_i2c_master_wait_for_bus+0xa>
			return STATUS_ERR_TIMEOUT;
     798:	2012      	movs	r0, #18
     79a:	e002      	b.n	7a2 <_i2c_master_wait_for_bus+0x2a>
		}
	}
	return STATUS_OK;
     79c:	2000      	movs	r0, #0
     79e:	e000      	b.n	7a2 <_i2c_master_wait_for_bus+0x2a>
     7a0:	2000      	movs	r0, #0
}
     7a2:	bd30      	pop	{r4, r5, pc}

000007a4 <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
     7a4:	b510      	push	{r4, lr}
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     7a6:	6804      	ldr	r4, [r0, #0]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     7a8:	6862      	ldr	r2, [r4, #4]
     7aa:	2380      	movs	r3, #128	; 0x80
     7ac:	02db      	lsls	r3, r3, #11
     7ae:	4313      	orrs	r3, r2
     7b0:	6063      	str	r3, [r4, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
     7b2:	6261      	str	r1, [r4, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
     7b4:	4b02      	ldr	r3, [pc, #8]	; (7c0 <_i2c_master_send_hs_master_code+0x1c>)
     7b6:	4798      	blx	r3
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
     7b8:	2301      	movs	r3, #1
     7ba:	7623      	strb	r3, [r4, #24]

	return tmp_status;
}
     7bc:	bd10      	pop	{r4, pc}
     7be:	46c0      	nop			; (mov r8, r8)
     7c0:	00000779 	.word	0x00000779

000007c4 <_i2c_master_wait_for_sync>:
{
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
     7c4:	6801      	ldr	r1, [r0, #0]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
     7c6:	2207      	movs	r2, #7
     7c8:	69cb      	ldr	r3, [r1, #28]
		const struct i2c_master_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
     7ca:	421a      	tst	r2, r3
     7cc:	d1fc      	bne.n	7c8 <_i2c_master_wait_for_sync+0x4>
		/* Wait for I2C module to sync. */
	}
}
     7ce:	4770      	bx	lr

000007d0 <_i2c_master_read>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_read(
		struct i2c_master_module *const module)
{
     7d0:	b570      	push	{r4, r5, r6, lr}
     7d2:	0004      	movs	r4, r0
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     7d4:	6806      	ldr	r6, [r0, #0]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     7d6:	6832      	ldr	r2, [r6, #0]

	/* Find index to save next value in buffer */
	uint16_t buffer_index = module->buffer_length;
     7d8:	8b45      	ldrh	r5, [r0, #26]
	buffer_index -= module->buffer_remaining;
     7da:	8b83      	ldrh	r3, [r0, #28]
     7dc:	1aed      	subs	r5, r5, r3
     7de:	b2ad      	uxth	r5, r5

	module->buffer_remaining--;
     7e0:	8b83      	ldrh	r3, [r0, #28]
     7e2:	3b01      	subs	r3, #1
     7e4:	b29b      	uxth	r3, r3
     7e6:	8383      	strh	r3, [r0, #28]

	if (sclsm_flag) {
     7e8:	0113      	lsls	r3, r2, #4
     7ea:	d51d      	bpl.n	828 <_i2c_master_read+0x58>
		if (module->send_nack && module->buffer_remaining == 1) {
     7ec:	7ac3      	ldrb	r3, [r0, #11]
     7ee:	2b00      	cmp	r3, #0
     7f0:	d003      	beq.n	7fa <_i2c_master_read+0x2a>
     7f2:	8b83      	ldrh	r3, [r0, #28]
     7f4:	b29b      	uxth	r3, r3
     7f6:	2b01      	cmp	r3, #1
     7f8:	d010      	beq.n	81c <_i2c_master_read+0x4c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
		}
	}

	if (module->buffer_remaining == 0) {
     7fa:	8ba3      	ldrh	r3, [r4, #28]
     7fc:	b29b      	uxth	r3, r3
     7fe:	2b00      	cmp	r3, #0
     800:	d102      	bne.n	808 <_i2c_master_read+0x38>
		if (module->send_stop) {
     802:	7aa3      	ldrb	r3, [r4, #10]
     804:	2b00      	cmp	r3, #0
     806:	d11c      	bne.n	842 <_i2c_master_read+0x72>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
		}
	}
	
	/* Read byte from slave and put in buffer */
	_i2c_master_wait_for_sync(module);
     808:	0020      	movs	r0, r4
     80a:	4b12      	ldr	r3, [pc, #72]	; (854 <_i2c_master_read+0x84>)
     80c:	4798      	blx	r3
	module->buffer[buffer_index] = i2c_module->DATA.reg;
     80e:	6a23      	ldr	r3, [r4, #32]
     810:	195d      	adds	r5, r3, r5
     812:	2328      	movs	r3, #40	; 0x28
     814:	5cf3      	ldrb	r3, [r6, r3]
     816:	b2db      	uxtb	r3, r3
     818:	702b      	strb	r3, [r5, #0]
}
     81a:	bd70      	pop	{r4, r5, r6, pc}
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     81c:	6872      	ldr	r2, [r6, #4]
     81e:	2380      	movs	r3, #128	; 0x80
     820:	02db      	lsls	r3, r3, #11
     822:	4313      	orrs	r3, r2
     824:	6073      	str	r3, [r6, #4]
     826:	e7e8      	b.n	7fa <_i2c_master_read+0x2a>
		if (module->send_nack && module->buffer_remaining == 0) {
     828:	7ac3      	ldrb	r3, [r0, #11]
     82a:	2b00      	cmp	r3, #0
     82c:	d0e5      	beq.n	7fa <_i2c_master_read+0x2a>
     82e:	8b83      	ldrh	r3, [r0, #28]
     830:	b29b      	uxth	r3, r3
     832:	2b00      	cmp	r3, #0
     834:	d1e1      	bne.n	7fa <_i2c_master_read+0x2a>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     836:	6872      	ldr	r2, [r6, #4]
     838:	2380      	movs	r3, #128	; 0x80
     83a:	02db      	lsls	r3, r3, #11
     83c:	4313      	orrs	r3, r2
     83e:	6073      	str	r3, [r6, #4]
     840:	e7db      	b.n	7fa <_i2c_master_read+0x2a>
			_i2c_master_wait_for_sync(module);
     842:	0020      	movs	r0, r4
     844:	4b03      	ldr	r3, [pc, #12]	; (854 <_i2c_master_read+0x84>)
     846:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     848:	6872      	ldr	r2, [r6, #4]
     84a:	23c0      	movs	r3, #192	; 0xc0
     84c:	029b      	lsls	r3, r3, #10
     84e:	4313      	orrs	r3, r2
     850:	6073      	str	r3, [r6, #4]
     852:	e7d9      	b.n	808 <_i2c_master_read+0x38>
     854:	000007c5 	.word	0x000007c5

00000858 <_i2c_master_write>:
 * Write next data. Used by interrupt handler to send next data byte to slave.
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_write(struct i2c_master_module *const module)
{
     858:	b570      	push	{r4, r5, r6, lr}
     85a:	0004      	movs	r4, r0
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     85c:	6805      	ldr	r5, [r0, #0]

	/* Check for ack from slave */
	if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
     85e:	8b6b      	ldrh	r3, [r5, #26]
     860:	075b      	lsls	r3, r3, #29
     862:	d503      	bpl.n	86c <_i2c_master_write+0x14>
	{
		/* Set status */
		module->status = STATUS_ERR_OVERFLOW;
     864:	221e      	movs	r2, #30
     866:	2325      	movs	r3, #37	; 0x25
     868:	54c2      	strb	r2, [r0, r3]
	module->buffer_remaining--;

	/* Write byte from buffer to slave */
	_i2c_master_wait_for_sync(module);
	i2c_module->DATA.reg = module->buffer[buffer_index];
}
     86a:	bd70      	pop	{r4, r5, r6, pc}
	uint16_t buffer_index = module->buffer_length;
     86c:	8b46      	ldrh	r6, [r0, #26]
	buffer_index -= module->buffer_remaining;
     86e:	8b83      	ldrh	r3, [r0, #28]
     870:	1af6      	subs	r6, r6, r3
     872:	b2b6      	uxth	r6, r6
	module->buffer_remaining--;
     874:	8b83      	ldrh	r3, [r0, #28]
     876:	3b01      	subs	r3, #1
     878:	b29b      	uxth	r3, r3
     87a:	8383      	strh	r3, [r0, #28]
	_i2c_master_wait_for_sync(module);
     87c:	4b04      	ldr	r3, [pc, #16]	; (890 <_i2c_master_write+0x38>)
     87e:	4798      	blx	r3
	i2c_module->DATA.reg = module->buffer[buffer_index];
     880:	6a23      	ldr	r3, [r4, #32]
     882:	199e      	adds	r6, r3, r6
     884:	7833      	ldrb	r3, [r6, #0]
     886:	b2db      	uxtb	r3, r3
     888:	2228      	movs	r2, #40	; 0x28
     88a:	54ab      	strb	r3, [r5, r2]
     88c:	e7ed      	b.n	86a <_i2c_master_write+0x12>
     88e:	46c0      	nop			; (mov r8, r8)
     890:	000007c5 	.word	0x000007c5

00000894 <_i2c_master_write_packet>:
 * \retval STATUS_BUSY If module is currently busy with another transfer
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     894:	b570      	push	{r4, r5, r6, lr}
     896:	0005      	movs	r5, r0
     898:	000c      	movs	r4, r1
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     89a:	6806      	ldr	r6, [r0, #0]

	/* Switch to high speed mode */
	if (packet->high_speed) {
     89c:	7a4b      	ldrb	r3, [r1, #9]
     89e:	2b00      	cmp	r3, #0
     8a0:	d11a      	bne.n	8d8 <_i2c_master_write_packet+0x44>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     8a2:	6873      	ldr	r3, [r6, #4]
     8a4:	4a13      	ldr	r2, [pc, #76]	; (8f4 <_i2c_master_write_packet+0x60>)
     8a6:	4013      	ands	r3, r2
     8a8:	6073      	str	r3, [r6, #4]

	/* Save packet to software module */
	module->buffer             = packet->data;
     8aa:	6863      	ldr	r3, [r4, #4]
     8ac:	622b      	str	r3, [r5, #32]
	module->buffer_remaining   = packet->data_length;
     8ae:	8863      	ldrh	r3, [r4, #2]
     8b0:	83ab      	strh	r3, [r5, #28]
	module->transfer_direction = I2C_TRANSFER_WRITE;
     8b2:	2200      	movs	r2, #0
     8b4:	2324      	movs	r3, #36	; 0x24
     8b6:	54ea      	strb	r2, [r5, r3]
	module->status             = STATUS_BUSY;
     8b8:	3205      	adds	r2, #5
     8ba:	3301      	adds	r3, #1
     8bc:	54ea      	strb	r2, [r5, r3]

	/* Enable interrupts */
	i2c_module->INTENSET.reg =
     8be:	3b22      	subs	r3, #34	; 0x22
     8c0:	75b3      	strb	r3, [r6, #22]
			SERCOM_I2CM_INTENSET_MB | SERCOM_I2CM_INTENSET_SB;

	/* Set address and direction bit, will send start command on bus */
	if (packet->ten_bit_address) {
     8c2:	7a23      	ldrb	r3, [r4, #8]
     8c4:	2b00      	cmp	r3, #0
     8c6:	d10b      	bne.n	8e0 <_i2c_master_write_packet+0x4c>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
			SERCOM_I2CM_ADDR_TENBITEN;
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     8c8:	8823      	ldrh	r3, [r4, #0]
     8ca:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
     8cc:	7a62      	ldrb	r2, [r4, #9]
     8ce:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     8d0:	4313      	orrs	r3, r2
     8d2:	6273      	str	r3, [r6, #36]	; 0x24
	}

	return STATUS_OK;
}
     8d4:	2000      	movs	r0, #0
     8d6:	bd70      	pop	{r4, r5, r6, pc}
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
     8d8:	7a89      	ldrb	r1, [r1, #10]
     8da:	4b07      	ldr	r3, [pc, #28]	; (8f8 <_i2c_master_write_packet+0x64>)
     8dc:	4798      	blx	r3
     8de:	e7e0      	b.n	8a2 <_i2c_master_write_packet+0xe>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     8e0:	8823      	ldrh	r3, [r4, #0]
     8e2:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     8e4:	7a62      	ldrb	r2, [r4, #9]
     8e6:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     8e8:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     8ea:	2280      	movs	r2, #128	; 0x80
     8ec:	0212      	lsls	r2, r2, #8
     8ee:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     8f0:	6273      	str	r3, [r6, #36]	; 0x24
     8f2:	e7ef      	b.n	8d4 <_i2c_master_write_packet+0x40>
     8f4:	fffbffff 	.word	0xfffbffff
     8f8:	000007a5 	.word	0x000007a5

000008fc <_i2c_master_read_packet>:
{
     8fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     8fe:	0005      	movs	r5, r0
     900:	000c      	movs	r4, r1
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     902:	6806      	ldr	r6, [r0, #0]
	module->buffer             = packet->data;
     904:	684b      	ldr	r3, [r1, #4]
     906:	6203      	str	r3, [r0, #32]
	module->buffer_remaining   = packet->data_length;
     908:	884b      	ldrh	r3, [r1, #2]
     90a:	8383      	strh	r3, [r0, #28]
	module->transfer_direction = I2C_TRANSFER_READ;
     90c:	2201      	movs	r2, #1
     90e:	2324      	movs	r3, #36	; 0x24
     910:	54c2      	strb	r2, [r0, r3]
	module->status             = STATUS_BUSY;
     912:	3204      	adds	r2, #4
     914:	3301      	adds	r3, #1
     916:	54c2      	strb	r2, [r0, r3]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     918:	6837      	ldr	r7, [r6, #0]
     91a:	013f      	lsls	r7, r7, #4
     91c:	0fff      	lsrs	r7, r7, #31
	if (packet->high_speed) {
     91e:	7a4b      	ldrb	r3, [r1, #9]
     920:	2b00      	cmp	r3, #0
     922:	d117      	bne.n	954 <_i2c_master_read_packet+0x58>
	if ((sclsm_flag) && (packet->data_length == 1)) {
     924:	2f00      	cmp	r7, #0
     926:	d002      	beq.n	92e <_i2c_master_read_packet+0x32>
     928:	8863      	ldrh	r3, [r4, #2]
     92a:	2b01      	cmp	r3, #1
     92c:	d016      	beq.n	95c <_i2c_master_read_packet+0x60>
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     92e:	6873      	ldr	r3, [r6, #4]
     930:	4a20      	ldr	r2, [pc, #128]	; (9b4 <_i2c_master_read_packet+0xb8>)
     932:	4013      	ands	r3, r2
     934:	6073      	str	r3, [r6, #4]
	if (packet->ten_bit_address) {
     936:	7a23      	ldrb	r3, [r4, #8]
     938:	2b00      	cmp	r3, #0
     93a:	d115      	bne.n	968 <_i2c_master_read_packet+0x6c>
		i2c_module->INTENSET.reg =
     93c:	2303      	movs	r3, #3
     93e:	75b3      	strb	r3, [r6, #22]
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
     940:	8823      	ldrh	r3, [r4, #0]
     942:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
     944:	7a62      	ldrb	r2, [r4, #9]
     946:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
     948:	4313      	orrs	r3, r2
     94a:	2201      	movs	r2, #1
     94c:	4313      	orrs	r3, r2
     94e:	6273      	str	r3, [r6, #36]	; 0x24
	return STATUS_OK;
     950:	2000      	movs	r0, #0
}
     952:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
     954:	7a89      	ldrb	r1, [r1, #10]
     956:	4b18      	ldr	r3, [pc, #96]	; (9b8 <_i2c_master_read_packet+0xbc>)
     958:	4798      	blx	r3
     95a:	e7e3      	b.n	924 <_i2c_master_read_packet+0x28>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     95c:	6872      	ldr	r2, [r6, #4]
     95e:	2380      	movs	r3, #128	; 0x80
     960:	02db      	lsls	r3, r3, #11
     962:	4313      	orrs	r3, r2
     964:	6073      	str	r3, [r6, #4]
     966:	e7e6      	b.n	936 <_i2c_master_read_packet+0x3a>
		i2c_module->ADDR.reg = (packet->address << 1) |
     968:	8823      	ldrh	r3, [r4, #0]
     96a:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     96c:	7a62      	ldrb	r2, [r4, #9]
     96e:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) |
     970:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     972:	2280      	movs	r2, #128	; 0x80
     974:	0212      	lsls	r2, r2, #8
     976:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) |
     978:	6273      	str	r3, [r6, #36]	; 0x24
		tmp_status = _i2c_master_wait_for_bus(module);
     97a:	0028      	movs	r0, r5
     97c:	4b0f      	ldr	r3, [pc, #60]	; (9bc <_i2c_master_read_packet+0xc0>)
     97e:	4798      	blx	r3
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     980:	6873      	ldr	r3, [r6, #4]
     982:	4a0c      	ldr	r2, [pc, #48]	; (9b4 <_i2c_master_read_packet+0xb8>)
     984:	4013      	ands	r3, r2
     986:	6073      	str	r3, [r6, #4]
		if (tmp_status == STATUS_OK) {
     988:	2800      	cmp	r0, #0
     98a:	d1e2      	bne.n	952 <_i2c_master_read_packet+0x56>
			tmp_status = _i2c_master_address_response(module);
     98c:	0028      	movs	r0, r5
     98e:	4b0c      	ldr	r3, [pc, #48]	; (9c0 <_i2c_master_read_packet+0xc4>)
     990:	4798      	blx	r3
		if (tmp_status == STATUS_OK) {
     992:	2800      	cmp	r0, #0
     994:	d1dd      	bne.n	952 <_i2c_master_read_packet+0x56>
			i2c_module->INTENSET.reg =
     996:	2303      	movs	r3, #3
     998:	75b3      	strb	r3, [r6, #22]
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
     99a:	8823      	ldrh	r3, [r4, #0]
     99c:	0a1b      	lsrs	r3, r3, #8
     99e:	2278      	movs	r2, #120	; 0x78
     9a0:	4313      	orrs	r3, r2
     9a2:	005b      	lsls	r3, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     9a4:	7a62      	ldrb	r2, [r4, #9]
     9a6:	0392      	lsls	r2, r2, #14
     9a8:	2101      	movs	r1, #1
     9aa:	430a      	orrs	r2, r1
     9ac:	4313      	orrs	r3, r2
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
     9ae:	6273      	str	r3, [r6, #36]	; 0x24
     9b0:	e7cf      	b.n	952 <_i2c_master_read_packet+0x56>
     9b2:	46c0      	nop			; (mov r8, r8)
     9b4:	fffbffff 	.word	0xfffbffff
     9b8:	000007a5 	.word	0x000007a5
     9bc:	00000779 	.word	0x00000779
     9c0:	00000749 	.word	0x00000749

000009c4 <i2c_master_register_callback>:
	module->callbacks[callback_type] = callback;
     9c4:	1c93      	adds	r3, r2, #2
     9c6:	009b      	lsls	r3, r3, #2
     9c8:	18c3      	adds	r3, r0, r3
     9ca:	6059      	str	r1, [r3, #4]
	module->registered_callback |= (1 << callback_type);
     9cc:	7e03      	ldrb	r3, [r0, #24]
     9ce:	2101      	movs	r1, #1
     9d0:	4091      	lsls	r1, r2
     9d2:	430b      	orrs	r3, r1
     9d4:	b2db      	uxtb	r3, r3
     9d6:	7603      	strb	r3, [r0, #24]
}
     9d8:	4770      	bx	lr
	...

000009dc <i2c_master_read_packet_job>:
{
     9dc:	b510      	push	{r4, lr}
	if (module->buffer_remaining > 0) {
     9de:	8b83      	ldrh	r3, [r0, #28]
     9e0:	b29b      	uxth	r3, r3
		return STATUS_BUSY;
     9e2:	2205      	movs	r2, #5
	if (module->buffer_remaining > 0) {
     9e4:	2b00      	cmp	r3, #0
     9e6:	d001      	beq.n	9ec <i2c_master_read_packet_job+0x10>
}
     9e8:	0010      	movs	r0, r2
     9ea:	bd10      	pop	{r4, pc}
	module->send_stop = true;
     9ec:	3301      	adds	r3, #1
     9ee:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
     9f0:	72c3      	strb	r3, [r0, #11]
	return _i2c_master_read_packet(module, packet);
     9f2:	4b02      	ldr	r3, [pc, #8]	; (9fc <i2c_master_read_packet_job+0x20>)
     9f4:	4798      	blx	r3
     9f6:	0002      	movs	r2, r0
     9f8:	e7f6      	b.n	9e8 <i2c_master_read_packet_job+0xc>
     9fa:	46c0      	nop			; (mov r8, r8)
     9fc:	000008fd 	.word	0x000008fd

00000a00 <i2c_master_write_packet_job>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
enum status_code i2c_master_write_packet_job(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     a00:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	/* Check if the I2C module is busy with another job. */
	if (module->buffer_remaining > 0) {
     a02:	8b83      	ldrh	r3, [r0, #28]
     a04:	b29b      	uxth	r3, r3
		return STATUS_BUSY;
     a06:	2205      	movs	r2, #5
	if (module->buffer_remaining > 0) {
     a08:	2b00      	cmp	r3, #0
     a0a:	d001      	beq.n	a10 <i2c_master_write_packet_job+0x10>
	/* Make sure we send STOP at end*/
	module->send_stop = true;
	module->send_nack = true;
	/* Start write operation */
	return _i2c_master_write_packet(module, packet);
}
     a0c:	0010      	movs	r0, r2
     a0e:	bd10      	pop	{r4, pc}
	module->send_stop = true;
     a10:	3301      	adds	r3, #1
     a12:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
     a14:	72c3      	strb	r3, [r0, #11]
	return _i2c_master_write_packet(module, packet);
     a16:	4b02      	ldr	r3, [pc, #8]	; (a20 <i2c_master_write_packet_job+0x20>)
     a18:	4798      	blx	r3
     a1a:	0002      	movs	r2, r0
     a1c:	e7f6      	b.n	a0c <i2c_master_write_packet_job+0xc>
     a1e:	46c0      	nop			; (mov r8, r8)
     a20:	00000895 	.word	0x00000895

00000a24 <i2c_master_write_packet_job_no_stop>:
 * \retval STATUS_BUSY  If module is currently busy with another
 */
enum status_code i2c_master_write_packet_job_no_stop(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     a24:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	/* Check if the I2C module is busy with another job. */
	if (module->buffer_remaining > 0) {
     a26:	8b83      	ldrh	r3, [r0, #28]
     a28:	b29b      	uxth	r3, r3
		return STATUS_BUSY;
     a2a:	2205      	movs	r2, #5
	if (module->buffer_remaining > 0) {
     a2c:	2b00      	cmp	r3, #0
     a2e:	d001      	beq.n	a34 <i2c_master_write_packet_job_no_stop+0x10>
	/* Do not send stop condition when done */
	module->send_stop = false;
	module->send_nack = true;
	/* Start write operation */
	return _i2c_master_write_packet(module, packet);
}
     a30:	0010      	movs	r0, r2
     a32:	bd10      	pop	{r4, pc}
	module->send_stop = false;
     a34:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
     a36:	3301      	adds	r3, #1
     a38:	72c3      	strb	r3, [r0, #11]
	return _i2c_master_write_packet(module, packet);
     a3a:	4b02      	ldr	r3, [pc, #8]	; (a44 <i2c_master_write_packet_job_no_stop+0x20>)
     a3c:	4798      	blx	r3
     a3e:	0002      	movs	r2, r0
     a40:	e7f6      	b.n	a30 <i2c_master_write_packet_job_no_stop+0xc>
     a42:	46c0      	nop			; (mov r8, r8)
     a44:	00000895 	.word	0x00000895

00000a48 <_i2c_master_interrupt_handler>:
 *
 * \param[in] instance  SERCOM instance that triggered the interrupt
 */
void _i2c_master_interrupt_handler(
		uint8_t instance)
{
     a48:	b570      	push	{r4, r5, r6, lr}
	/* Get software module for callback handling */
	struct i2c_master_module *module =
     a4a:	0080      	lsls	r0, r0, #2
     a4c:	4b75      	ldr	r3, [pc, #468]	; (c24 <_i2c_master_interrupt_handler+0x1dc>)
     a4e:	58c4      	ldr	r4, [r0, r3]
			(struct i2c_master_module*)_sercom_instances[instance];

	Assert(module);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     a50:	6825      	ldr	r5, [r4, #0]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     a52:	682b      	ldr	r3, [r5, #0]
     a54:	011b      	lsls	r3, r3, #4
     a56:	0fda      	lsrs	r2, r3, #31

	/* Combine callback registered and enabled masks */
	uint8_t callback_mask = module->enabled_callback;
     a58:	7e63      	ldrb	r3, [r4, #25]
	callback_mask &= module->registered_callback;
     a5a:	7e26      	ldrb	r6, [r4, #24]
     a5c:	401e      	ands	r6, r3

	/* Check if the module should respond to address ack */
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
     a5e:	8b63      	ldrh	r3, [r4, #26]
     a60:	b29b      	uxth	r3, r3
     a62:	2b00      	cmp	r3, #0
     a64:	d103      	bne.n	a6e <_i2c_master_interrupt_handler+0x26>
     a66:	8ba3      	ldrh	r3, [r4, #28]
     a68:	b29b      	uxth	r3, r3
     a6a:	2b00      	cmp	r3, #0
     a6c:	d123      	bne.n	ab6 <_i2c_master_interrupt_handler+0x6e>
		/* Call function for address response */
		_i2c_master_async_address_response(module);

	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     a6e:	8b63      	ldrh	r3, [r4, #26]
     a70:	b29b      	uxth	r3, r3
     a72:	2b00      	cmp	r3, #0
     a74:	d008      	beq.n	a88 <_i2c_master_interrupt_handler+0x40>
     a76:	8ba3      	ldrh	r3, [r4, #28]
     a78:	b29b      	uxth	r3, r3
     a7a:	2b00      	cmp	r3, #0
     a7c:	d104      	bne.n	a88 <_i2c_master_interrupt_handler+0x40>
			(module->status == STATUS_BUSY) &&
     a7e:	3325      	adds	r3, #37	; 0x25
     a80:	5ce3      	ldrb	r3, [r4, r3]
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     a82:	2b05      	cmp	r3, #5
     a84:	d100      	bne.n	a88 <_i2c_master_interrupt_handler+0x40>
     a86:	e06d      	b.n	b64 <_i2c_master_interrupt_handler+0x11c>
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
		}

	/* Continue buffer write/read */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
     a88:	8b63      	ldrh	r3, [r4, #26]
     a8a:	b29b      	uxth	r3, r3
     a8c:	2b00      	cmp	r3, #0
     a8e:	d024      	beq.n	ada <_i2c_master_interrupt_handler+0x92>
     a90:	8ba3      	ldrh	r3, [r4, #28]
     a92:	b29b      	uxth	r3, r3
     a94:	2b00      	cmp	r3, #0
     a96:	d020      	beq.n	ada <_i2c_master_interrupt_handler+0x92>
		/* Check that bus ownership is not lost */
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
     a98:	8b6b      	ldrh	r3, [r5, #26]
     a9a:	069b      	lsls	r3, r3, #26
     a9c:	d500      	bpl.n	aa0 <_i2c_master_interrupt_handler+0x58>
     a9e:	e081      	b.n	ba4 <_i2c_master_interrupt_handler+0x15c>
     aa0:	2a00      	cmp	r2, #0
     aa2:	d004      	beq.n	aae <_i2c_master_interrupt_handler+0x66>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
     aa4:	8ba3      	ldrh	r3, [r4, #28]
     aa6:	b29b      	uxth	r3, r3
     aa8:	2b01      	cmp	r3, #1
     aaa:	d100      	bne.n	aae <_i2c_master_interrupt_handler+0x66>
     aac:	e07a      	b.n	ba4 <_i2c_master_interrupt_handler+0x15c>
			module->status = STATUS_ERR_PACKET_COLLISION;
     aae:	2241      	movs	r2, #65	; 0x41
     ab0:	2325      	movs	r3, #37	; 0x25
     ab2:	54e2      	strb	r2, [r4, r3]
     ab4:	e011      	b.n	ada <_i2c_master_interrupt_handler+0x92>
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB)
     ab6:	7e2b      	ldrb	r3, [r5, #24]
     ab8:	07db      	lsls	r3, r3, #31
     aba:	d507      	bpl.n	acc <_i2c_master_interrupt_handler+0x84>
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
     abc:	2301      	movs	r3, #1
     abe:	762b      	strb	r3, [r5, #24]
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
     ac0:	8b6b      	ldrh	r3, [r5, #26]
     ac2:	079b      	lsls	r3, r3, #30
     ac4:	d52e      	bpl.n	b24 <_i2c_master_interrupt_handler+0xdc>
			module->status = STATUS_ERR_PACKET_COLLISION;
     ac6:	2241      	movs	r2, #65	; 0x41
     ac8:	2325      	movs	r3, #37	; 0x25
     aca:	54e2      	strb	r2, [r4, r3]
	module->buffer_length = module->buffer_remaining;
     acc:	8ba3      	ldrh	r3, [r4, #28]
     ace:	b29b      	uxth	r3, r3
     ad0:	8363      	strh	r3, [r4, #26]
	if (module->status == STATUS_BUSY) {
     ad2:	2325      	movs	r3, #37	; 0x25
     ad4:	5ce3      	ldrb	r3, [r4, r3]
     ad6:	2b05      	cmp	r3, #5
     ad8:	d038      	beq.n	b4c <_i2c_master_interrupt_handler+0x104>
			_i2c_master_read(module);
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     ada:	8b63      	ldrh	r3, [r4, #26]
     adc:	b29b      	uxth	r3, r3
     ade:	2b00      	cmp	r3, #0
     ae0:	d007      	beq.n	af2 <_i2c_master_interrupt_handler+0xaa>
     ae2:	8ba3      	ldrh	r3, [r4, #28]
     ae4:	b29b      	uxth	r3, r3
     ae6:	2b00      	cmp	r3, #0
     ae8:	d103      	bne.n	af2 <_i2c_master_interrupt_handler+0xaa>
			(module->status == STATUS_BUSY) &&
     aea:	3325      	adds	r3, #37	; 0x25
     aec:	5ce3      	ldrb	r3, [r4, r3]
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     aee:	2b05      	cmp	r3, #5
     af0:	d064      	beq.n	bbc <_i2c_master_interrupt_handler+0x174>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
		}
	}

	/* Check for error */
	if ((module->status != STATUS_BUSY) && (module->status != STATUS_OK)) {
     af2:	2325      	movs	r3, #37	; 0x25
     af4:	5ce3      	ldrb	r3, [r4, r3]
     af6:	2b05      	cmp	r3, #5
     af8:	d013      	beq.n	b22 <_i2c_master_interrupt_handler+0xda>
     afa:	2325      	movs	r3, #37	; 0x25
     afc:	5ce3      	ldrb	r3, [r4, r3]
     afe:	2b00      	cmp	r3, #0
     b00:	d00f      	beq.n	b22 <_i2c_master_interrupt_handler+0xda>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MB |
     b02:	2303      	movs	r3, #3
     b04:	752b      	strb	r3, [r5, #20]
				SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
     b06:	2300      	movs	r3, #0
     b08:	8363      	strh	r3, [r4, #26]
		module->buffer_remaining = 0;
     b0a:	83a3      	strh	r3, [r4, #28]

		/* Send nack and stop command unless arbitration is lost */
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
     b0c:	3325      	adds	r3, #37	; 0x25
     b0e:	5ce3      	ldrb	r3, [r4, r3]
     b10:	2b41      	cmp	r3, #65	; 0x41
     b12:	d003      	beq.n	b1c <_i2c_master_interrupt_handler+0xd4>
     b14:	7aa3      	ldrb	r3, [r4, #10]
     b16:	2b00      	cmp	r3, #0
     b18:	d000      	beq.n	b1c <_i2c_master_interrupt_handler+0xd4>
     b1a:	e075      	b.n	c08 <_i2c_master_interrupt_handler+0x1c0>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
					SERCOM_I2CM_CTRLB_CMD(3);
		}

		/* Call error callback if enabled and registered */
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_ERROR)) {
     b1c:	0773      	lsls	r3, r6, #29
     b1e:	d500      	bpl.n	b22 <_i2c_master_interrupt_handler+0xda>
     b20:	e07b      	b.n	c1a <_i2c_master_interrupt_handler+0x1d2>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
		}
	}
}
     b22:	bd70      	pop	{r4, r5, r6, pc}
		else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     b24:	8b6b      	ldrh	r3, [r5, #26]
     b26:	075b      	lsls	r3, r3, #29
     b28:	d5d0      	bpl.n	acc <_i2c_master_interrupt_handler+0x84>
			module->status           = STATUS_ERR_BAD_ADDRESS;
     b2a:	2218      	movs	r2, #24
     b2c:	2325      	movs	r3, #37	; 0x25
     b2e:	54e2      	strb	r2, [r4, r3]
			module->buffer_remaining = 0;
     b30:	2300      	movs	r3, #0
     b32:	83a3      	strh	r3, [r4, #28]
			if (module->send_stop) {
     b34:	7aa3      	ldrb	r3, [r4, #10]
     b36:	2b00      	cmp	r3, #0
     b38:	d0c8      	beq.n	acc <_i2c_master_interrupt_handler+0x84>
				_i2c_master_wait_for_sync(module);
     b3a:	0020      	movs	r0, r4
     b3c:	4b3a      	ldr	r3, [pc, #232]	; (c28 <_i2c_master_interrupt_handler+0x1e0>)
     b3e:	4798      	blx	r3
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     b40:	686a      	ldr	r2, [r5, #4]
     b42:	23c0      	movs	r3, #192	; 0xc0
     b44:	029b      	lsls	r3, r3, #10
     b46:	4313      	orrs	r3, r2
     b48:	606b      	str	r3, [r5, #4]
     b4a:	e7bf      	b.n	acc <_i2c_master_interrupt_handler+0x84>
		if (module->transfer_direction == I2C_TRANSFER_WRITE) {
     b4c:	331f      	adds	r3, #31
     b4e:	5ce3      	ldrb	r3, [r4, r3]
     b50:	2b00      	cmp	r3, #0
     b52:	d003      	beq.n	b5c <_i2c_master_interrupt_handler+0x114>
			_i2c_master_read(module);
     b54:	0020      	movs	r0, r4
     b56:	4b35      	ldr	r3, [pc, #212]	; (c2c <_i2c_master_interrupt_handler+0x1e4>)
     b58:	4798      	blx	r3
     b5a:	e7be      	b.n	ada <_i2c_master_interrupt_handler+0x92>
			_i2c_master_write(module);
     b5c:	0020      	movs	r0, r4
     b5e:	4b34      	ldr	r3, [pc, #208]	; (c30 <_i2c_master_interrupt_handler+0x1e8>)
     b60:	4798      	blx	r3
     b62:	e7ba      	b.n	ada <_i2c_master_interrupt_handler+0x92>
			(module->transfer_direction == I2C_TRANSFER_WRITE)) {
     b64:	331f      	adds	r3, #31
     b66:	5ce3      	ldrb	r3, [r4, r3]
			(module->status == STATUS_BUSY) &&
     b68:	2b00      	cmp	r3, #0
     b6a:	d000      	beq.n	b6e <_i2c_master_interrupt_handler+0x126>
     b6c:	e78c      	b.n	a88 <_i2c_master_interrupt_handler+0x40>
		i2c_module->INTENCLR.reg =
     b6e:	3303      	adds	r3, #3
     b70:	752b      	strb	r3, [r5, #20]
		module->buffer_length = 0;
     b72:	2300      	movs	r3, #0
     b74:	8363      	strh	r3, [r4, #26]
		module->status        = STATUS_OK;
     b76:	3325      	adds	r3, #37	; 0x25
     b78:	2200      	movs	r2, #0
     b7a:	54e2      	strb	r2, [r4, r3]
		if (module->send_stop) {
     b7c:	7aa3      	ldrb	r3, [r4, #10]
     b7e:	2b00      	cmp	r3, #0
     b80:	d107      	bne.n	b92 <_i2c_master_interrupt_handler+0x14a>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
     b82:	2301      	movs	r3, #1
     b84:	762b      	strb	r3, [r5, #24]
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
     b86:	07f3      	lsls	r3, r6, #31
     b88:	d5a7      	bpl.n	ada <_i2c_master_interrupt_handler+0x92>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
     b8a:	68e3      	ldr	r3, [r4, #12]
     b8c:	0020      	movs	r0, r4
     b8e:	4798      	blx	r3
     b90:	e7a3      	b.n	ada <_i2c_master_interrupt_handler+0x92>
			_i2c_master_wait_for_sync(module);
     b92:	0020      	movs	r0, r4
     b94:	4b24      	ldr	r3, [pc, #144]	; (c28 <_i2c_master_interrupt_handler+0x1e0>)
     b96:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     b98:	686a      	ldr	r2, [r5, #4]
     b9a:	23c0      	movs	r3, #192	; 0xc0
     b9c:	029b      	lsls	r3, r3, #10
     b9e:	4313      	orrs	r3, r2
     ba0:	606b      	str	r3, [r5, #4]
     ba2:	e7f0      	b.n	b86 <_i2c_master_interrupt_handler+0x13e>
		} else if (module->transfer_direction == I2C_TRANSFER_WRITE) {
     ba4:	2324      	movs	r3, #36	; 0x24
     ba6:	5ce3      	ldrb	r3, [r4, r3]
     ba8:	2b00      	cmp	r3, #0
     baa:	d103      	bne.n	bb4 <_i2c_master_interrupt_handler+0x16c>
			_i2c_master_write(module);
     bac:	0020      	movs	r0, r4
     bae:	4b20      	ldr	r3, [pc, #128]	; (c30 <_i2c_master_interrupt_handler+0x1e8>)
     bb0:	4798      	blx	r3
     bb2:	e792      	b.n	ada <_i2c_master_interrupt_handler+0x92>
			_i2c_master_read(module);
     bb4:	0020      	movs	r0, r4
     bb6:	4b1d      	ldr	r3, [pc, #116]	; (c2c <_i2c_master_interrupt_handler+0x1e4>)
     bb8:	4798      	blx	r3
     bba:	e78e      	b.n	ada <_i2c_master_interrupt_handler+0x92>
			(module->transfer_direction == I2C_TRANSFER_READ)) {
     bbc:	331f      	adds	r3, #31
     bbe:	5ce3      	ldrb	r3, [r4, r3]
			(module->status == STATUS_BUSY) &&
     bc0:	2b01      	cmp	r3, #1
     bc2:	d196      	bne.n	af2 <_i2c_master_interrupt_handler+0xaa>
		if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
     bc4:	7e2b      	ldrb	r3, [r5, #24]
     bc6:	079b      	lsls	r3, r3, #30
     bc8:	d501      	bpl.n	bce <_i2c_master_interrupt_handler+0x186>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
     bca:	2302      	movs	r3, #2
     bcc:	762b      	strb	r3, [r5, #24]
		i2c_module->INTENCLR.reg =
     bce:	2303      	movs	r3, #3
     bd0:	752b      	strb	r3, [r5, #20]
		module->buffer_length = 0;
     bd2:	2300      	movs	r3, #0
     bd4:	8363      	strh	r3, [r4, #26]
		module->status        = STATUS_OK;
     bd6:	3325      	adds	r3, #37	; 0x25
     bd8:	2200      	movs	r2, #0
     bda:	54e2      	strb	r2, [r4, r3]
		if ((callback_mask & (1 << I2C_MASTER_CALLBACK_READ_COMPLETE))
     bdc:	07b3      	lsls	r3, r6, #30
     bde:	d503      	bpl.n	be8 <_i2c_master_interrupt_handler+0x1a0>
				&& (module->transfer_direction == I2C_TRANSFER_READ)) {
     be0:	2324      	movs	r3, #36	; 0x24
     be2:	5ce3      	ldrb	r3, [r4, r3]
     be4:	2b01      	cmp	r3, #1
     be6:	d00b      	beq.n	c00 <_i2c_master_interrupt_handler+0x1b8>
		} else if ((callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE))
     be8:	07f3      	lsls	r3, r6, #31
     bea:	d400      	bmi.n	bee <_i2c_master_interrupt_handler+0x1a6>
     bec:	e781      	b.n	af2 <_i2c_master_interrupt_handler+0xaa>
				&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
     bee:	2324      	movs	r3, #36	; 0x24
     bf0:	5ce3      	ldrb	r3, [r4, r3]
     bf2:	2b00      	cmp	r3, #0
     bf4:	d000      	beq.n	bf8 <_i2c_master_interrupt_handler+0x1b0>
     bf6:	e77c      	b.n	af2 <_i2c_master_interrupt_handler+0xaa>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
     bf8:	68e3      	ldr	r3, [r4, #12]
     bfa:	0020      	movs	r0, r4
     bfc:	4798      	blx	r3
     bfe:	e778      	b.n	af2 <_i2c_master_interrupt_handler+0xaa>
			module->callbacks[I2C_MASTER_CALLBACK_READ_COMPLETE](module);
     c00:	6923      	ldr	r3, [r4, #16]
     c02:	0020      	movs	r0, r4
     c04:	4798      	blx	r3
     c06:	e774      	b.n	af2 <_i2c_master_interrupt_handler+0xaa>
			_i2c_master_wait_for_sync(module);
     c08:	0020      	movs	r0, r4
     c0a:	4b07      	ldr	r3, [pc, #28]	; (c28 <_i2c_master_interrupt_handler+0x1e0>)
     c0c:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
     c0e:	686a      	ldr	r2, [r5, #4]
     c10:	23e0      	movs	r3, #224	; 0xe0
     c12:	02db      	lsls	r3, r3, #11
     c14:	4313      	orrs	r3, r2
     c16:	606b      	str	r3, [r5, #4]
     c18:	e780      	b.n	b1c <_i2c_master_interrupt_handler+0xd4>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
     c1a:	6963      	ldr	r3, [r4, #20]
     c1c:	0020      	movs	r0, r4
     c1e:	4798      	blx	r3
}
     c20:	e77f      	b.n	b22 <_i2c_master_interrupt_handler+0xda>
     c22:	46c0      	nop			; (mov r8, r8)
     c24:	20000110 	.word	0x20000110
     c28:	000007c5 	.word	0x000007c5
     c2c:	000007d1 	.word	0x000007d1
     c30:	00000859 	.word	0x00000859

00000c34 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     c34:	b510      	push	{r4, lr}
     c36:	b082      	sub	sp, #8
     c38:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     c3a:	4b0e      	ldr	r3, [pc, #56]	; (c74 <sercom_set_gclk_generator+0x40>)
     c3c:	781b      	ldrb	r3, [r3, #0]
     c3e:	2b00      	cmp	r3, #0
     c40:	d007      	beq.n	c52 <sercom_set_gclk_generator+0x1e>
     c42:	2900      	cmp	r1, #0
     c44:	d105      	bne.n	c52 <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
     c46:	4b0b      	ldr	r3, [pc, #44]	; (c74 <sercom_set_gclk_generator+0x40>)
     c48:	785b      	ldrb	r3, [r3, #1]
     c4a:	4283      	cmp	r3, r0
     c4c:	d010      	beq.n	c70 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     c4e:	201d      	movs	r0, #29
     c50:	e00c      	b.n	c6c <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
     c52:	a901      	add	r1, sp, #4
     c54:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     c56:	2013      	movs	r0, #19
     c58:	4b07      	ldr	r3, [pc, #28]	; (c78 <sercom_set_gclk_generator+0x44>)
     c5a:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     c5c:	2013      	movs	r0, #19
     c5e:	4b07      	ldr	r3, [pc, #28]	; (c7c <sercom_set_gclk_generator+0x48>)
     c60:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
     c62:	4b04      	ldr	r3, [pc, #16]	; (c74 <sercom_set_gclk_generator+0x40>)
     c64:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     c66:	2201      	movs	r2, #1
     c68:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
     c6a:	2000      	movs	r0, #0
}
     c6c:	b002      	add	sp, #8
     c6e:	bd10      	pop	{r4, pc}
		return STATUS_OK;
     c70:	2000      	movs	r0, #0
     c72:	e7fb      	b.n	c6c <sercom_set_gclk_generator+0x38>
     c74:	2000006c 	.word	0x2000006c
     c78:	000014d1 	.word	0x000014d1
     c7c:	00001445 	.word	0x00001445

00000c80 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     c80:	4b2b      	ldr	r3, [pc, #172]	; (d30 <_sercom_get_default_pad+0xb0>)
     c82:	4298      	cmp	r0, r3
     c84:	d023      	beq.n	cce <_sercom_get_default_pad+0x4e>
     c86:	d90f      	bls.n	ca8 <_sercom_get_default_pad+0x28>
     c88:	4b2a      	ldr	r3, [pc, #168]	; (d34 <_sercom_get_default_pad+0xb4>)
     c8a:	4298      	cmp	r0, r3
     c8c:	d02f      	beq.n	cee <_sercom_get_default_pad+0x6e>
     c8e:	4b2a      	ldr	r3, [pc, #168]	; (d38 <_sercom_get_default_pad+0xb8>)
     c90:	4298      	cmp	r0, r3
     c92:	d142      	bne.n	d1a <_sercom_get_default_pad+0x9a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     c94:	2901      	cmp	r1, #1
     c96:	d03a      	beq.n	d0e <_sercom_get_default_pad+0x8e>
     c98:	2900      	cmp	r1, #0
     c9a:	d046      	beq.n	d2a <_sercom_get_default_pad+0xaa>
     c9c:	2902      	cmp	r1, #2
     c9e:	d038      	beq.n	d12 <_sercom_get_default_pad+0x92>
     ca0:	2903      	cmp	r1, #3
     ca2:	d038      	beq.n	d16 <_sercom_get_default_pad+0x96>
	}

	Assert(false);
	return 0;
     ca4:	2000      	movs	r0, #0
     ca6:	e039      	b.n	d1c <_sercom_get_default_pad+0x9c>
	switch ((uintptr_t)sercom_module) {
     ca8:	4b24      	ldr	r3, [pc, #144]	; (d3c <_sercom_get_default_pad+0xbc>)
     caa:	4298      	cmp	r0, r3
     cac:	d135      	bne.n	d1a <_sercom_get_default_pad+0x9a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     cae:	2901      	cmp	r1, #1
     cb0:	d007      	beq.n	cc2 <_sercom_get_default_pad+0x42>
     cb2:	2900      	cmp	r1, #0
     cb4:	d033      	beq.n	d1e <_sercom_get_default_pad+0x9e>
     cb6:	2902      	cmp	r1, #2
     cb8:	d005      	beq.n	cc6 <_sercom_get_default_pad+0x46>
     cba:	2903      	cmp	r1, #3
     cbc:	d005      	beq.n	cca <_sercom_get_default_pad+0x4a>
	return 0;
     cbe:	2000      	movs	r0, #0
     cc0:	e02c      	b.n	d1c <_sercom_get_default_pad+0x9c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     cc2:	481f      	ldr	r0, [pc, #124]	; (d40 <_sercom_get_default_pad+0xc0>)
     cc4:	e02a      	b.n	d1c <_sercom_get_default_pad+0x9c>
     cc6:	481f      	ldr	r0, [pc, #124]	; (d44 <_sercom_get_default_pad+0xc4>)
     cc8:	e028      	b.n	d1c <_sercom_get_default_pad+0x9c>
     cca:	481f      	ldr	r0, [pc, #124]	; (d48 <_sercom_get_default_pad+0xc8>)
     ccc:	e026      	b.n	d1c <_sercom_get_default_pad+0x9c>
     cce:	2901      	cmp	r1, #1
     cd0:	d007      	beq.n	ce2 <_sercom_get_default_pad+0x62>
     cd2:	2900      	cmp	r1, #0
     cd4:	d025      	beq.n	d22 <_sercom_get_default_pad+0xa2>
     cd6:	2902      	cmp	r1, #2
     cd8:	d005      	beq.n	ce6 <_sercom_get_default_pad+0x66>
     cda:	2903      	cmp	r1, #3
     cdc:	d005      	beq.n	cea <_sercom_get_default_pad+0x6a>
	return 0;
     cde:	2000      	movs	r0, #0
     ce0:	e01c      	b.n	d1c <_sercom_get_default_pad+0x9c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     ce2:	481a      	ldr	r0, [pc, #104]	; (d4c <_sercom_get_default_pad+0xcc>)
     ce4:	e01a      	b.n	d1c <_sercom_get_default_pad+0x9c>
     ce6:	481a      	ldr	r0, [pc, #104]	; (d50 <_sercom_get_default_pad+0xd0>)
     ce8:	e018      	b.n	d1c <_sercom_get_default_pad+0x9c>
     cea:	481a      	ldr	r0, [pc, #104]	; (d54 <_sercom_get_default_pad+0xd4>)
     cec:	e016      	b.n	d1c <_sercom_get_default_pad+0x9c>
     cee:	2901      	cmp	r1, #1
     cf0:	d007      	beq.n	d02 <_sercom_get_default_pad+0x82>
     cf2:	2900      	cmp	r1, #0
     cf4:	d017      	beq.n	d26 <_sercom_get_default_pad+0xa6>
     cf6:	2902      	cmp	r1, #2
     cf8:	d005      	beq.n	d06 <_sercom_get_default_pad+0x86>
     cfa:	2903      	cmp	r1, #3
     cfc:	d005      	beq.n	d0a <_sercom_get_default_pad+0x8a>
	return 0;
     cfe:	2000      	movs	r0, #0
     d00:	e00c      	b.n	d1c <_sercom_get_default_pad+0x9c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     d02:	4815      	ldr	r0, [pc, #84]	; (d58 <_sercom_get_default_pad+0xd8>)
     d04:	e00a      	b.n	d1c <_sercom_get_default_pad+0x9c>
     d06:	4815      	ldr	r0, [pc, #84]	; (d5c <_sercom_get_default_pad+0xdc>)
     d08:	e008      	b.n	d1c <_sercom_get_default_pad+0x9c>
     d0a:	4815      	ldr	r0, [pc, #84]	; (d60 <_sercom_get_default_pad+0xe0>)
     d0c:	e006      	b.n	d1c <_sercom_get_default_pad+0x9c>
     d0e:	4815      	ldr	r0, [pc, #84]	; (d64 <_sercom_get_default_pad+0xe4>)
     d10:	e004      	b.n	d1c <_sercom_get_default_pad+0x9c>
     d12:	4815      	ldr	r0, [pc, #84]	; (d68 <_sercom_get_default_pad+0xe8>)
     d14:	e002      	b.n	d1c <_sercom_get_default_pad+0x9c>
     d16:	4815      	ldr	r0, [pc, #84]	; (d6c <_sercom_get_default_pad+0xec>)
     d18:	e000      	b.n	d1c <_sercom_get_default_pad+0x9c>
	return 0;
     d1a:	2000      	movs	r0, #0
}
     d1c:	4770      	bx	lr
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     d1e:	4814      	ldr	r0, [pc, #80]	; (d70 <_sercom_get_default_pad+0xf0>)
     d20:	e7fc      	b.n	d1c <_sercom_get_default_pad+0x9c>
     d22:	2003      	movs	r0, #3
     d24:	e7fa      	b.n	d1c <_sercom_get_default_pad+0x9c>
     d26:	4813      	ldr	r0, [pc, #76]	; (d74 <_sercom_get_default_pad+0xf4>)
     d28:	e7f8      	b.n	d1c <_sercom_get_default_pad+0x9c>
     d2a:	4813      	ldr	r0, [pc, #76]	; (d78 <_sercom_get_default_pad+0xf8>)
     d2c:	e7f6      	b.n	d1c <_sercom_get_default_pad+0x9c>
     d2e:	46c0      	nop			; (mov r8, r8)
     d30:	42000c00 	.word	0x42000c00
     d34:	42001000 	.word	0x42001000
     d38:	42001400 	.word	0x42001400
     d3c:	42000800 	.word	0x42000800
     d40:	00050003 	.word	0x00050003
     d44:	00060003 	.word	0x00060003
     d48:	00070003 	.word	0x00070003
     d4c:	00010003 	.word	0x00010003
     d50:	001e0003 	.word	0x001e0003
     d54:	001f0003 	.word	0x001f0003
     d58:	00090003 	.word	0x00090003
     d5c:	000a0003 	.word	0x000a0003
     d60:	000b0003 	.word	0x000b0003
     d64:	00110003 	.word	0x00110003
     d68:	00120003 	.word	0x00120003
     d6c:	00130003 	.word	0x00130003
     d70:	00040003 	.word	0x00040003
     d74:	00080003 	.word	0x00080003
     d78:	00100003 	.word	0x00100003

00000d7c <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     d7c:	b530      	push	{r4, r5, lr}
     d7e:	b085      	sub	sp, #20
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     d80:	466a      	mov	r2, sp
     d82:	4b0f      	ldr	r3, [pc, #60]	; (dc0 <_sercom_get_sercom_inst_index+0x44>)
     d84:	cb32      	ldmia	r3!, {r1, r4, r5}
     d86:	c232      	stmia	r2!, {r1, r4, r5}
     d88:	681b      	ldr	r3, [r3, #0]
     d8a:	6013      	str	r3, [r2, #0]

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     d8c:	0003      	movs	r3, r0
     d8e:	9a00      	ldr	r2, [sp, #0]
     d90:	4282      	cmp	r2, r0
     d92:	d011      	beq.n	db8 <_sercom_get_sercom_inst_index+0x3c>
     d94:	9a01      	ldr	r2, [sp, #4]
     d96:	4282      	cmp	r2, r0
     d98:	d00a      	beq.n	db0 <_sercom_get_sercom_inst_index+0x34>
     d9a:	9a02      	ldr	r2, [sp, #8]
     d9c:	4282      	cmp	r2, r0
     d9e:	d009      	beq.n	db4 <_sercom_get_sercom_inst_index+0x38>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     da0:	2000      	movs	r0, #0
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     da2:	9a03      	ldr	r2, [sp, #12]
     da4:	429a      	cmp	r2, r3
     da6:	d001      	beq.n	dac <_sercom_get_sercom_inst_index+0x30>
}
     da8:	b005      	add	sp, #20
     daa:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     dac:	3003      	adds	r0, #3
     dae:	e004      	b.n	dba <_sercom_get_sercom_inst_index+0x3e>
     db0:	2001      	movs	r0, #1
     db2:	e002      	b.n	dba <_sercom_get_sercom_inst_index+0x3e>
     db4:	2002      	movs	r0, #2
     db6:	e000      	b.n	dba <_sercom_get_sercom_inst_index+0x3e>
     db8:	2000      	movs	r0, #0
			return i;
     dba:	b2c0      	uxtb	r0, r0
     dbc:	e7f4      	b.n	da8 <_sercom_get_sercom_inst_index+0x2c>
     dbe:	46c0      	nop			; (mov r8, r8)
     dc0:	00007044 	.word	0x00007044

00000dc4 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
     dc4:	4770      	bx	lr
	...

00000dc8 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
     dc8:	b530      	push	{r4, r5, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
     dca:	4b0b      	ldr	r3, [pc, #44]	; (df8 <_sercom_set_handler+0x30>)
     dcc:	781b      	ldrb	r3, [r3, #0]
     dce:	2b00      	cmp	r3, #0
     dd0:	d10e      	bne.n	df0 <_sercom_set_handler+0x28>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     dd2:	4c0a      	ldr	r4, [pc, #40]	; (dfc <_sercom_set_handler+0x34>)
     dd4:	4d0a      	ldr	r5, [pc, #40]	; (e00 <_sercom_set_handler+0x38>)
     dd6:	6025      	str	r5, [r4, #0]
			_sercom_instances[i] = NULL;
     dd8:	4b0a      	ldr	r3, [pc, #40]	; (e04 <_sercom_set_handler+0x3c>)
     dda:	2200      	movs	r2, #0
     ddc:	601a      	str	r2, [r3, #0]
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     dde:	6065      	str	r5, [r4, #4]
			_sercom_instances[i] = NULL;
     de0:	605a      	str	r2, [r3, #4]
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     de2:	60a5      	str	r5, [r4, #8]
			_sercom_instances[i] = NULL;
     de4:	609a      	str	r2, [r3, #8]
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     de6:	60e5      	str	r5, [r4, #12]
			_sercom_instances[i] = NULL;
     de8:	60da      	str	r2, [r3, #12]
		}

		_handler_table_initialized = true;
     dea:	3201      	adds	r2, #1
     dec:	4b02      	ldr	r3, [pc, #8]	; (df8 <_sercom_set_handler+0x30>)
     dee:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
     df0:	0080      	lsls	r0, r0, #2
     df2:	4b02      	ldr	r3, [pc, #8]	; (dfc <_sercom_set_handler+0x34>)
     df4:	50c1      	str	r1, [r0, r3]
}
     df6:	bd30      	pop	{r4, r5, pc}
     df8:	2000006e 	.word	0x2000006e
     dfc:	20000070 	.word	0x20000070
     e00:	00000dc5 	.word	0x00000dc5
     e04:	20000110 	.word	0x20000110

00000e08 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
     e08:	b510      	push	{r4, lr}
     e0a:	b082      	sub	sp, #8
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
     e0c:	ac01      	add	r4, sp, #4
     e0e:	2309      	movs	r3, #9
     e10:	7023      	strb	r3, [r4, #0]
     e12:	3301      	adds	r3, #1
     e14:	7063      	strb	r3, [r4, #1]
     e16:	3301      	adds	r3, #1
     e18:	70a3      	strb	r3, [r4, #2]
     e1a:	3301      	adds	r3, #1
     e1c:	70e3      	strb	r3, [r4, #3]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
     e1e:	4b02      	ldr	r3, [pc, #8]	; (e28 <_sercom_get_interrupt_vector+0x20>)
     e20:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
     e22:	5620      	ldrsb	r0, [r4, r0]
}
     e24:	b002      	add	sp, #8
     e26:	bd10      	pop	{r4, pc}
     e28:	00000d7d 	.word	0x00000d7d

00000e2c <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
     e2c:	b510      	push	{r4, lr}
     e2e:	4b02      	ldr	r3, [pc, #8]	; (e38 <SERCOM0_Handler+0xc>)
     e30:	681b      	ldr	r3, [r3, #0]
     e32:	2000      	movs	r0, #0
     e34:	4798      	blx	r3
     e36:	bd10      	pop	{r4, pc}
     e38:	20000070 	.word	0x20000070

00000e3c <SERCOM1_Handler>:
     e3c:	b510      	push	{r4, lr}
     e3e:	4b02      	ldr	r3, [pc, #8]	; (e48 <SERCOM1_Handler+0xc>)
     e40:	685b      	ldr	r3, [r3, #4]
     e42:	2001      	movs	r0, #1
     e44:	4798      	blx	r3
     e46:	bd10      	pop	{r4, pc}
     e48:	20000070 	.word	0x20000070

00000e4c <SERCOM2_Handler>:
     e4c:	b510      	push	{r4, lr}
     e4e:	4b02      	ldr	r3, [pc, #8]	; (e58 <SERCOM2_Handler+0xc>)
     e50:	689b      	ldr	r3, [r3, #8]
     e52:	2002      	movs	r0, #2
     e54:	4798      	blx	r3
     e56:	bd10      	pop	{r4, pc}
     e58:	20000070 	.word	0x20000070

00000e5c <SERCOM3_Handler>:
     e5c:	b510      	push	{r4, lr}
     e5e:	4b02      	ldr	r3, [pc, #8]	; (e68 <SERCOM3_Handler+0xc>)
     e60:	68db      	ldr	r3, [r3, #12]
     e62:	2003      	movs	r0, #3
     e64:	4798      	blx	r3
     e66:	bd10      	pop	{r4, pc}
     e68:	20000070 	.word	0x20000070

00000e6c <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
     e6c:	b510      	push	{r4, lr}
	switch (clock_source) {
     e6e:	2808      	cmp	r0, #8
     e70:	d803      	bhi.n	e7a <system_clock_source_get_hz+0xe>
     e72:	0080      	lsls	r0, r0, #2
     e74:	4b1c      	ldr	r3, [pc, #112]	; (ee8 <system_clock_source_get_hz+0x7c>)
     e76:	581b      	ldr	r3, [r3, r0]
     e78:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
     e7a:	2000      	movs	r0, #0
     e7c:	e032      	b.n	ee4 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc.frequency;
     e7e:	4b1b      	ldr	r3, [pc, #108]	; (eec <system_clock_source_get_hz+0x80>)
     e80:	6918      	ldr	r0, [r3, #16]
     e82:	e02f      	b.n	ee4 <system_clock_source_get_hz+0x78>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
     e84:	4b1a      	ldr	r3, [pc, #104]	; (ef0 <system_clock_source_get_hz+0x84>)
     e86:	6a1b      	ldr	r3, [r3, #32]
     e88:	059b      	lsls	r3, r3, #22
     e8a:	0f9b      	lsrs	r3, r3, #30
     e8c:	4819      	ldr	r0, [pc, #100]	; (ef4 <system_clock_source_get_hz+0x88>)
     e8e:	40d8      	lsrs	r0, r3
     e90:	e028      	b.n	ee4 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc32k.frequency;
     e92:	4b16      	ldr	r3, [pc, #88]	; (eec <system_clock_source_get_hz+0x80>)
     e94:	6958      	ldr	r0, [r3, #20]
     e96:	e025      	b.n	ee4 <system_clock_source_get_hz+0x78>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
     e98:	4b14      	ldr	r3, [pc, #80]	; (eec <system_clock_source_get_hz+0x80>)
     e9a:	681b      	ldr	r3, [r3, #0]
			return 0;
     e9c:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
     e9e:	079b      	lsls	r3, r3, #30
     ea0:	d520      	bpl.n	ee4 <system_clock_source_get_hz+0x78>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
     ea2:	4913      	ldr	r1, [pc, #76]	; (ef0 <system_clock_source_get_hz+0x84>)
     ea4:	2210      	movs	r2, #16
     ea6:	68cb      	ldr	r3, [r1, #12]
     ea8:	421a      	tst	r2, r3
     eaa:	d0fc      	beq.n	ea6 <system_clock_source_get_hz+0x3a>
		switch(_system_clock_inst.dfll.control &
     eac:	4b0f      	ldr	r3, [pc, #60]	; (eec <system_clock_source_get_hz+0x80>)
     eae:	681a      	ldr	r2, [r3, #0]
     eb0:	2324      	movs	r3, #36	; 0x24
     eb2:	4013      	ands	r3, r2
     eb4:	2b04      	cmp	r3, #4
     eb6:	d001      	beq.n	ebc <system_clock_source_get_hz+0x50>
			return 48000000UL;
     eb8:	480f      	ldr	r0, [pc, #60]	; (ef8 <system_clock_source_get_hz+0x8c>)
     eba:	e013      	b.n	ee4 <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
     ebc:	2000      	movs	r0, #0
     ebe:	4b0f      	ldr	r3, [pc, #60]	; (efc <system_clock_source_get_hz+0x90>)
     ec0:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
     ec2:	4b0a      	ldr	r3, [pc, #40]	; (eec <system_clock_source_get_hz+0x80>)
     ec4:	689b      	ldr	r3, [r3, #8]
     ec6:	041b      	lsls	r3, r3, #16
     ec8:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
     eca:	4358      	muls	r0, r3
     ecc:	e00a      	b.n	ee4 <system_clock_source_get_hz+0x78>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
     ece:	2350      	movs	r3, #80	; 0x50
     ed0:	4a07      	ldr	r2, [pc, #28]	; (ef0 <system_clock_source_get_hz+0x84>)
     ed2:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
     ed4:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
     ed6:	075b      	lsls	r3, r3, #29
     ed8:	d504      	bpl.n	ee4 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.dpll.frequency;
     eda:	4b04      	ldr	r3, [pc, #16]	; (eec <system_clock_source_get_hz+0x80>)
     edc:	68d8      	ldr	r0, [r3, #12]
     ede:	e001      	b.n	ee4 <system_clock_source_get_hz+0x78>
		return 32768UL;
     ee0:	2080      	movs	r0, #128	; 0x80
     ee2:	0200      	lsls	r0, r0, #8
	}
}
     ee4:	bd10      	pop	{r4, pc}
     ee6:	46c0      	nop			; (mov r8, r8)
     ee8:	00007054 	.word	0x00007054
     eec:	20000080 	.word	0x20000080
     ef0:	40000800 	.word	0x40000800
     ef4:	007a1200 	.word	0x007a1200
     ef8:	02dc6c00 	.word	0x02dc6c00
     efc:	000014ed 	.word	0x000014ed

00000f00 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
     f00:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
     f02:	490c      	ldr	r1, [pc, #48]	; (f34 <system_clock_source_osc8m_set_config+0x34>)
     f04:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
     f06:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
     f08:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
     f0a:	7840      	ldrb	r0, [r0, #1]
     f0c:	2201      	movs	r2, #1
     f0e:	4010      	ands	r0, r2
     f10:	0180      	lsls	r0, r0, #6
     f12:	2640      	movs	r6, #64	; 0x40
     f14:	43b3      	bics	r3, r6
     f16:	4303      	orrs	r3, r0
     f18:	402a      	ands	r2, r5
     f1a:	01d2      	lsls	r2, r2, #7
     f1c:	2080      	movs	r0, #128	; 0x80
     f1e:	4383      	bics	r3, r0
     f20:	4313      	orrs	r3, r2
     f22:	2203      	movs	r2, #3
     f24:	4022      	ands	r2, r4
     f26:	0212      	lsls	r2, r2, #8
     f28:	4803      	ldr	r0, [pc, #12]	; (f38 <system_clock_source_osc8m_set_config+0x38>)
     f2a:	4003      	ands	r3, r0
     f2c:	4313      	orrs	r3, r2
     f2e:	620b      	str	r3, [r1, #32]
}
     f30:	bd70      	pop	{r4, r5, r6, pc}
     f32:	46c0      	nop			; (mov r8, r8)
     f34:	40000800 	.word	0x40000800
     f38:	fffffcff 	.word	0xfffffcff

00000f3c <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
     f3c:	b5f0      	push	{r4, r5, r6, r7, lr}
     f3e:	46de      	mov	lr, fp
     f40:	4657      	mov	r7, sl
     f42:	464e      	mov	r6, r9
     f44:	4645      	mov	r5, r8
     f46:	b5e0      	push	{r5, r6, r7, lr}
     f48:	0001      	movs	r1, r0
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
     f4a:	4b26      	ldr	r3, [pc, #152]	; (fe4 <system_clock_source_xosc32k_set_config+0xa8>)
     f4c:	469b      	mov	fp, r3
     f4e:	8a9b      	ldrh	r3, [r3, #20]

	temp.bit.STARTUP = config->startup_time;
     f50:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
     f52:	7800      	ldrb	r0, [r0, #0]
     f54:	4242      	negs	r2, r0
     f56:	4142      	adcs	r2, r0
     f58:	4691      	mov	r9, r2
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.AAMPEN = config->auto_gain_control;
     f5a:	7888      	ldrb	r0, [r1, #2]
	temp.bit.EN1K = config->enable_1khz_output;
     f5c:	78ca      	ldrb	r2, [r1, #3]
     f5e:	4694      	mov	ip, r2
	temp.bit.EN32K = config->enable_32khz_output;
     f60:	790a      	ldrb	r2, [r1, #4]
     f62:	4690      	mov	r8, r2

	temp.bit.ONDEMAND = config->on_demand;
     f64:	7b4e      	ldrb	r6, [r1, #13]
	temp.bit.RUNSTDBY = config->run_in_standby;
     f66:	7b0f      	ldrb	r7, [r1, #12]
	temp.bit.WRTLOCK  = config->write_once;
     f68:	7b8c      	ldrb	r4, [r1, #14]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
     f6a:	688a      	ldr	r2, [r1, #8]
     f6c:	491e      	ldr	r1, [pc, #120]	; (fe8 <system_clock_source_xosc32k_set_config+0xac>)
     f6e:	614a      	str	r2, [r1, #20]

	SYSCTRL->XOSC32K = temp;
     f70:	2101      	movs	r1, #1
     f72:	464a      	mov	r2, r9
     f74:	0092      	lsls	r2, r2, #2
     f76:	4691      	mov	r9, r2
     f78:	2204      	movs	r2, #4
     f7a:	4393      	bics	r3, r2
     f7c:	464a      	mov	r2, r9
     f7e:	4313      	orrs	r3, r2
     f80:	4642      	mov	r2, r8
     f82:	400a      	ands	r2, r1
     f84:	00d2      	lsls	r2, r2, #3
     f86:	4690      	mov	r8, r2
     f88:	2208      	movs	r2, #8
     f8a:	4393      	bics	r3, r2
     f8c:	4642      	mov	r2, r8
     f8e:	4313      	orrs	r3, r2
     f90:	4662      	mov	r2, ip
     f92:	400a      	ands	r2, r1
     f94:	0112      	lsls	r2, r2, #4
     f96:	4694      	mov	ip, r2
     f98:	2210      	movs	r2, #16
     f9a:	4393      	bics	r3, r2
     f9c:	4662      	mov	r2, ip
     f9e:	4313      	orrs	r3, r2
     fa0:	4008      	ands	r0, r1
     fa2:	0140      	lsls	r0, r0, #5
     fa4:	2220      	movs	r2, #32
     fa6:	4393      	bics	r3, r2
     fa8:	4303      	orrs	r3, r0
     faa:	400f      	ands	r7, r1
     fac:	01bf      	lsls	r7, r7, #6
     fae:	2040      	movs	r0, #64	; 0x40
     fb0:	4383      	bics	r3, r0
     fb2:	433b      	orrs	r3, r7
     fb4:	400e      	ands	r6, r1
     fb6:	01f6      	lsls	r6, r6, #7
     fb8:	3040      	adds	r0, #64	; 0x40
     fba:	4383      	bics	r3, r0
     fbc:	4333      	orrs	r3, r6
     fbe:	3879      	subs	r0, #121	; 0x79
     fc0:	4005      	ands	r5, r0
     fc2:	022d      	lsls	r5, r5, #8
     fc4:	4809      	ldr	r0, [pc, #36]	; (fec <system_clock_source_xosc32k_set_config+0xb0>)
     fc6:	4003      	ands	r3, r0
     fc8:	432b      	orrs	r3, r5
     fca:	4021      	ands	r1, r4
     fcc:	0309      	lsls	r1, r1, #12
     fce:	4808      	ldr	r0, [pc, #32]	; (ff0 <system_clock_source_xosc32k_set_config+0xb4>)
     fd0:	4003      	ands	r3, r0
     fd2:	430b      	orrs	r3, r1
     fd4:	465a      	mov	r2, fp
     fd6:	8293      	strh	r3, [r2, #20]
}
     fd8:	bc3c      	pop	{r2, r3, r4, r5}
     fda:	4690      	mov	r8, r2
     fdc:	4699      	mov	r9, r3
     fde:	46a2      	mov	sl, r4
     fe0:	46ab      	mov	fp, r5
     fe2:	bdf0      	pop	{r4, r5, r6, r7, pc}
     fe4:	40000800 	.word	0x40000800
     fe8:	20000080 	.word	0x20000080
     fec:	fffff8ff 	.word	0xfffff8ff
     ff0:	ffffefff 	.word	0xffffefff

00000ff4 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
     ff4:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
     ff6:	7a03      	ldrb	r3, [r0, #8]
     ff8:	069b      	lsls	r3, r3, #26
     ffa:	0c1b      	lsrs	r3, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
     ffc:	8942      	ldrh	r2, [r0, #10]
     ffe:	0592      	lsls	r2, r2, #22
    1000:	0d92      	lsrs	r2, r2, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    1002:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
    1004:	4918      	ldr	r1, [pc, #96]	; (1068 <STACK_SIZE+0x68>)
    1006:	604b      	str	r3, [r1, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    1008:	7983      	ldrb	r3, [r0, #6]
    100a:	79c2      	ldrb	r2, [r0, #7]
    100c:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    100e:	8842      	ldrh	r2, [r0, #2]
    1010:	8884      	ldrh	r4, [r0, #4]
    1012:	4322      	orrs	r2, r4
    1014:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    1016:	7842      	ldrb	r2, [r0, #1]
    1018:	01d2      	lsls	r2, r2, #7
			(uint32_t)config->chill_cycle     |
    101a:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.control =
    101c:	600b      	str	r3, [r1, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    101e:	7803      	ldrb	r3, [r0, #0]
    1020:	2b04      	cmp	r3, #4
    1022:	d011      	beq.n	1048 <STACK_SIZE+0x48>
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    1024:	2b20      	cmp	r3, #32
    1026:	d10e      	bne.n	1046 <STACK_SIZE+0x46>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    1028:	7b03      	ldrb	r3, [r0, #12]
    102a:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    102c:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    102e:	4313      	orrs	r3, r2
    1030:	89c2      	ldrh	r2, [r0, #14]
    1032:	0412      	lsls	r2, r2, #16
    1034:	490d      	ldr	r1, [pc, #52]	; (106c <STACK_SIZE+0x6c>)
    1036:	400a      	ands	r2, r1
    1038:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    103a:	4a0b      	ldr	r2, [pc, #44]	; (1068 <STACK_SIZE+0x68>)
    103c:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    103e:	6811      	ldr	r1, [r2, #0]
    1040:	4b0b      	ldr	r3, [pc, #44]	; (1070 <STACK_SIZE+0x70>)
    1042:	430b      	orrs	r3, r1
    1044:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    1046:	bd10      	pop	{r4, pc}
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    1048:	7b03      	ldrb	r3, [r0, #12]
    104a:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    104c:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    104e:	4313      	orrs	r3, r2
    1050:	89c2      	ldrh	r2, [r0, #14]
    1052:	0412      	lsls	r2, r2, #16
    1054:	4905      	ldr	r1, [pc, #20]	; (106c <STACK_SIZE+0x6c>)
    1056:	400a      	ands	r2, r1
    1058:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    105a:	4a03      	ldr	r2, [pc, #12]	; (1068 <STACK_SIZE+0x68>)
    105c:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
    105e:	6813      	ldr	r3, [r2, #0]
    1060:	2104      	movs	r1, #4
    1062:	430b      	orrs	r3, r1
    1064:	6013      	str	r3, [r2, #0]
    1066:	e7ee      	b.n	1046 <STACK_SIZE+0x46>
    1068:	20000080 	.word	0x20000080
    106c:	03ff0000 	.word	0x03ff0000
    1070:	00000424 	.word	0x00000424

00001074 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    1074:	2808      	cmp	r0, #8
    1076:	d803      	bhi.n	1080 <system_clock_source_enable+0xc>
    1078:	0080      	lsls	r0, r0, #2
    107a:	4b25      	ldr	r3, [pc, #148]	; (1110 <system_clock_source_enable+0x9c>)
    107c:	581b      	ldr	r3, [r3, r0]
    107e:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    1080:	2017      	movs	r0, #23
    1082:	e044      	b.n	110e <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    1084:	4a23      	ldr	r2, [pc, #140]	; (1114 <system_clock_source_enable+0xa0>)
    1086:	6a13      	ldr	r3, [r2, #32]
    1088:	2102      	movs	r1, #2
    108a:	430b      	orrs	r3, r1
    108c:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    108e:	2000      	movs	r0, #0
    1090:	e03d      	b.n	110e <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    1092:	4a20      	ldr	r2, [pc, #128]	; (1114 <system_clock_source_enable+0xa0>)
    1094:	6993      	ldr	r3, [r2, #24]
    1096:	2102      	movs	r1, #2
    1098:	430b      	orrs	r3, r1
    109a:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    109c:	2000      	movs	r0, #0
		break;
    109e:	e036      	b.n	110e <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    10a0:	4a1c      	ldr	r2, [pc, #112]	; (1114 <system_clock_source_enable+0xa0>)
    10a2:	8a13      	ldrh	r3, [r2, #16]
    10a4:	2102      	movs	r1, #2
    10a6:	430b      	orrs	r3, r1
    10a8:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    10aa:	2000      	movs	r0, #0
		break;
    10ac:	e02f      	b.n	110e <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    10ae:	4a19      	ldr	r2, [pc, #100]	; (1114 <system_clock_source_enable+0xa0>)
    10b0:	8a93      	ldrh	r3, [r2, #20]
    10b2:	2102      	movs	r1, #2
    10b4:	430b      	orrs	r3, r1
    10b6:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    10b8:	2000      	movs	r0, #0
		break;
    10ba:	e028      	b.n	110e <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    10bc:	4916      	ldr	r1, [pc, #88]	; (1118 <system_clock_source_enable+0xa4>)
    10be:	680b      	ldr	r3, [r1, #0]
    10c0:	2202      	movs	r2, #2
    10c2:	4313      	orrs	r3, r2
    10c4:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    10c6:	4b13      	ldr	r3, [pc, #76]	; (1114 <system_clock_source_enable+0xa0>)
    10c8:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    10ca:	0019      	movs	r1, r3
    10cc:	320e      	adds	r2, #14
    10ce:	68cb      	ldr	r3, [r1, #12]
    10d0:	421a      	tst	r2, r3
    10d2:	d0fc      	beq.n	10ce <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    10d4:	4a10      	ldr	r2, [pc, #64]	; (1118 <system_clock_source_enable+0xa4>)
    10d6:	6891      	ldr	r1, [r2, #8]
    10d8:	4b0e      	ldr	r3, [pc, #56]	; (1114 <system_clock_source_enable+0xa0>)
    10da:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    10dc:	6852      	ldr	r2, [r2, #4]
    10de:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    10e0:	2200      	movs	r2, #0
    10e2:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    10e4:	0019      	movs	r1, r3
    10e6:	3210      	adds	r2, #16
    10e8:	68cb      	ldr	r3, [r1, #12]
    10ea:	421a      	tst	r2, r3
    10ec:	d0fc      	beq.n	10e8 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    10ee:	4b0a      	ldr	r3, [pc, #40]	; (1118 <system_clock_source_enable+0xa4>)
    10f0:	681b      	ldr	r3, [r3, #0]
    10f2:	b29b      	uxth	r3, r3
    10f4:	4a07      	ldr	r2, [pc, #28]	; (1114 <system_clock_source_enable+0xa0>)
    10f6:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    10f8:	2000      	movs	r0, #0
    10fa:	e008      	b.n	110e <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    10fc:	4905      	ldr	r1, [pc, #20]	; (1114 <system_clock_source_enable+0xa0>)
    10fe:	2244      	movs	r2, #68	; 0x44
    1100:	5c8b      	ldrb	r3, [r1, r2]
    1102:	2002      	movs	r0, #2
    1104:	4303      	orrs	r3, r0
    1106:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    1108:	2000      	movs	r0, #0
		break;
    110a:	e000      	b.n	110e <system_clock_source_enable+0x9a>
		return STATUS_OK;
    110c:	2000      	movs	r0, #0
}
    110e:	4770      	bx	lr
    1110:	00007078 	.word	0x00007078
    1114:	40000800 	.word	0x40000800
    1118:	20000080 	.word	0x20000080

0000111c <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    111c:	b5f0      	push	{r4, r5, r6, r7, lr}
    111e:	46ce      	mov	lr, r9
    1120:	4647      	mov	r7, r8
    1122:	b580      	push	{r7, lr}
    1124:	b08f      	sub	sp, #60	; 0x3c
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    1126:	22c2      	movs	r2, #194	; 0xc2
    1128:	00d2      	lsls	r2, r2, #3
    112a:	4b4f      	ldr	r3, [pc, #316]	; (1268 <system_clock_init+0x14c>)
    112c:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    112e:	4a4f      	ldr	r2, [pc, #316]	; (126c <system_clock_init+0x150>)
    1130:	6853      	ldr	r3, [r2, #4]
    1132:	211e      	movs	r1, #30
    1134:	438b      	bics	r3, r1
    1136:	391c      	subs	r1, #28
    1138:	430b      	orrs	r3, r1
    113a:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_1;
    113c:	2201      	movs	r2, #1
    113e:	ab01      	add	r3, sp, #4
    1140:	701a      	strb	r2, [r3, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1142:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    1144:	4d4a      	ldr	r5, [pc, #296]	; (1270 <system_clock_init+0x154>)
    1146:	b2e0      	uxtb	r0, r4
    1148:	a901      	add	r1, sp, #4
    114a:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    114c:	3401      	adds	r4, #1
    114e:	2c25      	cmp	r4, #37	; 0x25
    1150:	d1f9      	bne.n	1146 <system_clock_init+0x2a>
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    1152:	a80a      	add	r0, sp, #40	; 0x28
    1154:	2300      	movs	r3, #0
    1156:	7003      	strb	r3, [r0, #0]
	config->auto_gain_control   = false;
    1158:	7083      	strb	r3, [r0, #2]
	config->frequency           = 32768UL;
    115a:	2280      	movs	r2, #128	; 0x80
    115c:	0212      	lsls	r2, r2, #8
    115e:	6082      	str	r2, [r0, #8]
	config->enable_32khz_output = true;
    1160:	2201      	movs	r2, #1
    1162:	7102      	strb	r2, [r0, #4]
	config->write_once          = false;
    1164:	7383      	strb	r3, [r0, #14]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    1166:	2106      	movs	r1, #6
    1168:	7041      	strb	r1, [r0, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
    116a:	70c2      	strb	r2, [r0, #3]
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    116c:	7343      	strb	r3, [r0, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;
    116e:	7302      	strb	r2, [r0, #12]

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    1170:	4b40      	ldr	r3, [pc, #256]	; (1274 <system_clock_init+0x158>)
    1172:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    1174:	2005      	movs	r0, #5
    1176:	4b40      	ldr	r3, [pc, #256]	; (1278 <system_clock_init+0x15c>)
    1178:	4798      	blx	r3
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    117a:	493b      	ldr	r1, [pc, #236]	; (1268 <system_clock_init+0x14c>)
    117c:	2202      	movs	r2, #2
    117e:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    1180:	421a      	tst	r2, r3
    1182:	d0fc      	beq.n	117e <system_clock_init+0x62>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		SYSCTRL->XOSC32K.bit.ONDEMAND = 1;
    1184:	4a38      	ldr	r2, [pc, #224]	; (1268 <system_clock_init+0x14c>)
    1186:	8a93      	ldrh	r3, [r2, #20]
    1188:	2180      	movs	r1, #128	; 0x80
    118a:	430b      	orrs	r3, r1
    118c:	8293      	strh	r3, [r2, #20]
	config->loop_mode       = SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN;
    118e:	ab05      	add	r3, sp, #20
    1190:	2100      	movs	r1, #0
    1192:	7019      	strb	r1, [r3, #0]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    1194:	2200      	movs	r2, #0
    1196:	8059      	strh	r1, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    1198:	8099      	strh	r1, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    119a:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    119c:	71da      	strb	r2, [r3, #7]
	config->multiply_factor = 6; /* Multiply 8MHz by 6 to get 48MHz */
    119e:	3106      	adds	r1, #6
    11a0:	8219      	strh	r1, [r3, #16]
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
	dfll_conf.on_demand      = false;
    11a2:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    11a4:	4b35      	ldr	r3, [pc, #212]	; (127c <system_clock_init+0x160>)
    11a6:	681b      	ldr	r3, [r3, #0]
    11a8:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    11aa:	2b3f      	cmp	r3, #63	; 0x3f
    11ac:	d059      	beq.n	1262 <system_clock_init+0x146>
		coarse = 0x1f;
	}
	dfll_conf.coarse_value = coarse;
    11ae:	a805      	add	r0, sp, #20
    11b0:	7203      	strb	r3, [r0, #8]

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN) {
		dfll_conf.fine_value   = CONF_CLOCK_DFLL_FINE_VALUE;
    11b2:	2380      	movs	r3, #128	; 0x80
    11b4:	009b      	lsls	r3, r3, #2
    11b6:	8143      	strh	r3, [r0, #10]

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    11b8:	3bfa      	subs	r3, #250	; 0xfa
    11ba:	3bff      	subs	r3, #255	; 0xff
    11bc:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    11be:	3338      	adds	r3, #56	; 0x38
    11c0:	81c3      	strh	r3, [r0, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    11c2:	4b2f      	ldr	r3, [pc, #188]	; (1280 <system_clock_init+0x164>)
    11c4:	4798      	blx	r3
	config->run_in_standby  = false;
    11c6:	a804      	add	r0, sp, #16
    11c8:	2500      	movs	r5, #0
    11ca:	7045      	strb	r5, [r0, #1]
	config->on_demand       = true;
    11cc:	2601      	movs	r6, #1
    11ce:	7086      	strb	r6, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    11d0:	7005      	strb	r5, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    11d2:	4b2c      	ldr	r3, [pc, #176]	; (1284 <system_clock_init+0x168>)
    11d4:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    11d6:	2006      	movs	r0, #6
    11d8:	4f27      	ldr	r7, [pc, #156]	; (1278 <system_clock_init+0x15c>)
    11da:	47b8      	blx	r7


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    11dc:	4b2a      	ldr	r3, [pc, #168]	; (1288 <system_clock_init+0x16c>)
    11de:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
	config->high_when_disabled = false;
    11e0:	ac01      	add	r4, sp, #4
    11e2:	7065      	strb	r5, [r4, #1]
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
	config->output_enable      = false;
    11e4:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    11e6:	2305      	movs	r3, #5
    11e8:	7023      	strb	r3, [r4, #0]
    11ea:	331b      	adds	r3, #27
    11ec:	9302      	str	r3, [sp, #8]
    11ee:	7226      	strb	r6, [r4, #8]
    11f0:	0021      	movs	r1, r4
    11f2:	2002      	movs	r0, #2
    11f4:	4b25      	ldr	r3, [pc, #148]	; (128c <system_clock_init+0x170>)
    11f6:	4699      	mov	r9, r3
    11f8:	4798      	blx	r3
    11fa:	2002      	movs	r0, #2
    11fc:	4b24      	ldr	r3, [pc, #144]	; (1290 <system_clock_init+0x174>)
    11fe:	4698      	mov	r8, r3
    1200:	4798      	blx	r3
	config->division_factor    = 1;
    1202:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
    1204:	7065      	strb	r5, [r4, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    1206:	2306      	movs	r3, #6
    1208:	7023      	strb	r3, [r4, #0]
	config->run_in_standby     = false;
    120a:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    120c:	7265      	strb	r5, [r4, #9]
    120e:	0021      	movs	r1, r4
    1210:	2003      	movs	r0, #3
    1212:	47c8      	blx	r9
    1214:	2003      	movs	r0, #3
    1216:	47c0      	blx	r8
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    1218:	2007      	movs	r0, #7
    121a:	47b8      	blx	r7
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    121c:	4912      	ldr	r1, [pc, #72]	; (1268 <system_clock_init+0x14c>)
    121e:	2210      	movs	r2, #16
    1220:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    1222:	421a      	tst	r2, r3
    1224:	d0fc      	beq.n	1220 <system_clock_init+0x104>
	if (CONF_CLOCK_DFLL_ON_DEMAND) {
		SYSCTRL->DFLLCTRL.bit.ONDEMAND = 1;
    1226:	4a10      	ldr	r2, [pc, #64]	; (1268 <system_clock_init+0x14c>)
    1228:	8c93      	ldrh	r3, [r2, #36]	; 0x24
    122a:	2180      	movs	r1, #128	; 0x80
    122c:	430b      	orrs	r3, r1
    122e:	8493      	strh	r3, [r2, #36]	; 0x24
	PM->CPUSEL.reg = (uint32_t)divider;
    1230:	4a18      	ldr	r2, [pc, #96]	; (1294 <system_clock_init+0x178>)
    1232:	2300      	movs	r3, #0
    1234:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    1236:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    1238:	7293      	strb	r3, [r2, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    123a:	72d3      	strb	r3, [r2, #11]
	config->division_factor    = 1;
    123c:	a901      	add	r1, sp, #4
    123e:	2201      	movs	r2, #1
    1240:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
    1242:	704b      	strb	r3, [r1, #1]
	config->run_in_standby     = false;
    1244:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    1246:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    1248:	3307      	adds	r3, #7
    124a:	700b      	strb	r3, [r1, #0]
    124c:	2000      	movs	r0, #0
    124e:	4b0f      	ldr	r3, [pc, #60]	; (128c <system_clock_init+0x170>)
    1250:	4798      	blx	r3
    1252:	2000      	movs	r0, #0
    1254:	4b0e      	ldr	r3, [pc, #56]	; (1290 <system_clock_init+0x174>)
    1256:	4798      	blx	r3
#endif
}
    1258:	b00f      	add	sp, #60	; 0x3c
    125a:	bc0c      	pop	{r2, r3}
    125c:	4690      	mov	r8, r2
    125e:	4699      	mov	r9, r3
    1260:	bdf0      	pop	{r4, r5, r6, r7, pc}
		coarse = 0x1f;
    1262:	3b20      	subs	r3, #32
    1264:	e7a3      	b.n	11ae <system_clock_init+0x92>
    1266:	46c0      	nop			; (mov r8, r8)
    1268:	40000800 	.word	0x40000800
    126c:	41004000 	.word	0x41004000
    1270:	000014d1 	.word	0x000014d1
    1274:	00000f3d 	.word	0x00000f3d
    1278:	00001075 	.word	0x00001075
    127c:	00806024 	.word	0x00806024
    1280:	00000ff5 	.word	0x00000ff5
    1284:	00000f01 	.word	0x00000f01
    1288:	00001299 	.word	0x00001299
    128c:	000012bd 	.word	0x000012bd
    1290:	00001375 	.word	0x00001375
    1294:	40000400 	.word	0x40000400

00001298 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    1298:	4a06      	ldr	r2, [pc, #24]	; (12b4 <system_gclk_init+0x1c>)
    129a:	6993      	ldr	r3, [r2, #24]
    129c:	2108      	movs	r1, #8
    129e:	430b      	orrs	r3, r1
    12a0:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    12a2:	2201      	movs	r2, #1
    12a4:	4b04      	ldr	r3, [pc, #16]	; (12b8 <system_gclk_init+0x20>)
    12a6:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    12a8:	0019      	movs	r1, r3
    12aa:	780b      	ldrb	r3, [r1, #0]
    12ac:	4213      	tst	r3, r2
    12ae:	d1fc      	bne.n	12aa <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    12b0:	4770      	bx	lr
    12b2:	46c0      	nop			; (mov r8, r8)
    12b4:	40000400 	.word	0x40000400
    12b8:	40000c00 	.word	0x40000c00

000012bc <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    12bc:	b570      	push	{r4, r5, r6, lr}
    12be:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    12c0:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    12c2:	780d      	ldrb	r5, [r1, #0]
    12c4:	022d      	lsls	r5, r5, #8
    12c6:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    12c8:	784b      	ldrb	r3, [r1, #1]
    12ca:	2b00      	cmp	r3, #0
    12cc:	d002      	beq.n	12d4 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    12ce:	2380      	movs	r3, #128	; 0x80
    12d0:	02db      	lsls	r3, r3, #11
    12d2:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    12d4:	7a4b      	ldrb	r3, [r1, #9]
    12d6:	2b00      	cmp	r3, #0
    12d8:	d002      	beq.n	12e0 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    12da:	2380      	movs	r3, #128	; 0x80
    12dc:	031b      	lsls	r3, r3, #12
    12de:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    12e0:	6848      	ldr	r0, [r1, #4]
    12e2:	2801      	cmp	r0, #1
    12e4:	d910      	bls.n	1308 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    12e6:	1e43      	subs	r3, r0, #1
    12e8:	4218      	tst	r0, r3
    12ea:	d134      	bne.n	1356 <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    12ec:	2802      	cmp	r0, #2
    12ee:	d930      	bls.n	1352 <system_gclk_gen_set_config+0x96>
    12f0:	2302      	movs	r3, #2
    12f2:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    12f4:	3201      	adds	r2, #1
						mask <<= 1) {
    12f6:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    12f8:	4298      	cmp	r0, r3
    12fa:	d8fb      	bhi.n	12f4 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    12fc:	0212      	lsls	r2, r2, #8
    12fe:	4332      	orrs	r2, r6
    1300:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    1302:	2380      	movs	r3, #128	; 0x80
    1304:	035b      	lsls	r3, r3, #13
    1306:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    1308:	7a0b      	ldrb	r3, [r1, #8]
    130a:	2b00      	cmp	r3, #0
    130c:	d002      	beq.n	1314 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    130e:	2380      	movs	r3, #128	; 0x80
    1310:	039b      	lsls	r3, r3, #14
    1312:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1314:	4a13      	ldr	r2, [pc, #76]	; (1364 <system_gclk_gen_set_config+0xa8>)
    1316:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    1318:	b25b      	sxtb	r3, r3
    131a:	2b00      	cmp	r3, #0
    131c:	dbfb      	blt.n	1316 <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    131e:	4b12      	ldr	r3, [pc, #72]	; (1368 <system_gclk_gen_set_config+0xac>)
    1320:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1322:	4b12      	ldr	r3, [pc, #72]	; (136c <system_gclk_gen_set_config+0xb0>)
    1324:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1326:	4a0f      	ldr	r2, [pc, #60]	; (1364 <system_gclk_gen_set_config+0xa8>)
    1328:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    132a:	b25b      	sxtb	r3, r3
    132c:	2b00      	cmp	r3, #0
    132e:	dbfb      	blt.n	1328 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    1330:	4b0c      	ldr	r3, [pc, #48]	; (1364 <system_gclk_gen_set_config+0xa8>)
    1332:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1334:	001a      	movs	r2, r3
    1336:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    1338:	b25b      	sxtb	r3, r3
    133a:	2b00      	cmp	r3, #0
    133c:	dbfb      	blt.n	1336 <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    133e:	4a09      	ldr	r2, [pc, #36]	; (1364 <system_gclk_gen_set_config+0xa8>)
    1340:	6853      	ldr	r3, [r2, #4]
    1342:	2180      	movs	r1, #128	; 0x80
    1344:	0249      	lsls	r1, r1, #9
    1346:	400b      	ands	r3, r1
    1348:	431d      	orrs	r5, r3
    134a:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    134c:	4b08      	ldr	r3, [pc, #32]	; (1370 <system_gclk_gen_set_config+0xb4>)
    134e:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1350:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    1352:	2200      	movs	r2, #0
    1354:	e7d2      	b.n	12fc <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    1356:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    1358:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    135a:	2380      	movs	r3, #128	; 0x80
    135c:	029b      	lsls	r3, r3, #10
    135e:	431d      	orrs	r5, r3
    1360:	e7d2      	b.n	1308 <system_gclk_gen_set_config+0x4c>
    1362:	46c0      	nop			; (mov r8, r8)
    1364:	40000c00 	.word	0x40000c00
    1368:	000001f1 	.word	0x000001f1
    136c:	40000c08 	.word	0x40000c08
    1370:	00000231 	.word	0x00000231

00001374 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    1374:	b510      	push	{r4, lr}
    1376:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1378:	4a0b      	ldr	r2, [pc, #44]	; (13a8 <system_gclk_gen_enable+0x34>)
    137a:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    137c:	b25b      	sxtb	r3, r3
    137e:	2b00      	cmp	r3, #0
    1380:	dbfb      	blt.n	137a <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    1382:	4b0a      	ldr	r3, [pc, #40]	; (13ac <system_gclk_gen_enable+0x38>)
    1384:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1386:	4b0a      	ldr	r3, [pc, #40]	; (13b0 <system_gclk_gen_enable+0x3c>)
    1388:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    138a:	4a07      	ldr	r2, [pc, #28]	; (13a8 <system_gclk_gen_enable+0x34>)
    138c:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    138e:	b25b      	sxtb	r3, r3
    1390:	2b00      	cmp	r3, #0
    1392:	dbfb      	blt.n	138c <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    1394:	4a04      	ldr	r2, [pc, #16]	; (13a8 <system_gclk_gen_enable+0x34>)
    1396:	6851      	ldr	r1, [r2, #4]
    1398:	2380      	movs	r3, #128	; 0x80
    139a:	025b      	lsls	r3, r3, #9
    139c:	430b      	orrs	r3, r1
    139e:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    13a0:	4b04      	ldr	r3, [pc, #16]	; (13b4 <system_gclk_gen_enable+0x40>)
    13a2:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    13a4:	bd10      	pop	{r4, pc}
    13a6:	46c0      	nop			; (mov r8, r8)
    13a8:	40000c00 	.word	0x40000c00
    13ac:	000001f1 	.word	0x000001f1
    13b0:	40000c04 	.word	0x40000c04
    13b4:	00000231 	.word	0x00000231

000013b8 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    13b8:	b570      	push	{r4, r5, r6, lr}
    13ba:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    13bc:	4a1a      	ldr	r2, [pc, #104]	; (1428 <system_gclk_gen_get_hz+0x70>)
    13be:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    13c0:	b25b      	sxtb	r3, r3
    13c2:	2b00      	cmp	r3, #0
    13c4:	dbfb      	blt.n	13be <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    13c6:	4b19      	ldr	r3, [pc, #100]	; (142c <system_gclk_gen_get_hz+0x74>)
    13c8:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    13ca:	4b19      	ldr	r3, [pc, #100]	; (1430 <system_gclk_gen_get_hz+0x78>)
    13cc:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    13ce:	4a16      	ldr	r2, [pc, #88]	; (1428 <system_gclk_gen_get_hz+0x70>)
    13d0:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    13d2:	b25b      	sxtb	r3, r3
    13d4:	2b00      	cmp	r3, #0
    13d6:	dbfb      	blt.n	13d0 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    13d8:	4e13      	ldr	r6, [pc, #76]	; (1428 <system_gclk_gen_get_hz+0x70>)
    13da:	6870      	ldr	r0, [r6, #4]
    13dc:	04c0      	lsls	r0, r0, #19
    13de:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    13e0:	4b14      	ldr	r3, [pc, #80]	; (1434 <system_gclk_gen_get_hz+0x7c>)
    13e2:	4798      	blx	r3
    13e4:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    13e6:	4b12      	ldr	r3, [pc, #72]	; (1430 <system_gclk_gen_get_hz+0x78>)
    13e8:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    13ea:	6876      	ldr	r6, [r6, #4]
    13ec:	02f6      	lsls	r6, r6, #11
    13ee:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    13f0:	4b11      	ldr	r3, [pc, #68]	; (1438 <system_gclk_gen_get_hz+0x80>)
    13f2:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    13f4:	4a0c      	ldr	r2, [pc, #48]	; (1428 <system_gclk_gen_get_hz+0x70>)
    13f6:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    13f8:	b25b      	sxtb	r3, r3
    13fa:	2b00      	cmp	r3, #0
    13fc:	dbfb      	blt.n	13f6 <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    13fe:	4b0a      	ldr	r3, [pc, #40]	; (1428 <system_gclk_gen_get_hz+0x70>)
    1400:	689c      	ldr	r4, [r3, #8]
    1402:	0224      	lsls	r4, r4, #8
    1404:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    1406:	4b0d      	ldr	r3, [pc, #52]	; (143c <system_gclk_gen_get_hz+0x84>)
    1408:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    140a:	2e00      	cmp	r6, #0
    140c:	d107      	bne.n	141e <system_gclk_gen_get_hz+0x66>
    140e:	2c01      	cmp	r4, #1
    1410:	d907      	bls.n	1422 <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    1412:	0021      	movs	r1, r4
    1414:	0028      	movs	r0, r5
    1416:	4b0a      	ldr	r3, [pc, #40]	; (1440 <system_gclk_gen_get_hz+0x88>)
    1418:	4798      	blx	r3
    141a:	0005      	movs	r5, r0
    141c:	e001      	b.n	1422 <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    141e:	3401      	adds	r4, #1
    1420:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    1422:	0028      	movs	r0, r5
    1424:	bd70      	pop	{r4, r5, r6, pc}
    1426:	46c0      	nop			; (mov r8, r8)
    1428:	40000c00 	.word	0x40000c00
    142c:	000001f1 	.word	0x000001f1
    1430:	40000c04 	.word	0x40000c04
    1434:	00000e6d 	.word	0x00000e6d
    1438:	40000c08 	.word	0x40000c08
    143c:	00000231 	.word	0x00000231
    1440:	00004395 	.word	0x00004395

00001444 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    1444:	b510      	push	{r4, lr}
    1446:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1448:	4b06      	ldr	r3, [pc, #24]	; (1464 <system_gclk_chan_enable+0x20>)
    144a:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    144c:	4b06      	ldr	r3, [pc, #24]	; (1468 <system_gclk_chan_enable+0x24>)
    144e:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    1450:	4a06      	ldr	r2, [pc, #24]	; (146c <system_gclk_chan_enable+0x28>)
    1452:	8853      	ldrh	r3, [r2, #2]
    1454:	2180      	movs	r1, #128	; 0x80
    1456:	01c9      	lsls	r1, r1, #7
    1458:	430b      	orrs	r3, r1
    145a:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    145c:	4b04      	ldr	r3, [pc, #16]	; (1470 <system_gclk_chan_enable+0x2c>)
    145e:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1460:	bd10      	pop	{r4, pc}
    1462:	46c0      	nop			; (mov r8, r8)
    1464:	000001f1 	.word	0x000001f1
    1468:	40000c02 	.word	0x40000c02
    146c:	40000c00 	.word	0x40000c00
    1470:	00000231 	.word	0x00000231

00001474 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    1474:	b510      	push	{r4, lr}
    1476:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1478:	4b0f      	ldr	r3, [pc, #60]	; (14b8 <system_gclk_chan_disable+0x44>)
    147a:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    147c:	4b0f      	ldr	r3, [pc, #60]	; (14bc <system_gclk_chan_disable+0x48>)
    147e:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    1480:	4a0f      	ldr	r2, [pc, #60]	; (14c0 <system_gclk_chan_disable+0x4c>)
    1482:	8853      	ldrh	r3, [r2, #2]
    1484:	051b      	lsls	r3, r3, #20
    1486:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    1488:	8853      	ldrh	r3, [r2, #2]
    148a:	490e      	ldr	r1, [pc, #56]	; (14c4 <system_gclk_chan_disable+0x50>)
    148c:	400b      	ands	r3, r1
    148e:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    1490:	8853      	ldrh	r3, [r2, #2]
    1492:	490d      	ldr	r1, [pc, #52]	; (14c8 <system_gclk_chan_disable+0x54>)
    1494:	400b      	ands	r3, r1
    1496:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    1498:	0011      	movs	r1, r2
    149a:	2280      	movs	r2, #128	; 0x80
    149c:	01d2      	lsls	r2, r2, #7
    149e:	884b      	ldrh	r3, [r1, #2]
    14a0:	4213      	tst	r3, r2
    14a2:	d1fc      	bne.n	149e <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    14a4:	4906      	ldr	r1, [pc, #24]	; (14c0 <system_gclk_chan_disable+0x4c>)
    14a6:	884a      	ldrh	r2, [r1, #2]
    14a8:	0203      	lsls	r3, r0, #8
    14aa:	4806      	ldr	r0, [pc, #24]	; (14c4 <system_gclk_chan_disable+0x50>)
    14ac:	4002      	ands	r2, r0
    14ae:	4313      	orrs	r3, r2
    14b0:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    14b2:	4b06      	ldr	r3, [pc, #24]	; (14cc <system_gclk_chan_disable+0x58>)
    14b4:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    14b6:	bd10      	pop	{r4, pc}
    14b8:	000001f1 	.word	0x000001f1
    14bc:	40000c02 	.word	0x40000c02
    14c0:	40000c00 	.word	0x40000c00
    14c4:	fffff0ff 	.word	0xfffff0ff
    14c8:	ffffbfff 	.word	0xffffbfff
    14cc:	00000231 	.word	0x00000231

000014d0 <system_gclk_chan_set_config>:
{
    14d0:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    14d2:	780c      	ldrb	r4, [r1, #0]
    14d4:	0224      	lsls	r4, r4, #8
    14d6:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    14d8:	4b02      	ldr	r3, [pc, #8]	; (14e4 <system_gclk_chan_set_config+0x14>)
    14da:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    14dc:	b2a4      	uxth	r4, r4
    14de:	4b02      	ldr	r3, [pc, #8]	; (14e8 <system_gclk_chan_set_config+0x18>)
    14e0:	805c      	strh	r4, [r3, #2]
}
    14e2:	bd10      	pop	{r4, pc}
    14e4:	00001475 	.word	0x00001475
    14e8:	40000c00 	.word	0x40000c00

000014ec <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    14ec:	b510      	push	{r4, lr}
    14ee:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    14f0:	4b06      	ldr	r3, [pc, #24]	; (150c <system_gclk_chan_get_hz+0x20>)
    14f2:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    14f4:	4b06      	ldr	r3, [pc, #24]	; (1510 <system_gclk_chan_get_hz+0x24>)
    14f6:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    14f8:	4b06      	ldr	r3, [pc, #24]	; (1514 <system_gclk_chan_get_hz+0x28>)
    14fa:	885c      	ldrh	r4, [r3, #2]
    14fc:	0524      	lsls	r4, r4, #20
    14fe:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    1500:	4b05      	ldr	r3, [pc, #20]	; (1518 <system_gclk_chan_get_hz+0x2c>)
    1502:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    1504:	0020      	movs	r0, r4
    1506:	4b05      	ldr	r3, [pc, #20]	; (151c <system_gclk_chan_get_hz+0x30>)
    1508:	4798      	blx	r3
}
    150a:	bd10      	pop	{r4, pc}
    150c:	000001f1 	.word	0x000001f1
    1510:	40000c02 	.word	0x40000c02
    1514:	40000c00 	.word	0x40000c00
    1518:	00000231 	.word	0x00000231
    151c:	000013b9 	.word	0x000013b9

00001520 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    1520:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    1522:	78d3      	ldrb	r3, [r2, #3]
    1524:	2b00      	cmp	r3, #0
    1526:	d135      	bne.n	1594 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    1528:	7813      	ldrb	r3, [r2, #0]
    152a:	2b80      	cmp	r3, #128	; 0x80
    152c:	d029      	beq.n	1582 <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    152e:	061b      	lsls	r3, r3, #24
    1530:	2480      	movs	r4, #128	; 0x80
    1532:	0264      	lsls	r4, r4, #9
    1534:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    1536:	7854      	ldrb	r4, [r2, #1]
    1538:	2502      	movs	r5, #2
    153a:	43ac      	bics	r4, r5
    153c:	d106      	bne.n	154c <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    153e:	7894      	ldrb	r4, [r2, #2]
    1540:	2c00      	cmp	r4, #0
    1542:	d120      	bne.n	1586 <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    1544:	2480      	movs	r4, #128	; 0x80
    1546:	02a4      	lsls	r4, r4, #10
    1548:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    154a:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    154c:	7854      	ldrb	r4, [r2, #1]
    154e:	3c01      	subs	r4, #1
    1550:	2c01      	cmp	r4, #1
    1552:	d91c      	bls.n	158e <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1554:	040d      	lsls	r5, r1, #16
    1556:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1558:	24a0      	movs	r4, #160	; 0xa0
    155a:	05e4      	lsls	r4, r4, #23
    155c:	432c      	orrs	r4, r5
    155e:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1560:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1562:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1564:	24d0      	movs	r4, #208	; 0xd0
    1566:	0624      	lsls	r4, r4, #24
    1568:	432c      	orrs	r4, r5
    156a:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    156c:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    156e:	78d4      	ldrb	r4, [r2, #3]
    1570:	2c00      	cmp	r4, #0
    1572:	d122      	bne.n	15ba <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    1574:	035b      	lsls	r3, r3, #13
    1576:	d51c      	bpl.n	15b2 <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    1578:	7893      	ldrb	r3, [r2, #2]
    157a:	2b01      	cmp	r3, #1
    157c:	d01e      	beq.n	15bc <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    157e:	6141      	str	r1, [r0, #20]
    1580:	e017      	b.n	15b2 <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    1582:	2300      	movs	r3, #0
    1584:	e7d7      	b.n	1536 <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    1586:	24c0      	movs	r4, #192	; 0xc0
    1588:	02e4      	lsls	r4, r4, #11
    158a:	4323      	orrs	r3, r4
    158c:	e7dd      	b.n	154a <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    158e:	4c0d      	ldr	r4, [pc, #52]	; (15c4 <_system_pinmux_config+0xa4>)
    1590:	4023      	ands	r3, r4
    1592:	e7df      	b.n	1554 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    1594:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1596:	040c      	lsls	r4, r1, #16
    1598:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    159a:	23a0      	movs	r3, #160	; 0xa0
    159c:	05db      	lsls	r3, r3, #23
    159e:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    15a0:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    15a2:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    15a4:	23d0      	movs	r3, #208	; 0xd0
    15a6:	061b      	lsls	r3, r3, #24
    15a8:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    15aa:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    15ac:	78d3      	ldrb	r3, [r2, #3]
    15ae:	2b00      	cmp	r3, #0
    15b0:	d103      	bne.n	15ba <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    15b2:	7853      	ldrb	r3, [r2, #1]
    15b4:	3b01      	subs	r3, #1
    15b6:	2b01      	cmp	r3, #1
    15b8:	d902      	bls.n	15c0 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    15ba:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    15bc:	6181      	str	r1, [r0, #24]
    15be:	e7f8      	b.n	15b2 <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    15c0:	6081      	str	r1, [r0, #8]
}
    15c2:	e7fa      	b.n	15ba <_system_pinmux_config+0x9a>
    15c4:	fffbffff 	.word	0xfffbffff

000015c8 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    15c8:	b510      	push	{r4, lr}
    15ca:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    15cc:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    15ce:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    15d0:	2900      	cmp	r1, #0
    15d2:	d104      	bne.n	15de <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    15d4:	0943      	lsrs	r3, r0, #5
    15d6:	01db      	lsls	r3, r3, #7
    15d8:	4905      	ldr	r1, [pc, #20]	; (15f0 <system_pinmux_pin_set_config+0x28>)
    15da:	468c      	mov	ip, r1
    15dc:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    15de:	241f      	movs	r4, #31
    15e0:	4020      	ands	r0, r4
    15e2:	2101      	movs	r1, #1
    15e4:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    15e6:	0018      	movs	r0, r3
    15e8:	4b02      	ldr	r3, [pc, #8]	; (15f4 <system_pinmux_pin_set_config+0x2c>)
    15ea:	4798      	blx	r3
}
    15ec:	bd10      	pop	{r4, pc}
    15ee:	46c0      	nop			; (mov r8, r8)
    15f0:	41004400 	.word	0x41004400
    15f4:	00001521 	.word	0x00001521

000015f8 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    15f8:	4770      	bx	lr
	...

000015fc <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    15fc:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    15fe:	4b05      	ldr	r3, [pc, #20]	; (1614 <system_init+0x18>)
    1600:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    1602:	4b05      	ldr	r3, [pc, #20]	; (1618 <system_init+0x1c>)
    1604:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    1606:	4b05      	ldr	r3, [pc, #20]	; (161c <system_init+0x20>)
    1608:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    160a:	4b05      	ldr	r3, [pc, #20]	; (1620 <system_init+0x24>)
    160c:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    160e:	4b05      	ldr	r3, [pc, #20]	; (1624 <system_init+0x28>)
    1610:	4798      	blx	r3
}
    1612:	bd10      	pop	{r4, pc}
    1614:	0000111d 	.word	0x0000111d
    1618:	000001ed 	.word	0x000001ed
    161c:	000015f9 	.word	0x000015f9
    1620:	00000181 	.word	0x00000181
    1624:	000015f9 	.word	0x000015f9

00001628 <_tcc_get_inst_index>:
uint8_t _tcc_get_inst_index(
		Tcc *const hw)
{
	/* Find index for TCC instance. */
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
		if (hw == tcc_modules[i]) {
    1628:	4b09      	ldr	r3, [pc, #36]	; (1650 <_tcc_get_inst_index+0x28>)
    162a:	4298      	cmp	r0, r3
    162c:	d00c      	beq.n	1648 <_tcc_get_inst_index+0x20>
    162e:	4b09      	ldr	r3, [pc, #36]	; (1654 <_tcc_get_inst_index+0x2c>)
    1630:	4298      	cmp	r0, r3
    1632:	d007      	beq.n	1644 <_tcc_get_inst_index+0x1c>
    1634:	4a08      	ldr	r2, [pc, #32]	; (1658 <_tcc_get_inst_index+0x30>)
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    1636:	2300      	movs	r3, #0
		if (hw == tcc_modules[i]) {
    1638:	4290      	cmp	r0, r2
    163a:	d001      	beq.n	1640 <_tcc_get_inst_index+0x18>
}
    163c:	0018      	movs	r0, r3
    163e:	4770      	bx	lr
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
    1640:	3302      	adds	r3, #2
    1642:	e002      	b.n	164a <_tcc_get_inst_index+0x22>
    1644:	2301      	movs	r3, #1
    1646:	e000      	b.n	164a <_tcc_get_inst_index+0x22>
    1648:	2300      	movs	r3, #0
			return i;
    164a:	b2db      	uxtb	r3, r3
    164c:	e7f6      	b.n	163c <_tcc_get_inst_index+0x14>
    164e:	46c0      	nop			; (mov r8, r8)
    1650:	42002000 	.word	0x42002000
    1654:	42002400 	.word	0x42002400
    1658:	42002800 	.word	0x42002800

0000165c <_tcc_set_compare_value>:
static enum status_code _tcc_set_compare_value(
		const struct tcc_module *const module_inst,
		const enum tcc_match_capture_channel channel_index,
		const uint32_t compare,
		const bool double_buffering_enabled)
{
    165c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    165e:	000f      	movs	r7, r1
    1660:	0015      	movs	r5, r2
    1662:	001e      	movs	r6, r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
    1664:	6804      	ldr	r4, [r0, #0]
	/* Get a index of the module */
	uint8_t module_index = _tcc_get_inst_index(tcc_module);
    1666:	0020      	movs	r0, r4
    1668:	4b16      	ldr	r3, [pc, #88]	; (16c4 <_tcc_set_compare_value+0x68>)
    166a:	4798      	blx	r3

	/* Check index */
	if (channel_index >= _tcc_cc_nums[module_index]) {
    166c:	4b16      	ldr	r3, [pc, #88]	; (16c8 <_tcc_set_compare_value+0x6c>)
    166e:	5c1a      	ldrb	r2, [r3, r0]
		return STATUS_ERR_INVALID_ARG;
    1670:	2317      	movs	r3, #23
	if (channel_index >= _tcc_cc_nums[module_index]) {
    1672:	42ba      	cmp	r2, r7
    1674:	d801      	bhi.n	167a <_tcc_set_compare_value+0x1e>
			/* Sync wait */
		}
		tcc_module->CC[channel_index].reg = compare;
	}
	return STATUS_OK;
}
    1676:	0018      	movs	r0, r3
    1678:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t max_count = _tcc_maxs[module_index];
    167a:	0080      	lsls	r0, r0, #2
	if (compare > max_count) {
    167c:	4b13      	ldr	r3, [pc, #76]	; (16cc <_tcc_set_compare_value+0x70>)
    167e:	58c2      	ldr	r2, [r0, r3]
		return STATUS_ERR_INVALID_ARG;
    1680:	2317      	movs	r3, #23
	if (compare > max_count) {
    1682:	42aa      	cmp	r2, r5
    1684:	d3f7      	bcc.n	1676 <_tcc_set_compare_value+0x1a>
	if (double_buffering_enabled) {
    1686:	2e00      	cmp	r6, #0
    1688:	d010      	beq.n	16ac <_tcc_set_compare_value+0x50>
				(TCC_STATUS_CCBV0 << channel_index)) {
    168a:	2280      	movs	r2, #128	; 0x80
    168c:	0252      	lsls	r2, r2, #9
    168e:	40ba      	lsls	r2, r7
		while(tcc_module->STATUS.reg  &
    1690:	6b23      	ldr	r3, [r4, #48]	; 0x30
    1692:	421a      	tst	r2, r3
    1694:	d1fc      	bne.n	1690 <_tcc_set_compare_value+0x34>
				(TCC_SYNCBUSY_CCB0 << channel_index)) {
    1696:	2280      	movs	r2, #128	; 0x80
    1698:	0312      	lsls	r2, r2, #12
    169a:	40ba      	lsls	r2, r7
		while(tcc_module->SYNCBUSY.reg  &
    169c:	68a3      	ldr	r3, [r4, #8]
    169e:	421a      	tst	r2, r3
    16a0:	d1fc      	bne.n	169c <_tcc_set_compare_value+0x40>
		tcc_module->CCB[channel_index].reg = compare;
    16a2:	371c      	adds	r7, #28
    16a4:	00bf      	lsls	r7, r7, #2
    16a6:	513d      	str	r5, [r7, r4]
	return STATUS_OK;
    16a8:	2300      	movs	r3, #0
    16aa:	e7e4      	b.n	1676 <_tcc_set_compare_value+0x1a>
		while(tcc_module->SYNCBUSY.reg  & (TCC_SYNCBUSY_CC0 << channel_index)) {
    16ac:	2280      	movs	r2, #128	; 0x80
    16ae:	0052      	lsls	r2, r2, #1
    16b0:	40ba      	lsls	r2, r7
    16b2:	68a3      	ldr	r3, [r4, #8]
    16b4:	421a      	tst	r2, r3
    16b6:	d1fc      	bne.n	16b2 <_tcc_set_compare_value+0x56>
		tcc_module->CC[channel_index].reg = compare;
    16b8:	3710      	adds	r7, #16
    16ba:	00bf      	lsls	r7, r7, #2
    16bc:	19e4      	adds	r4, r4, r7
    16be:	6065      	str	r5, [r4, #4]
	return STATUS_OK;
    16c0:	2300      	movs	r3, #0
    16c2:	e7d8      	b.n	1676 <_tcc_set_compare_value+0x1a>
    16c4:	00001629 	.word	0x00001629
    16c8:	000070a8 	.word	0x000070a8
    16cc:	000070b0 	.word	0x000070b0

000016d0 <tcc_get_config_defaults>:
{
    16d0:	b510      	push	{r4, lr}
    16d2:	0004      	movs	r4, r0
	uint8_t module_index = _tcc_get_inst_index(hw);
    16d4:	0008      	movs	r0, r1
    16d6:	4b4f      	ldr	r3, [pc, #316]	; (1814 <tcc_get_config_defaults+0x144>)
    16d8:	4798      	blx	r3
	config->counter.count                  = 0;
    16da:	2300      	movs	r3, #0
    16dc:	6023      	str	r3, [r4, #0]
	config->counter.period                 = _tcc_maxs[module_index];
    16de:	0080      	lsls	r0, r0, #2
    16e0:	4a4d      	ldr	r2, [pc, #308]	; (1818 <tcc_get_config_defaults+0x148>)
    16e2:	5882      	ldr	r2, [r0, r2]
    16e4:	6062      	str	r2, [r4, #4]
	config->counter.clock_source           = GCLK_GENERATOR_0;
    16e6:	72a3      	strb	r3, [r4, #10]
	config->counter.clock_prescaler        = TCC_CLOCK_PRESCALER_DIV1;
    16e8:	72e3      	strb	r3, [r4, #11]
	config->counter.reload_action          = TCC_RELOAD_ACTION_GCLK;
    16ea:	7323      	strb	r3, [r4, #12]
	config->counter.direction              = TCC_COUNT_DIRECTION_UP;
    16ec:	7263      	strb	r3, [r4, #9]
	config->counter.oneshot                = false;
    16ee:	7223      	strb	r3, [r4, #8]
	MREPEAT(TCC_NUM_CHANNELS,
    16f0:	61e3      	str	r3, [r4, #28]
    16f2:	6223      	str	r3, [r4, #32]
    16f4:	6263      	str	r3, [r4, #36]	; 0x24
    16f6:	62a3      	str	r3, [r4, #40]	; 0x28
	MREPEAT(TCC_NUM_CHANNELS,
    16f8:	7523      	strb	r3, [r4, #20]
    16fa:	7563      	strb	r3, [r4, #21]
    16fc:	75a3      	strb	r3, [r4, #22]
    16fe:	75e3      	strb	r3, [r4, #23]
	config->compare.wave_generation = TCC_WAVE_GENERATION_NORMAL_FREQ;
    1700:	7623      	strb	r3, [r4, #24]
	config->compare.wave_ramp       = TCC_RAMP_RAMP1;
    1702:	7663      	strb	r3, [r4, #25]
	MREPEAT(TCC_NUM_CHANNELS,
    1704:	7423      	strb	r3, [r4, #16]
    1706:	7463      	strb	r3, [r4, #17]
    1708:	74a3      	strb	r3, [r4, #18]
    170a:	74e3      	strb	r3, [r4, #19]
	MREPEAT(TCC_NUM_FAULTS, _TCC_FAULT_FUNCTION_INIT, 0)
    170c:	222c      	movs	r2, #44	; 0x2c
    170e:	54a3      	strb	r3, [r4, r2]
    1710:	3201      	adds	r2, #1
    1712:	54a3      	strb	r3, [r4, r2]
    1714:	3201      	adds	r2, #1
    1716:	54a3      	strb	r3, [r4, r2]
    1718:	3201      	adds	r2, #1
    171a:	54a3      	strb	r3, [r4, r2]
    171c:	3201      	adds	r2, #1
    171e:	54a3      	strb	r3, [r4, r2]
    1720:	3201      	adds	r2, #1
    1722:	54a3      	strb	r3, [r4, r2]
    1724:	3201      	adds	r2, #1
    1726:	54a3      	strb	r3, [r4, r2]
    1728:	3201      	adds	r2, #1
    172a:	54a3      	strb	r3, [r4, r2]
    172c:	3201      	adds	r2, #1
    172e:	54a3      	strb	r3, [r4, r2]
    1730:	3201      	adds	r2, #1
    1732:	54a3      	strb	r3, [r4, r2]
    1734:	3201      	adds	r2, #1
    1736:	54a3      	strb	r3, [r4, r2]
    1738:	3201      	adds	r2, #1
    173a:	54a3      	strb	r3, [r4, r2]
    173c:	3201      	adds	r2, #1
    173e:	54a3      	strb	r3, [r4, r2]
    1740:	3201      	adds	r2, #1
    1742:	54a3      	strb	r3, [r4, r2]
    1744:	3201      	adds	r2, #1
    1746:	54a3      	strb	r3, [r4, r2]
    1748:	3201      	adds	r2, #1
    174a:	54a3      	strb	r3, [r4, r2]
    174c:	3201      	adds	r2, #1
    174e:	54a3      	strb	r3, [r4, r2]
    1750:	3201      	adds	r2, #1
    1752:	54a3      	strb	r3, [r4, r2]
    1754:	3201      	adds	r2, #1
    1756:	54a3      	strb	r3, [r4, r2]
    1758:	3201      	adds	r2, #1
    175a:	54a3      	strb	r3, [r4, r2]
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_NRF_FUNCTION_INIT, 0)
    175c:	3201      	adds	r2, #1
    175e:	54a3      	strb	r3, [r4, r2]
    1760:	3201      	adds	r2, #1
    1762:	54a3      	strb	r3, [r4, r2]
    1764:	3201      	adds	r2, #1
    1766:	54a3      	strb	r3, [r4, r2]
    1768:	3201      	adds	r2, #1
    176a:	54a3      	strb	r3, [r4, r2]
    176c:	3201      	adds	r2, #1
    176e:	54a3      	strb	r3, [r4, r2]
    1770:	3201      	adds	r2, #1
    1772:	54a3      	strb	r3, [r4, r2]
    1774:	3201      	adds	r2, #1
    1776:	54a3      	strb	r3, [r4, r2]
    1778:	3201      	adds	r2, #1
    177a:	54a3      	strb	r3, [r4, r2]
    177c:	3201      	adds	r2, #1
    177e:	54a3      	strb	r3, [r4, r2]
    1780:	3201      	adds	r2, #1
    1782:	54a3      	strb	r3, [r4, r2]
    1784:	3201      	adds	r2, #1
    1786:	54a3      	strb	r3, [r4, r2]
    1788:	3201      	adds	r2, #1
    178a:	54a3      	strb	r3, [r4, r2]
    178c:	3201      	adds	r2, #1
    178e:	54a3      	strb	r3, [r4, r2]
    1790:	3201      	adds	r2, #1
    1792:	54a3      	strb	r3, [r4, r2]
    1794:	3201      	adds	r2, #1
    1796:	54a3      	strb	r3, [r4, r2]
    1798:	3201      	adds	r2, #1
    179a:	54a3      	strb	r3, [r4, r2]
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_OUT_INVERT_INIT, false)
    179c:	3201      	adds	r2, #1
    179e:	54a3      	strb	r3, [r4, r2]
    17a0:	3201      	adds	r2, #1
    17a2:	54a3      	strb	r3, [r4, r2]
    17a4:	3201      	adds	r2, #1
    17a6:	54a3      	strb	r3, [r4, r2]
    17a8:	3201      	adds	r2, #1
    17aa:	54a3      	strb	r3, [r4, r2]
    17ac:	3201      	adds	r2, #1
    17ae:	54a3      	strb	r3, [r4, r2]
    17b0:	3201      	adds	r2, #1
    17b2:	54a3      	strb	r3, [r4, r2]
    17b4:	3201      	adds	r2, #1
    17b6:	54a3      	strb	r3, [r4, r2]
    17b8:	3201      	adds	r2, #1
    17ba:	54a3      	strb	r3, [r4, r2]
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_CHANNEL_OUT_PIN_INIT, 0)
    17bc:	3241      	adds	r2, #65	; 0x41
    17be:	54a3      	strb	r3, [r4, r2]
    17c0:	65a3      	str	r3, [r4, #88]	; 0x58
    17c2:	67a3      	str	r3, [r4, #120]	; 0x78
    17c4:	3201      	adds	r2, #1
    17c6:	54a3      	strb	r3, [r4, r2]
    17c8:	65e3      	str	r3, [r4, #92]	; 0x5c
    17ca:	67e3      	str	r3, [r4, #124]	; 0x7c
    17cc:	3201      	adds	r2, #1
    17ce:	54a3      	strb	r3, [r4, r2]
    17d0:	6623      	str	r3, [r4, #96]	; 0x60
    17d2:	3a1a      	subs	r2, #26
    17d4:	50a3      	str	r3, [r4, r2]
    17d6:	321b      	adds	r2, #27
    17d8:	54a3      	strb	r3, [r4, r2]
    17da:	6663      	str	r3, [r4, #100]	; 0x64
    17dc:	3a17      	subs	r2, #23
    17de:	50a3      	str	r3, [r4, r2]
    17e0:	3218      	adds	r2, #24
    17e2:	54a3      	strb	r3, [r4, r2]
    17e4:	66a3      	str	r3, [r4, #104]	; 0x68
    17e6:	3a14      	subs	r2, #20
    17e8:	50a3      	str	r3, [r4, r2]
    17ea:	3215      	adds	r2, #21
    17ec:	54a3      	strb	r3, [r4, r2]
    17ee:	66e3      	str	r3, [r4, #108]	; 0x6c
    17f0:	3a11      	subs	r2, #17
    17f2:	50a3      	str	r3, [r4, r2]
    17f4:	3212      	adds	r2, #18
    17f6:	54a3      	strb	r3, [r4, r2]
    17f8:	6723      	str	r3, [r4, #112]	; 0x70
    17fa:	3a0e      	subs	r2, #14
    17fc:	50a3      	str	r3, [r4, r2]
    17fe:	320f      	adds	r2, #15
    1800:	54a3      	strb	r3, [r4, r2]
    1802:	6763      	str	r3, [r4, #116]	; 0x74
    1804:	3a0b      	subs	r2, #11
    1806:	50a3      	str	r3, [r4, r2]
	config->double_buffering_enabled  = true;
    1808:	2101      	movs	r1, #1
    180a:	320c      	adds	r2, #12
    180c:	54a1      	strb	r1, [r4, r2]
	config->run_in_standby            = false;
    180e:	3201      	adds	r2, #1
    1810:	54a3      	strb	r3, [r4, r2]
}
    1812:	bd10      	pop	{r4, pc}
    1814:	00001629 	.word	0x00001629
    1818:	000070b0 	.word	0x000070b0

0000181c <tcc_init>:
{
    181c:	b5f0      	push	{r4, r5, r6, r7, lr}
    181e:	46de      	mov	lr, fp
    1820:	4657      	mov	r7, sl
    1822:	464e      	mov	r6, r9
    1824:	4645      	mov	r5, r8
    1826:	b5e0      	push	{r5, r6, r7, lr}
    1828:	b091      	sub	sp, #68	; 0x44
    182a:	9001      	str	r0, [sp, #4]
    182c:	000c      	movs	r4, r1
    182e:	0015      	movs	r5, r2
	uint8_t module_index = _tcc_get_inst_index(hw);
    1830:	0008      	movs	r0, r1
    1832:	4bc3      	ldr	r3, [pc, #780]	; (1b40 <tcc_init+0x324>)
    1834:	4798      	blx	r3
    1836:	0003      	movs	r3, r0
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    1838:	0001      	movs	r1, r0
			PM->APBCMASK.reg |= mask;
    183a:	48c2      	ldr	r0, [pc, #776]	; (1b44 <tcc_init+0x328>)
    183c:	6a02      	ldr	r2, [r0, #32]
    183e:	009e      	lsls	r6, r3, #2
    1840:	4fc1      	ldr	r7, [pc, #772]	; (1b48 <tcc_init+0x32c>)
    1842:	59f7      	ldr	r7, [r6, r7]
    1844:	433a      	orrs	r2, r7
    1846:	6202      	str	r2, [r0, #32]
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
    1848:	6822      	ldr	r2, [r4, #0]
		return STATUS_ERR_DENIED;
    184a:	201c      	movs	r0, #28
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
    184c:	0792      	lsls	r2, r2, #30
    184e:	d506      	bpl.n	185e <tcc_init+0x42>
}
    1850:	b011      	add	sp, #68	; 0x44
    1852:	bc3c      	pop	{r2, r3, r4, r5}
    1854:	4690      	mov	r8, r2
    1856:	4699      	mov	r9, r3
    1858:	46a2      	mov	sl, r4
    185a:	46ab      	mov	fp, r5
    185c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hw->CTRLA.reg & TCC_CTRLA_SWRST) {
    185e:	6822      	ldr	r2, [r4, #0]
    1860:	2701      	movs	r7, #1
    1862:	4017      	ands	r7, r2
    1864:	d1f4      	bne.n	1850 <tcc_init+0x34>
	uint32_t count_max  = _tcc_maxs[module_index];
    1866:	48b9      	ldr	r0, [pc, #740]	; (1b4c <tcc_init+0x330>)
    1868:	5832      	ldr	r2, [r6, r0]
		return STATUS_ERR_INVALID_ARG;
    186a:	2017      	movs	r0, #23
	if ((config->counter.count > count_max)
    186c:	682e      	ldr	r6, [r5, #0]
    186e:	42b2      	cmp	r2, r6
    1870:	d3ee      	bcc.n	1850 <tcc_init+0x34>
		|| (config->counter.period > count_max)
    1872:	686e      	ldr	r6, [r5, #4]
    1874:	42b2      	cmp	r2, r6
    1876:	d3eb      	bcc.n	1850 <tcc_init+0x34>
		if ((config->compare.match[i] > count_max)
    1878:	69e8      	ldr	r0, [r5, #28]
    187a:	4282      	cmp	r2, r0
    187c:	d200      	bcs.n	1880 <tcc_init+0x64>
    187e:	e1b9      	b.n	1bf4 <tcc_init+0x3d8>
    1880:	6a28      	ldr	r0, [r5, #32]
    1882:	4282      	cmp	r2, r0
    1884:	d200      	bcs.n	1888 <tcc_init+0x6c>
    1886:	e1b7      	b.n	1bf8 <tcc_init+0x3dc>
    1888:	6a68      	ldr	r0, [r5, #36]	; 0x24
    188a:	4282      	cmp	r2, r0
    188c:	d200      	bcs.n	1890 <tcc_init+0x74>
    188e:	e1b5      	b.n	1bfc <tcc_init+0x3e0>
    1890:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    1892:	4282      	cmp	r2, r0
    1894:	d200      	bcs.n	1898 <tcc_init+0x7c>
    1896:	e1b3      	b.n	1c00 <tcc_init+0x3e4>
    1898:	2298      	movs	r2, #152	; 0x98
    189a:	4694      	mov	ip, r2
    189c:	44ac      	add	ip, r5
    189e:	4662      	mov	r2, ip
    18a0:	9208      	str	r2, [sp, #32]
    18a2:	2000      	movs	r0, #0
    18a4:	e003      	b.n	18ae <tcc_init+0x92>
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    18a6:	3001      	adds	r0, #1
    18a8:	3201      	adds	r2, #1
    18aa:	2808      	cmp	r0, #8
    18ac:	d008      	beq.n	18c0 <tcc_init+0xa4>
		if (!config->pins.enable_wave_out_pin[i]) {
    18ae:	7816      	ldrb	r6, [r2, #0]
    18b0:	2e00      	cmp	r6, #0
    18b2:	d0f8      	beq.n	18a6 <tcc_init+0x8a>
		if (i >= _tcc_ow_nums[module_index]) {
    18b4:	4ea6      	ldr	r6, [pc, #664]	; (1b50 <tcc_init+0x334>)
    18b6:	5c76      	ldrb	r6, [r6, r1]
    18b8:	4286      	cmp	r6, r0
    18ba:	dcf4      	bgt.n	18a6 <tcc_init+0x8a>
			return STATUS_ERR_INVALID_ARG;
    18bc:	2017      	movs	r0, #23
    18be:	e7c7      	b.n	1850 <tcc_init+0x34>
    18c0:	2200      	movs	r2, #0
    18c2:	9202      	str	r2, [sp, #8]
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
    18c4:	2080      	movs	r0, #128	; 0x80
    18c6:	0440      	lsls	r0, r0, #17
    18c8:	4684      	mov	ip, r0
    18ca:	e002      	b.n	18d2 <tcc_init+0xb6>
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
    18cc:	3201      	adds	r2, #1
    18ce:	2a04      	cmp	r2, #4
    18d0:	d00e      	beq.n	18f0 <tcc_init+0xd4>
		if (config->capture.channel_function[i] ==
    18d2:	18a8      	adds	r0, r5, r2
    18d4:	7c00      	ldrb	r0, [r0, #16]
    18d6:	2801      	cmp	r0, #1
    18d8:	d1f8      	bne.n	18cc <tcc_init+0xb0>
			if (i > _tcc_cc_nums[module_index]) {
    18da:	489e      	ldr	r0, [pc, #632]	; (1b54 <tcc_init+0x338>)
    18dc:	5c40      	ldrb	r0, [r0, r1]
    18de:	4290      	cmp	r0, r2
    18e0:	da00      	bge.n	18e4 <tcc_init+0xc8>
    18e2:	e18f      	b.n	1c04 <tcc_init+0x3e8>
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
    18e4:	4660      	mov	r0, ip
    18e6:	4090      	lsls	r0, r2
    18e8:	9e02      	ldr	r6, [sp, #8]
    18ea:	4306      	orrs	r6, r0
    18ec:	9602      	str	r6, [sp, #8]
    18ee:	e7ed      	b.n	18cc <tcc_init+0xb0>
	if (config->run_in_standby) {
    18f0:	329d      	adds	r2, #157	; 0x9d
    18f2:	5caa      	ldrb	r2, [r5, r2]
    18f4:	2a00      	cmp	r2, #0
    18f6:	d004      	beq.n	1902 <tcc_init+0xe6>
		ctrla |= TCC_CTRLA_RUNSTDBY;
    18f8:	2280      	movs	r2, #128	; 0x80
    18fa:	0112      	lsls	r2, r2, #4
    18fc:	9902      	ldr	r1, [sp, #8]
    18fe:	4311      	orrs	r1, r2
    1900:	9102      	str	r1, [sp, #8]
	if (config->counter.oneshot) {
    1902:	7a2a      	ldrb	r2, [r5, #8]
		ctrlb |= TCC_CTRLBSET_ONESHOT;
    1904:	1e51      	subs	r1, r2, #1
    1906:	418a      	sbcs	r2, r1
    1908:	0092      	lsls	r2, r2, #2
    190a:	9206      	str	r2, [sp, #24]
	if (config->counter.direction == TCC_COUNT_DIRECTION_DOWN) {
    190c:	7a6a      	ldrb	r2, [r5, #9]
    190e:	2a01      	cmp	r2, #1
    1910:	d022      	beq.n	1958 <tcc_init+0x13c>
	uint8_t cc_num = _tcc_cc_nums[module_index];
    1912:	4a90      	ldr	r2, [pc, #576]	; (1b54 <tcc_init+0x338>)
    1914:	5cd2      	ldrb	r2, [r2, r3]
    1916:	0011      	movs	r1, r2
    1918:	9205      	str	r2, [sp, #20]
		if (cfg->capture_channel >= cc_num) {
    191a:	2235      	movs	r2, #53	; 0x35
    191c:	5caa      	ldrb	r2, [r5, r2]
    191e:	428a      	cmp	r2, r1
    1920:	d300      	bcc.n	1924 <tcc_init+0x108>
    1922:	e179      	b.n	1c18 <tcc_init+0x3fc>
		if (cfg->filter_value > 0xF) {
    1924:	212c      	movs	r1, #44	; 0x2c
    1926:	5c69      	ldrb	r1, [r5, r1]
    1928:	290f      	cmp	r1, #15
    192a:	d900      	bls.n	192e <tcc_init+0x112>
    192c:	e174      	b.n	1c18 <tcc_init+0x3fc>
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
    192e:	7b28      	ldrb	r0, [r5, #12]
    1930:	900a      	str	r0, [sp, #40]	; 0x28
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
    1932:	7ae8      	ldrb	r0, [r5, #11]
    1934:	900b      	str	r0, [sp, #44]	; 0x2c
    1936:	202d      	movs	r0, #45	; 0x2d
    1938:	4682      	mov	sl, r0
    193a:	44aa      	add	sl, r5
    193c:	2000      	movs	r0, #0
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
    193e:	9704      	str	r7, [sp, #16]
		value_buffer[i] = fault;
    1940:	ae0e      	add	r6, sp, #56	; 0x38
    1942:	9607      	str	r6, [sp, #28]
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
    1944:	26c0      	movs	r6, #192	; 0xc0
    1946:	0136      	lsls	r6, r6, #4
    1948:	46b1      	mov	r9, r6
    194a:	4684      	mov	ip, r0
    194c:	46a0      	mov	r8, r4
    194e:	0028      	movs	r0, r5
    1950:	4655      	mov	r5, sl
    1952:	9309      	str	r3, [sp, #36]	; 0x24
    1954:	4682      	mov	sl, r0
    1956:	e035      	b.n	19c4 <tcc_init+0x1a8>
		ctrlb |= TCC_CTRLBSET_DIR;
    1958:	9906      	ldr	r1, [sp, #24]
    195a:	4311      	orrs	r1, r2
    195c:	9106      	str	r1, [sp, #24]
    195e:	e7d8      	b.n	1912 <tcc_init+0xf6>
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
    1960:	0292      	lsls	r2, r2, #10
    1962:	464f      	mov	r7, r9
    1964:	403a      	ands	r2, r7
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    1966:	430a      	orrs	r2, r1
				| TCC_FCTRLA_SRC(cfg->source)
    1968:	7919      	ldrb	r1, [r3, #4]
    196a:	468b      	mov	fp, r1
    196c:	2103      	movs	r1, #3
    196e:	465f      	mov	r7, fp
    1970:	4039      	ands	r1, r7
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    1972:	430a      	orrs	r2, r1
    1974:	4316      	orrs	r6, r2
				| TCC_FCTRLA_BLANK(cfg->blanking)
    1976:	795a      	ldrb	r2, [r3, #5]
    1978:	0152      	lsls	r2, r2, #5
    197a:	2160      	movs	r1, #96	; 0x60
    197c:	400a      	ands	r2, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    197e:	4332      	orrs	r2, r6
				| TCC_FCTRLA_HALT(cfg->halt_action)
    1980:	7999      	ldrb	r1, [r3, #6]
    1982:	0209      	lsls	r1, r1, #8
    1984:	26c0      	movs	r6, #192	; 0xc0
    1986:	00b6      	lsls	r6, r6, #2
    1988:	400e      	ands	r6, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    198a:	4316      	orrs	r6, r2
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
    198c:	79da      	ldrb	r2, [r3, #7]
    198e:	0312      	lsls	r2, r2, #12
    1990:	21e0      	movs	r1, #224	; 0xe0
    1992:	01c9      	lsls	r1, r1, #7
    1994:	400a      	ands	r2, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    1996:	4316      	orrs	r6, r2
    1998:	4334      	orrs	r4, r6
    199a:	9a03      	ldr	r2, [sp, #12]
    199c:	4314      	orrs	r4, r2
    199e:	4320      	orrs	r0, r4
		value_buffer[i] = fault;
    19a0:	4662      	mov	r2, ip
    19a2:	9907      	ldr	r1, [sp, #28]
    19a4:	5050      	str	r0, [r2, r1]
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
    19a6:	2a04      	cmp	r2, #4
    19a8:	d02a      	beq.n	1a00 <tcc_init+0x1e4>
		if (cfg->capture_channel >= cc_num) {
    19aa:	7c9a      	ldrb	r2, [r3, #18]
    19ac:	9905      	ldr	r1, [sp, #20]
    19ae:	4291      	cmp	r1, r2
    19b0:	d800      	bhi.n	19b4 <tcc_init+0x198>
    19b2:	e131      	b.n	1c18 <tcc_init+0x3fc>
		if (cfg->filter_value > 0xF) {
    19b4:	7a59      	ldrb	r1, [r3, #9]
    19b6:	350a      	adds	r5, #10
    19b8:	2304      	movs	r3, #4
    19ba:	469b      	mov	fp, r3
    19bc:	44dc      	add	ip, fp
    19be:	290f      	cmp	r1, #15
    19c0:	d900      	bls.n	19c4 <tcc_init+0x1a8>
    19c2:	e129      	b.n	1c18 <tcc_init+0x3fc>
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    19c4:	0609      	lsls	r1, r1, #24
    19c6:	23f0      	movs	r3, #240	; 0xf0
    19c8:	051b      	lsls	r3, r3, #20
    19ca:	4019      	ands	r1, r3
    19cc:	002b      	movs	r3, r5
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
    19ce:	782e      	ldrb	r6, [r5, #0]
    19d0:	0436      	lsls	r6, r6, #16
    19d2:	20ff      	movs	r0, #255	; 0xff
    19d4:	0400      	lsls	r0, r0, #16
    19d6:	4006      	ands	r6, r0
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
    19d8:	7868      	ldrb	r0, [r5, #1]
    19da:	2480      	movs	r4, #128	; 0x80
    19dc:	2800      	cmp	r0, #0
    19de:	d100      	bne.n	19e2 <tcc_init+0x1c6>
    19e0:	9c04      	ldr	r4, [sp, #16]
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
    19e2:	7898      	ldrb	r0, [r3, #2]
    19e4:	2708      	movs	r7, #8
    19e6:	9703      	str	r7, [sp, #12]
    19e8:	2800      	cmp	r0, #0
    19ea:	d101      	bne.n	19f0 <tcc_init+0x1d4>
    19ec:	9804      	ldr	r0, [sp, #16]
    19ee:	9003      	str	r0, [sp, #12]
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
    19f0:	78d8      	ldrb	r0, [r3, #3]
    19f2:	4683      	mov	fp, r0
    19f4:	2010      	movs	r0, #16
    19f6:	465f      	mov	r7, fp
    19f8:	2f00      	cmp	r7, #0
    19fa:	d1b1      	bne.n	1960 <tcc_init+0x144>
    19fc:	9804      	ldr	r0, [sp, #16]
    19fe:	e7af      	b.n	1960 <tcc_init+0x144>
    1a00:	4644      	mov	r4, r8
    1a02:	4655      	mov	r5, sl
    1a04:	9b09      	ldr	r3, [sp, #36]	; 0x24
	uint8_t ow_num = _tcc_ow_nums[module_index];
    1a06:	4a52      	ldr	r2, [pc, #328]	; (1b50 <tcc_init+0x334>)
    1a08:	5cd2      	ldrb	r2, [r2, r3]
    1a0a:	4691      	mov	r9, r2
    1a0c:	4651      	mov	r1, sl
    1a0e:	3150      	adds	r1, #80	; 0x50
    1a10:	4650      	mov	r0, sl
    1a12:	3041      	adds	r0, #65	; 0x41
	drvctrl = 0;
    1a14:	2700      	movs	r7, #0
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    1a16:	2200      	movs	r2, #0
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
    1a18:	2601      	movs	r6, #1
    1a1a:	46b2      	mov	sl, r6
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
    1a1c:	2602      	movs	r6, #2
    1a1e:	36ff      	adds	r6, #255	; 0xff
    1a20:	46b3      	mov	fp, r6
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
    1a22:	2680      	movs	r6, #128	; 0x80
    1a24:	0276      	lsls	r6, r6, #9
    1a26:	46b0      	mov	r8, r6
    1a28:	46a4      	mov	ip, r4
    1a2a:	001c      	movs	r4, r3
    1a2c:	464b      	mov	r3, r9
    1a2e:	e00f      	b.n	1a50 <tcc_init+0x234>
		if (config->wave_ext.non_recoverable_fault[i].output !=
    1a30:	7806      	ldrb	r6, [r0, #0]
    1a32:	2e00      	cmp	r6, #0
    1a34:	d007      	beq.n	1a46 <tcc_init+0x22a>
			if (i >= ow_num) {
    1a36:	4293      	cmp	r3, r2
    1a38:	d800      	bhi.n	1a3c <tcc_init+0x220>
    1a3a:	e0e7      	b.n	1c0c <tcc_init+0x3f0>
			if (config->wave_ext.non_recoverable_fault[i].output ==
    1a3c:	2e02      	cmp	r6, #2
    1a3e:	d014      	beq.n	1a6a <tcc_init+0x24e>
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
    1a40:	4656      	mov	r6, sl
    1a42:	4096      	lsls	r6, r2
    1a44:	4337      	orrs	r7, r6
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    1a46:	3201      	adds	r2, #1
    1a48:	3101      	adds	r1, #1
    1a4a:	3002      	adds	r0, #2
    1a4c:	2a08      	cmp	r2, #8
    1a4e:	d010      	beq.n	1a72 <tcc_init+0x256>
		if (config->wave_ext.invert[i]) {
    1a50:	780e      	ldrb	r6, [r1, #0]
    1a52:	2e00      	cmp	r6, #0
    1a54:	d0ec      	beq.n	1a30 <tcc_init+0x214>
			if (i >= ow_num) {
    1a56:	4293      	cmp	r3, r2
    1a58:	d800      	bhi.n	1a5c <tcc_init+0x240>
    1a5a:	e0d5      	b.n	1c08 <tcc_init+0x3ec>
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
    1a5c:	4646      	mov	r6, r8
    1a5e:	4096      	lsls	r6, r2
    1a60:	4337      	orrs	r7, r6
		if (config->wave_ext.non_recoverable_fault[i].output !=
    1a62:	7806      	ldrb	r6, [r0, #0]
    1a64:	2e00      	cmp	r6, #0
    1a66:	d1e9      	bne.n	1a3c <tcc_init+0x220>
    1a68:	e7ed      	b.n	1a46 <tcc_init+0x22a>
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
    1a6a:	465e      	mov	r6, fp
    1a6c:	4096      	lsls	r6, r2
    1a6e:	4337      	orrs	r7, r6
    1a70:	e7e9      	b.n	1a46 <tcc_init+0x22a>
    1a72:	4699      	mov	r9, r3
    1a74:	0023      	movs	r3, r4
    1a76:	4664      	mov	r4, ip
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
    1a78:	7e6a      	ldrb	r2, [r5, #25]
    1a7a:	0112      	lsls	r2, r2, #4
    1a7c:	2130      	movs	r1, #48	; 0x30
    1a7e:	4011      	ands	r1, r2
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);
    1a80:	7e28      	ldrb	r0, [r5, #24]
    1a82:	2207      	movs	r2, #7
    1a84:	4002      	ands	r2, r0
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
    1a86:	4311      	orrs	r1, r2
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
    1a88:	2200      	movs	r2, #0
			wave |= (TCC_WAVE_POL0 << n);
    1a8a:	2080      	movs	r0, #128	; 0x80
    1a8c:	0240      	lsls	r0, r0, #9
    1a8e:	000e      	movs	r6, r1
    1a90:	e002      	b.n	1a98 <tcc_init+0x27c>
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
    1a92:	3201      	adds	r2, #1
    1a94:	2a04      	cmp	r2, #4
    1a96:	d00b      	beq.n	1ab0 <tcc_init+0x294>
		if (wav_cfg->wave_polarity[n]) {
    1a98:	18a9      	adds	r1, r5, r2
    1a9a:	7d09      	ldrb	r1, [r1, #20]
    1a9c:	2900      	cmp	r1, #0
    1a9e:	d0f8      	beq.n	1a92 <tcc_init+0x276>
			if (n >= cc_num) {
    1aa0:	9905      	ldr	r1, [sp, #20]
    1aa2:	4291      	cmp	r1, r2
    1aa4:	dc00      	bgt.n	1aa8 <tcc_init+0x28c>
    1aa6:	e0b3      	b.n	1c10 <tcc_init+0x3f4>
			wave |= (TCC_WAVE_POL0 << n);
    1aa8:	0001      	movs	r1, r0
    1aaa:	4091      	lsls	r1, r2
    1aac:	430e      	orrs	r6, r1
    1aae:	e7f0      	b.n	1a92 <tcc_init+0x276>
    1ab0:	46b2      	mov	sl, r6
    1ab2:	9801      	ldr	r0, [sp, #4]
    1ab4:	0002      	movs	r2, r0
    1ab6:	3204      	adds	r2, #4
    1ab8:	3034      	adds	r0, #52	; 0x34
		module_inst->callback[i] = NULL;
    1aba:	2100      	movs	r1, #0
    1abc:	c202      	stmia	r2!, {r1}
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    1abe:	4282      	cmp	r2, r0
    1ac0:	d1fc      	bne.n	1abc <tcc_init+0x2a0>
	module_inst->register_callback_mask = 0;
    1ac2:	2200      	movs	r2, #0
    1ac4:	9801      	ldr	r0, [sp, #4]
    1ac6:	6342      	str	r2, [r0, #52]	; 0x34
	module_inst->enable_callback_mask = 0;
    1ac8:	6382      	str	r2, [r0, #56]	; 0x38
	_tcc_instances[module_index] = module_inst;
    1aca:	0099      	lsls	r1, r3, #2
    1acc:	4a22      	ldr	r2, [pc, #136]	; (1b58 <tcc_init+0x33c>)
    1ace:	5088      	str	r0, [r1, r2]
	module_inst->hw = hw;
    1ad0:	6004      	str	r4, [r0, #0]
	module_inst->double_buffering_enabled = config->double_buffering_enabled;
    1ad2:	22a0      	movs	r2, #160	; 0xa0
    1ad4:	5ca9      	ldrb	r1, [r5, r2]
    1ad6:	3a64      	subs	r2, #100	; 0x64
    1ad8:	5481      	strb	r1, [r0, r2]
	gclk_chan_config.source_generator = config->counter.clock_source;
    1ada:	a90d      	add	r1, sp, #52	; 0x34
    1adc:	7aaa      	ldrb	r2, [r5, #10]
    1ade:	700a      	strb	r2, [r1, #0]
	system_gclk_chan_set_config(_tcc_gclk_ids[module_index], &gclk_chan_config);
    1ae0:	4a1e      	ldr	r2, [pc, #120]	; (1b5c <tcc_init+0x340>)
    1ae2:	5cd6      	ldrb	r6, [r2, r3]
    1ae4:	0030      	movs	r0, r6
    1ae6:	4b1e      	ldr	r3, [pc, #120]	; (1b60 <tcc_init+0x344>)
    1ae8:	4798      	blx	r3
	system_gclk_chan_enable(_tcc_gclk_ids[module_index]);
    1aea:	0030      	movs	r0, r6
    1aec:	4b1d      	ldr	r3, [pc, #116]	; (1b64 <tcc_init+0x348>)
    1aee:	4798      	blx	r3
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
    1af0:	464b      	mov	r3, r9
    1af2:	2b00      	cmp	r3, #0
    1af4:	dd3c      	ble.n	1b70 <tcc_init+0x354>
    1af6:	002e      	movs	r6, r5
    1af8:	3658      	adds	r6, #88	; 0x58
    1afa:	3398      	adds	r3, #152	; 0x98
    1afc:	4698      	mov	r8, r3
    1afe:	44a8      	add	r8, r5
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    1b00:	2301      	movs	r3, #1
    1b02:	4699      	mov	r9, r3
		system_pinmux_pin_set_config(
    1b04:	46ab      	mov	fp, r5
    1b06:	4645      	mov	r5, r8
    1b08:	46a0      	mov	r8, r4
    1b0a:	9c08      	ldr	r4, [sp, #32]
    1b0c:	e003      	b.n	1b16 <tcc_init+0x2fa>
    1b0e:	3401      	adds	r4, #1
    1b10:	3604      	adds	r6, #4
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
    1b12:	42ac      	cmp	r4, r5
    1b14:	d02a      	beq.n	1b6c <tcc_init+0x350>
		if (!config->pins.enable_wave_out_pin[i]) {
    1b16:	7823      	ldrb	r3, [r4, #0]
    1b18:	2b00      	cmp	r3, #0
    1b1a:	d0f8      	beq.n	1b0e <tcc_init+0x2f2>
    1b1c:	ab0c      	add	r3, sp, #48	; 0x30
    1b1e:	464a      	mov	r2, r9
    1b20:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    1b22:	2300      	movs	r3, #0
    1b24:	aa0c      	add	r2, sp, #48	; 0x30
    1b26:	70d3      	strb	r3, [r2, #3]
		pin_config.mux_position = config->pins.wave_out_pin_mux[i];
    1b28:	0013      	movs	r3, r2
    1b2a:	2220      	movs	r2, #32
    1b2c:	18b2      	adds	r2, r6, r2
    1b2e:	7812      	ldrb	r2, [r2, #0]
    1b30:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    1b32:	464a      	mov	r2, r9
    1b34:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
    1b36:	7830      	ldrb	r0, [r6, #0]
    1b38:	0019      	movs	r1, r3
    1b3a:	4b0b      	ldr	r3, [pc, #44]	; (1b68 <tcc_init+0x34c>)
    1b3c:	4798      	blx	r3
    1b3e:	e7e6      	b.n	1b0e <tcc_init+0x2f2>
    1b40:	00001629 	.word	0x00001629
    1b44:	40000400 	.word	0x40000400
    1b48:	0000709c 	.word	0x0000709c
    1b4c:	000070b0 	.word	0x000070b0
    1b50:	000070bc 	.word	0x000070bc
    1b54:	000070a8 	.word	0x000070a8
    1b58:	20000120 	.word	0x20000120
    1b5c:	000070ac 	.word	0x000070ac
    1b60:	000014d1 	.word	0x000014d1
    1b64:	00001445 	.word	0x00001445
    1b68:	000015c9 	.word	0x000015c9
    1b6c:	4644      	mov	r4, r8
    1b6e:	465d      	mov	r5, fp
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
    1b70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1b72:	031b      	lsls	r3, r3, #12
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
    1b74:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    1b76:	0212      	lsls	r2, r2, #8
    1b78:	4313      	orrs	r3, r2
    1b7a:	9a02      	ldr	r2, [sp, #8]
    1b7c:	4313      	orrs	r3, r2
	hw->CTRLA.reg = ctrla;
    1b7e:	6023      	str	r3, [r4, #0]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
    1b80:	2204      	movs	r2, #4
    1b82:	68a3      	ldr	r3, [r4, #8]
    1b84:	421a      	tst	r2, r3
    1b86:	d1fc      	bne.n	1b82 <tcc_init+0x366>
	hw->CTRLBCLR.reg = 0xFF;
    1b88:	23ff      	movs	r3, #255	; 0xff
    1b8a:	7123      	strb	r3, [r4, #4]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
    1b8c:	2204      	movs	r2, #4
    1b8e:	68a3      	ldr	r3, [r4, #8]
    1b90:	421a      	tst	r2, r3
    1b92:	d1fc      	bne.n	1b8e <tcc_init+0x372>
	hw->CTRLBSET.reg = ctrlb;
    1b94:	466b      	mov	r3, sp
    1b96:	7e1b      	ldrb	r3, [r3, #24]
    1b98:	7163      	strb	r3, [r4, #5]
	hw->FCTRLA.reg = faults[0];
    1b9a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    1b9c:	60e3      	str	r3, [r4, #12]
	hw->FCTRLB.reg = faults[1];
    1b9e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    1ba0:	6123      	str	r3, [r4, #16]
	hw->DRVCTRL.reg = drvctrl;
    1ba2:	61a7      	str	r7, [r4, #24]
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_WAVE | TCC_SYNCBUSY_WAVEB)) {
    1ba4:	4a1d      	ldr	r2, [pc, #116]	; (1c1c <tcc_init+0x400>)
    1ba6:	68a3      	ldr	r3, [r4, #8]
    1ba8:	4213      	tst	r3, r2
    1baa:	d1fc      	bne.n	1ba6 <tcc_init+0x38a>
	hw->WAVE.reg = waves[0];
    1bac:	4653      	mov	r3, sl
    1bae:	63e3      	str	r3, [r4, #60]	; 0x3c
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_COUNT) {
    1bb0:	2210      	movs	r2, #16
    1bb2:	68a3      	ldr	r3, [r4, #8]
    1bb4:	421a      	tst	r2, r3
    1bb6:	d1fc      	bne.n	1bb2 <tcc_init+0x396>
	hw->COUNT.reg = config->counter.count;
    1bb8:	682b      	ldr	r3, [r5, #0]
    1bba:	6363      	str	r3, [r4, #52]	; 0x34
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_PER | TCC_SYNCBUSY_PERB)) {
    1bbc:	4a18      	ldr	r2, [pc, #96]	; (1c20 <tcc_init+0x404>)
    1bbe:	68a3      	ldr	r3, [r4, #8]
    1bc0:	4213      	tst	r3, r2
    1bc2:	d1fc      	bne.n	1bbe <tcc_init+0x3a2>
	hw->PER.reg = (config->counter.period);
    1bc4:	686b      	ldr	r3, [r5, #4]
    1bc6:	6423      	str	r3, [r4, #64]	; 0x40
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
    1bc8:	9805      	ldr	r0, [sp, #20]
    1bca:	2800      	cmp	r0, #0
    1bcc:	dd22      	ble.n	1c14 <tcc_init+0x3f8>
    1bce:	351c      	adds	r5, #28
    1bd0:	2100      	movs	r1, #0
			(TCC_SYNCBUSY_CC0 | TCC_SYNCBUSY_CCB0) << i)) {
    1bd2:	4e14      	ldr	r6, [pc, #80]	; (1c24 <tcc_init+0x408>)
    1bd4:	0032      	movs	r2, r6
    1bd6:	408a      	lsls	r2, r1
		while (hw->SYNCBUSY.reg & (
    1bd8:	68a3      	ldr	r3, [r4, #8]
    1bda:	421a      	tst	r2, r3
    1bdc:	d1fc      	bne.n	1bd8 <tcc_init+0x3bc>
		hw->CC[i].reg = (config->compare.match[i]);
    1bde:	cd04      	ldmia	r5!, {r2}
    1be0:	000b      	movs	r3, r1
    1be2:	3310      	adds	r3, #16
    1be4:	009b      	lsls	r3, r3, #2
    1be6:	18e3      	adds	r3, r4, r3
    1be8:	605a      	str	r2, [r3, #4]
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
    1bea:	3101      	adds	r1, #1
    1bec:	4288      	cmp	r0, r1
    1bee:	dcf1      	bgt.n	1bd4 <tcc_init+0x3b8>
	return STATUS_OK;
    1bf0:	2000      	movs	r0, #0
    1bf2:	e62d      	b.n	1850 <tcc_init+0x34>
			return STATUS_ERR_INVALID_ARG;
    1bf4:	2017      	movs	r0, #23
    1bf6:	e62b      	b.n	1850 <tcc_init+0x34>
    1bf8:	2017      	movs	r0, #23
    1bfa:	e629      	b.n	1850 <tcc_init+0x34>
    1bfc:	2017      	movs	r0, #23
    1bfe:	e627      	b.n	1850 <tcc_init+0x34>
    1c00:	2017      	movs	r0, #23
    1c02:	e625      	b.n	1850 <tcc_init+0x34>
				return STATUS_ERR_INVALID_ARG;
    1c04:	2017      	movs	r0, #23
    1c06:	e623      	b.n	1850 <tcc_init+0x34>
			if (i >= ow_num) {
    1c08:	2017      	movs	r0, #23
    1c0a:	e621      	b.n	1850 <tcc_init+0x34>
			if (i >= ow_num) {
    1c0c:	2017      	movs	r0, #23
    1c0e:	e61f      	b.n	1850 <tcc_init+0x34>
				return STATUS_ERR_INVALID_ARG;
    1c10:	2017      	movs	r0, #23
    1c12:	e61d      	b.n	1850 <tcc_init+0x34>
	return STATUS_OK;
    1c14:	2000      	movs	r0, #0
    1c16:	e61b      	b.n	1850 <tcc_init+0x34>
				return STATUS_ERR_INVALID_ARG;
    1c18:	2017      	movs	r0, #23
    1c1a:	e619      	b.n	1850 <tcc_init+0x34>
    1c1c:	00020040 	.word	0x00020040
    1c20:	00040080 	.word	0x00040080
    1c24:	00080100 	.word	0x00080100

00001c28 <tcc_set_compare_value>:
 */
enum status_code tcc_set_compare_value(
		const struct tcc_module *const module_inst,
		const enum tcc_match_capture_channel channel_index,
		const uint32_t compare)
{
    1c28:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module_inst);

	return _tcc_set_compare_value(module_inst, channel_index, compare,
    1c2a:	233c      	movs	r3, #60	; 0x3c
    1c2c:	5cc3      	ldrb	r3, [r0, r3]
    1c2e:	4c01      	ldr	r4, [pc, #4]	; (1c34 <tcc_set_compare_value+0xc>)
    1c30:	47a0      	blx	r4
			module_inst->double_buffering_enabled);
}
    1c32:	bd10      	pop	{r4, pc}
    1c34:	0000165d 	.word	0x0000165d

00001c38 <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
    1c38:	b5f0      	push	{r4, r5, r6, r7, lr}
    1c3a:	46c6      	mov	lr, r8
    1c3c:	b500      	push	{lr}
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
    1c3e:	0080      	lsls	r0, r0, #2
    1c40:	4b0e      	ldr	r3, [pc, #56]	; (1c7c <_tcc_interrupt_handler+0x44>)
    1c42:	58c7      	ldr	r7, [r0, r3]
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    1c44:	683b      	ldr	r3, [r7, #0]
    1c46:	6ade      	ldr	r6, [r3, #44]	; 0x2c
    1c48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1c4a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    1c4c:	4013      	ands	r3, r2
    1c4e:	401e      	ands	r6, r3
    1c50:	2400      	movs	r4, #0
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
    1c52:	4b0b      	ldr	r3, [pc, #44]	; (1c80 <_tcc_interrupt_handler+0x48>)
    1c54:	4698      	mov	r8, r3
    1c56:	e002      	b.n	1c5e <_tcc_interrupt_handler+0x26>
    1c58:	3404      	adds	r4, #4
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    1c5a:	2c30      	cmp	r4, #48	; 0x30
    1c5c:	d00a      	beq.n	1c74 <_tcc_interrupt_handler+0x3c>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
    1c5e:	4643      	mov	r3, r8
    1c60:	58e5      	ldr	r5, [r4, r3]
    1c62:	4235      	tst	r5, r6
    1c64:	d0f8      	beq.n	1c58 <_tcc_interrupt_handler+0x20>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
    1c66:	193b      	adds	r3, r7, r4
    1c68:	685b      	ldr	r3, [r3, #4]
    1c6a:	0038      	movs	r0, r7
    1c6c:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
    1c6e:	683b      	ldr	r3, [r7, #0]
    1c70:	62dd      	str	r5, [r3, #44]	; 0x2c
    1c72:	e7f1      	b.n	1c58 <_tcc_interrupt_handler+0x20>
		}
	}
}
    1c74:	bc04      	pop	{r2}
    1c76:	4690      	mov	r8, r2
    1c78:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1c7a:	46c0      	nop			; (mov r8, r8)
    1c7c:	20000120 	.word	0x20000120
    1c80:	000070c0 	.word	0x000070c0

00001c84 <TCC0_Handler>:
MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
    1c84:	b510      	push	{r4, lr}
    1c86:	2000      	movs	r0, #0
    1c88:	4b01      	ldr	r3, [pc, #4]	; (1c90 <TCC0_Handler+0xc>)
    1c8a:	4798      	blx	r3
    1c8c:	bd10      	pop	{r4, pc}
    1c8e:	46c0      	nop			; (mov r8, r8)
    1c90:	00001c39 	.word	0x00001c39

00001c94 <TCC1_Handler>:
    1c94:	b510      	push	{r4, lr}
    1c96:	2001      	movs	r0, #1
    1c98:	4b01      	ldr	r3, [pc, #4]	; (1ca0 <TCC1_Handler+0xc>)
    1c9a:	4798      	blx	r3
    1c9c:	bd10      	pop	{r4, pc}
    1c9e:	46c0      	nop			; (mov r8, r8)
    1ca0:	00001c39 	.word	0x00001c39

00001ca4 <TCC2_Handler>:
    1ca4:	b510      	push	{r4, lr}
    1ca6:	2002      	movs	r0, #2
    1ca8:	4b01      	ldr	r3, [pc, #4]	; (1cb0 <TCC2_Handler+0xc>)
    1caa:	4798      	blx	r3
    1cac:	bd10      	pop	{r4, pc}
    1cae:	46c0      	nop			; (mov r8, r8)
    1cb0:	00001c39 	.word	0x00001c39

00001cb4 <tc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    1cb4:	1c93      	adds	r3, r2, #2
    1cb6:	009b      	lsls	r3, r3, #2
    1cb8:	5019      	str	r1, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
    1cba:	2a02      	cmp	r2, #2
    1cbc:	d009      	beq.n	1cd2 <tc_register_callback+0x1e>
		module->register_callback_mask |= TC_INTFLAG_MC(1);
	}
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
    1cbe:	2a03      	cmp	r2, #3
    1cc0:	d00c      	beq.n	1cdc <tc_register_callback+0x28>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
	}
	else {
		module->register_callback_mask |= (1 << callback_type);
    1cc2:	2301      	movs	r3, #1
    1cc4:	4093      	lsls	r3, r2
    1cc6:	001a      	movs	r2, r3
    1cc8:	7e03      	ldrb	r3, [r0, #24]
    1cca:	4313      	orrs	r3, r2
    1ccc:	7603      	strb	r3, [r0, #24]
	}
	return STATUS_OK;
}
    1cce:	2000      	movs	r0, #0
    1cd0:	4770      	bx	lr
		module->register_callback_mask |= TC_INTFLAG_MC(1);
    1cd2:	7e03      	ldrb	r3, [r0, #24]
    1cd4:	2210      	movs	r2, #16
    1cd6:	4313      	orrs	r3, r2
    1cd8:	7603      	strb	r3, [r0, #24]
    1cda:	e7f8      	b.n	1cce <tc_register_callback+0x1a>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
    1cdc:	7e03      	ldrb	r3, [r0, #24]
    1cde:	2220      	movs	r2, #32
    1ce0:	4313      	orrs	r3, r2
    1ce2:	7603      	strb	r3, [r0, #24]
    1ce4:	e7f3      	b.n	1cce <tc_register_callback+0x1a>
	...

00001ce8 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
    1ce8:	b570      	push	{r4, r5, r6, lr}
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
    1cea:	0080      	lsls	r0, r0, #2
    1cec:	4b16      	ldr	r3, [pc, #88]	; (1d48 <_tc_interrupt_handler+0x60>)
    1cee:	58c4      	ldr	r4, [r0, r3]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    1cf0:	6823      	ldr	r3, [r4, #0]
    1cf2:	7b9d      	ldrb	r5, [r3, #14]
    1cf4:	7e22      	ldrb	r2, [r4, #24]
    1cf6:	7e63      	ldrb	r3, [r4, #25]
    1cf8:	4013      	ands	r3, r2
    1cfa:	401d      	ands	r5, r3
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    1cfc:	07eb      	lsls	r3, r5, #31
    1cfe:	d406      	bmi.n	1d0e <_tc_interrupt_handler+0x26>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    1d00:	07ab      	lsls	r3, r5, #30
    1d02:	d40b      	bmi.n	1d1c <_tc_interrupt_handler+0x34>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    1d04:	06eb      	lsls	r3, r5, #27
    1d06:	d410      	bmi.n	1d2a <_tc_interrupt_handler+0x42>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    1d08:	06ab      	lsls	r3, r5, #26
    1d0a:	d415      	bmi.n	1d38 <_tc_interrupt_handler+0x50>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
	}
}
    1d0c:	bd70      	pop	{r4, r5, r6, pc}
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    1d0e:	0020      	movs	r0, r4
    1d10:	68a3      	ldr	r3, [r4, #8]
    1d12:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    1d14:	2301      	movs	r3, #1
    1d16:	6822      	ldr	r2, [r4, #0]
    1d18:	7393      	strb	r3, [r2, #14]
    1d1a:	e7f1      	b.n	1d00 <_tc_interrupt_handler+0x18>
		(module->callback[TC_CALLBACK_ERROR])(module);
    1d1c:	0020      	movs	r0, r4
    1d1e:	68e3      	ldr	r3, [r4, #12]
    1d20:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    1d22:	2302      	movs	r3, #2
    1d24:	6822      	ldr	r2, [r4, #0]
    1d26:	7393      	strb	r3, [r2, #14]
    1d28:	e7ec      	b.n	1d04 <_tc_interrupt_handler+0x1c>
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    1d2a:	0020      	movs	r0, r4
    1d2c:	6923      	ldr	r3, [r4, #16]
    1d2e:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    1d30:	2310      	movs	r3, #16
    1d32:	6822      	ldr	r2, [r4, #0]
    1d34:	7393      	strb	r3, [r2, #14]
    1d36:	e7e7      	b.n	1d08 <_tc_interrupt_handler+0x20>
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    1d38:	0020      	movs	r0, r4
    1d3a:	6963      	ldr	r3, [r4, #20]
    1d3c:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    1d3e:	6823      	ldr	r3, [r4, #0]
    1d40:	2220      	movs	r2, #32
    1d42:	739a      	strb	r2, [r3, #14]
}
    1d44:	e7e2      	b.n	1d0c <_tc_interrupt_handler+0x24>
    1d46:	46c0      	nop			; (mov r8, r8)
    1d48:	2000012c 	.word	0x2000012c

00001d4c <TC3_Handler>:
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
    1d4c:	b510      	push	{r4, lr}
    1d4e:	2000      	movs	r0, #0
    1d50:	4b01      	ldr	r3, [pc, #4]	; (1d58 <TC3_Handler+0xc>)
    1d52:	4798      	blx	r3
    1d54:	bd10      	pop	{r4, pc}
    1d56:	46c0      	nop			; (mov r8, r8)
    1d58:	00001ce9 	.word	0x00001ce9

00001d5c <TC4_Handler>:
    1d5c:	b510      	push	{r4, lr}
    1d5e:	2001      	movs	r0, #1
    1d60:	4b01      	ldr	r3, [pc, #4]	; (1d68 <TC4_Handler+0xc>)
    1d62:	4798      	blx	r3
    1d64:	bd10      	pop	{r4, pc}
    1d66:	46c0      	nop			; (mov r8, r8)
    1d68:	00001ce9 	.word	0x00001ce9

00001d6c <TC5_Handler>:
    1d6c:	b510      	push	{r4, lr}
    1d6e:	2002      	movs	r0, #2
    1d70:	4b01      	ldr	r3, [pc, #4]	; (1d78 <TC5_Handler+0xc>)
    1d72:	4798      	blx	r3
    1d74:	bd10      	pop	{r4, pc}
    1d76:	46c0      	nop			; (mov r8, r8)
    1d78:	00001ce9 	.word	0x00001ce9

00001d7c <_tc_get_inst_index>:
 *
 * \return Index of the given TC module instance.
 */
uint8_t _tc_get_inst_index(
		Tc *const hw)
{
    1d7c:	b530      	push	{r4, r5, lr}
    1d7e:	b085      	sub	sp, #20
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    1d80:	aa01      	add	r2, sp, #4
    1d82:	4b0b      	ldr	r3, [pc, #44]	; (1db0 <_tc_get_inst_index+0x34>)
    1d84:	cb32      	ldmia	r3!, {r1, r4, r5}
    1d86:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if (hw == tc_modules[i]) {
    1d88:	9b01      	ldr	r3, [sp, #4]
    1d8a:	4298      	cmp	r0, r3
    1d8c:	d00d      	beq.n	1daa <_tc_get_inst_index+0x2e>
    1d8e:	9b02      	ldr	r3, [sp, #8]
    1d90:	4298      	cmp	r0, r3
    1d92:	d008      	beq.n	1da6 <_tc_get_inst_index+0x2a>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    1d94:	2300      	movs	r3, #0
		if (hw == tc_modules[i]) {
    1d96:	9a03      	ldr	r2, [sp, #12]
    1d98:	4282      	cmp	r2, r0
    1d9a:	d002      	beq.n	1da2 <_tc_get_inst_index+0x26>
}
    1d9c:	0018      	movs	r0, r3
    1d9e:	b005      	add	sp, #20
    1da0:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    1da2:	3302      	adds	r3, #2
    1da4:	e002      	b.n	1dac <_tc_get_inst_index+0x30>
    1da6:	2301      	movs	r3, #1
    1da8:	e000      	b.n	1dac <_tc_get_inst_index+0x30>
    1daa:	2300      	movs	r3, #0
			return i;
    1dac:	b2db      	uxtb	r3, r3
    1dae:	e7f5      	b.n	1d9c <_tc_get_inst_index+0x20>
    1db0:	000070f0 	.word	0x000070f0

00001db4 <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
    1db4:	b5f0      	push	{r4, r5, r6, r7, lr}
    1db6:	b087      	sub	sp, #28
    1db8:	0004      	movs	r4, r0
    1dba:	000d      	movs	r5, r1
    1dbc:	0016      	movs	r6, r2
	uint8_t ctrlbset_tmp = 0;
	/* Temporary variable to hold all updates to the CTRLC
	 * register before they are written to it */
	uint8_t ctrlc_tmp = 0;
	/* Temporary variable to hold TC instance number */
	uint8_t instance = _tc_get_inst_index(hw);
    1dbe:	0008      	movs	r0, r1
    1dc0:	4b85      	ldr	r3, [pc, #532]	; (1fd8 <tc_init+0x224>)
    1dc2:	4798      	blx	r3
    1dc4:	0007      	movs	r7, r0

	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = TC_INST_GCLK_ID;
    1dc6:	ab05      	add	r3, sp, #20
    1dc8:	221b      	movs	r2, #27
    1dca:	701a      	strb	r2, [r3, #0]
    1dcc:	3201      	adds	r2, #1
    1dce:	705a      	strb	r2, [r3, #1]
    1dd0:	709a      	strb	r2, [r3, #2]
	/* Array of PM APBC mask bit position for different TC instances */
	uint16_t inst_pm_apbmask[] = TC_INST_PM_APBCMASK;
    1dd2:	ab03      	add	r3, sp, #12
    1dd4:	2280      	movs	r2, #128	; 0x80
    1dd6:	0112      	lsls	r2, r2, #4
    1dd8:	801a      	strh	r2, [r3, #0]
    1dda:	2280      	movs	r2, #128	; 0x80
    1ddc:	0152      	lsls	r2, r2, #5
    1dde:	805a      	strh	r2, [r3, #2]
    1de0:	2280      	movs	r2, #128	; 0x80
    1de2:	0192      	lsls	r2, r2, #6
    1de4:	809a      	strh	r2, [r3, #4]
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
		module_inst->callback[i]        = NULL;
    1de6:	2300      	movs	r3, #0
    1de8:	60a3      	str	r3, [r4, #8]
    1dea:	60e3      	str	r3, [r4, #12]
    1dec:	6123      	str	r3, [r4, #16]
    1dee:	6163      	str	r3, [r4, #20]
	}
	module_inst->register_callback_mask     = 0x00;
    1df0:	7623      	strb	r3, [r4, #24]
	module_inst->enable_callback_mask       = 0x00;
    1df2:	7663      	strb	r3, [r4, #25]

	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
    1df4:	0082      	lsls	r2, r0, #2
    1df6:	4b79      	ldr	r3, [pc, #484]	; (1fdc <tc_init+0x228>)
    1df8:	50d4      	str	r4, [r2, r3]
#endif

	/* Associate the given device instance with the hardware module */
	module_inst->hw = hw;
    1dfa:	6025      	str	r5, [r4, #0]
#else
	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    1dfc:	78b3      	ldrb	r3, [r6, #2]
    1dfe:	2b08      	cmp	r3, #8
    1e00:	d006      	beq.n	1e10 <tc_init+0x5c>
#endif

	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;
    1e02:	7123      	strb	r3, [r4, #4]

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    1e04:	882b      	ldrh	r3, [r5, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    1e06:	2005      	movs	r0, #5
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    1e08:	07db      	lsls	r3, r3, #31
    1e0a:	d505      	bpl.n	1e18 <tc_init+0x64>
			return STATUS_OK;
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
}
    1e0c:	b007      	add	sp, #28
    1e0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return STATUS_ERR_INVALID_ARG;
    1e10:	2017      	movs	r0, #23
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    1e12:	07fa      	lsls	r2, r7, #31
    1e14:	d5fa      	bpl.n	1e0c <tc_init+0x58>
    1e16:	e7f4      	b.n	1e02 <tc_init+0x4e>
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    1e18:	7beb      	ldrb	r3, [r5, #15]
		return STATUS_ERR_DENIED;
    1e1a:	3017      	adds	r0, #23
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    1e1c:	06db      	lsls	r3, r3, #27
    1e1e:	d4f5      	bmi.n	1e0c <tc_init+0x58>
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
    1e20:	882b      	ldrh	r3, [r5, #0]
    1e22:	079b      	lsls	r3, r3, #30
    1e24:	d4f2      	bmi.n	1e0c <tc_init+0x58>
	if (config->pwm_channel[0].enabled) {
    1e26:	7c33      	ldrb	r3, [r6, #16]
    1e28:	2b00      	cmp	r3, #0
    1e2a:	d179      	bne.n	1f20 <tc_init+0x16c>
	if (config->pwm_channel[1].enabled) {
    1e2c:	7f33      	ldrb	r3, [r6, #28]
    1e2e:	2b00      	cmp	r3, #0
    1e30:	d000      	beq.n	1e34 <tc_init+0x80>
    1e32:	e081      	b.n	1f38 <tc_init+0x184>
    1e34:	496a      	ldr	r1, [pc, #424]	; (1fe0 <tc_init+0x22c>)
    1e36:	6a08      	ldr	r0, [r1, #32]
			inst_pm_apbmask[instance]);
    1e38:	007a      	lsls	r2, r7, #1
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    1e3a:	ab03      	add	r3, sp, #12
    1e3c:	5ad3      	ldrh	r3, [r2, r3]
    1e3e:	4303      	orrs	r3, r0
    1e40:	620b      	str	r3, [r1, #32]
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT))
    1e42:	78b3      	ldrb	r3, [r6, #2]
    1e44:	2b08      	cmp	r3, #8
    1e46:	d100      	bne.n	1e4a <tc_init+0x96>
    1e48:	e086      	b.n	1f58 <tc_init+0x1a4>
	gclk_chan_config.source_generator = config->clock_source;
    1e4a:	a901      	add	r1, sp, #4
    1e4c:	7833      	ldrb	r3, [r6, #0]
    1e4e:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
    1e50:	ab05      	add	r3, sp, #20
    1e52:	5ddf      	ldrb	r7, [r3, r7]
    1e54:	0038      	movs	r0, r7
    1e56:	4b63      	ldr	r3, [pc, #396]	; (1fe4 <tc_init+0x230>)
    1e58:	4798      	blx	r3
	system_gclk_chan_enable(inst_gclk_id[instance]);
    1e5a:	0038      	movs	r0, r7
    1e5c:	4b62      	ldr	r3, [pc, #392]	; (1fe8 <tc_init+0x234>)
    1e5e:	4798      	blx	r3
	ctrla_tmp =
    1e60:	8931      	ldrh	r1, [r6, #8]
    1e62:	88b3      	ldrh	r3, [r6, #4]
    1e64:	430b      	orrs	r3, r1
			(uint32_t)config->wave_generation |
    1e66:	78b1      	ldrb	r1, [r6, #2]
    1e68:	79b2      	ldrb	r2, [r6, #6]
    1e6a:	4311      	orrs	r1, r2
	ctrla_tmp =
    1e6c:	4319      	orrs	r1, r3
	if (config->run_in_standby) {
    1e6e:	7873      	ldrb	r3, [r6, #1]
    1e70:	2b00      	cmp	r3, #0
    1e72:	d002      	beq.n	1e7a <tc_init+0xc6>
		ctrla_tmp |= TC_CTRLA_RUNSTDBY;
    1e74:	2380      	movs	r3, #128	; 0x80
    1e76:	011b      	lsls	r3, r3, #4
    1e78:	4319      	orrs	r1, r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1e7a:	6822      	ldr	r2, [r4, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1e7c:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    1e7e:	b25b      	sxtb	r3, r3
    1e80:	2b00      	cmp	r3, #0
    1e82:	dbfb      	blt.n	1e7c <tc_init+0xc8>
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
    1e84:	8029      	strh	r1, [r5, #0]
	if (config->oneshot) {
    1e86:	7b71      	ldrb	r1, [r6, #13]
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
    1e88:	1e4b      	subs	r3, r1, #1
    1e8a:	4199      	sbcs	r1, r3
    1e8c:	0089      	lsls	r1, r1, #2
	if (config->count_direction) {
    1e8e:	7bb3      	ldrb	r3, [r6, #14]
    1e90:	2b00      	cmp	r3, #0
    1e92:	d001      	beq.n	1e98 <tc_init+0xe4>
		ctrlbset_tmp |= TC_CTRLBSET_DIR;
    1e94:	2301      	movs	r3, #1
    1e96:	4319      	orrs	r1, r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1e98:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1e9a:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    1e9c:	b25b      	sxtb	r3, r3
    1e9e:	2b00      	cmp	r3, #0
    1ea0:	dbfb      	blt.n	1e9a <tc_init+0xe6>
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
    1ea2:	23ff      	movs	r3, #255	; 0xff
    1ea4:	712b      	strb	r3, [r5, #4]
	if (ctrlbset_tmp) {
    1ea6:	2900      	cmp	r1, #0
    1ea8:	d005      	beq.n	1eb6 <tc_init+0x102>
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1eaa:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1eac:	7bd3      	ldrb	r3, [r2, #15]
		while (tc_is_syncing(module_inst)) {
    1eae:	b25b      	sxtb	r3, r3
    1eb0:	2b00      	cmp	r3, #0
    1eb2:	dbfb      	blt.n	1eac <tc_init+0xf8>
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
    1eb4:	7169      	strb	r1, [r5, #5]
	ctrlc_tmp = config->waveform_invert_output;
    1eb6:	7ab1      	ldrb	r1, [r6, #10]
		if (config->enable_capture_on_channel[i] == true) {
    1eb8:	7af3      	ldrb	r3, [r6, #11]
    1eba:	2b00      	cmp	r3, #0
    1ebc:	d001      	beq.n	1ec2 <tc_init+0x10e>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
    1ebe:	2310      	movs	r3, #16
    1ec0:	4319      	orrs	r1, r3
		if (config->enable_capture_on_channel[i] == true) {
    1ec2:	7b33      	ldrb	r3, [r6, #12]
    1ec4:	2b00      	cmp	r3, #0
    1ec6:	d001      	beq.n	1ecc <tc_init+0x118>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
    1ec8:	2320      	movs	r3, #32
    1eca:	4319      	orrs	r1, r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1ecc:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1ece:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    1ed0:	b25b      	sxtb	r3, r3
    1ed2:	2b00      	cmp	r3, #0
    1ed4:	dbfb      	blt.n	1ece <tc_init+0x11a>
	hw->COUNT8.CTRLC.reg = ctrlc_tmp;
    1ed6:	71a9      	strb	r1, [r5, #6]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1ed8:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1eda:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    1edc:	b25b      	sxtb	r3, r3
    1ede:	2b00      	cmp	r3, #0
    1ee0:	dbfb      	blt.n	1eda <tc_init+0x126>
	switch (module_inst->counter_size) {
    1ee2:	7923      	ldrb	r3, [r4, #4]
    1ee4:	2b04      	cmp	r3, #4
    1ee6:	d03f      	beq.n	1f68 <tc_init+0x1b4>
    1ee8:	2b08      	cmp	r3, #8
    1eea:	d05e      	beq.n	1faa <tc_init+0x1f6>
	return STATUS_ERR_INVALID_ARG;
    1eec:	2017      	movs	r0, #23
	switch (module_inst->counter_size) {
    1eee:	2b00      	cmp	r3, #0
    1ef0:	d000      	beq.n	1ef4 <tc_init+0x140>
    1ef2:	e78b      	b.n	1e0c <tc_init+0x58>
    1ef4:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1ef6:	b25b      	sxtb	r3, r3
    1ef8:	2b00      	cmp	r3, #0
    1efa:	dbfb      	blt.n	1ef4 <tc_init+0x140>
				= config->counter_16_bit.value;
    1efc:	8d33      	ldrh	r3, [r6, #40]	; 0x28
    1efe:	822b      	strh	r3, [r5, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1f00:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1f02:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1f04:	b25b      	sxtb	r3, r3
    1f06:	2b00      	cmp	r3, #0
    1f08:	dbfb      	blt.n	1f02 <tc_init+0x14e>
					config->counter_16_bit.compare_capture_channel[0];
    1f0a:	8d73      	ldrh	r3, [r6, #42]	; 0x2a
			hw->COUNT16.CC[0].reg =
    1f0c:	832b      	strh	r3, [r5, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1f0e:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1f10:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1f12:	b25b      	sxtb	r3, r3
    1f14:	2b00      	cmp	r3, #0
    1f16:	dbfb      	blt.n	1f10 <tc_init+0x15c>
					config->counter_16_bit.compare_capture_channel[1];
    1f18:	8db3      	ldrh	r3, [r6, #44]	; 0x2c
			hw->COUNT16.CC[1].reg =
    1f1a:	836b      	strh	r3, [r5, #26]
			return STATUS_OK;
    1f1c:	2000      	movs	r0, #0
    1f1e:	e775      	b.n	1e0c <tc_init+0x58>
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    1f20:	a902      	add	r1, sp, #8
    1f22:	2301      	movs	r3, #1
    1f24:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    1f26:	2200      	movs	r2, #0
    1f28:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
    1f2a:	7e32      	ldrb	r2, [r6, #24]
    1f2c:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    1f2e:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    1f30:	7d30      	ldrb	r0, [r6, #20]
    1f32:	4b2e      	ldr	r3, [pc, #184]	; (1fec <tc_init+0x238>)
    1f34:	4798      	blx	r3
    1f36:	e779      	b.n	1e2c <tc_init+0x78>
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    1f38:	a902      	add	r1, sp, #8
    1f3a:	2301      	movs	r3, #1
    1f3c:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    1f3e:	2200      	movs	r2, #0
    1f40:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
    1f42:	3224      	adds	r2, #36	; 0x24
    1f44:	18b2      	adds	r2, r6, r2
    1f46:	7812      	ldrb	r2, [r2, #0]
    1f48:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    1f4a:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    1f4c:	331f      	adds	r3, #31
    1f4e:	18f3      	adds	r3, r6, r3
    1f50:	7818      	ldrb	r0, [r3, #0]
    1f52:	4b26      	ldr	r3, [pc, #152]	; (1fec <tc_init+0x238>)
    1f54:	4798      	blx	r3
    1f56:	e76d      	b.n	1e34 <tc_init+0x80>
    1f58:	6a08      	ldr	r0, [r1, #32]
				inst_pm_apbmask[instance + 1]);
    1f5a:	1c7a      	adds	r2, r7, #1
    1f5c:	0052      	lsls	r2, r2, #1
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    1f5e:	ab03      	add	r3, sp, #12
    1f60:	5ad3      	ldrh	r3, [r2, r3]
    1f62:	4303      	orrs	r3, r0
    1f64:	620b      	str	r3, [r1, #32]
    1f66:	e770      	b.n	1e4a <tc_init+0x96>
    1f68:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1f6a:	b25b      	sxtb	r3, r3
    1f6c:	2b00      	cmp	r3, #0
    1f6e:	dbfb      	blt.n	1f68 <tc_init+0x1b4>
					config->counter_8_bit.value;
    1f70:	2328      	movs	r3, #40	; 0x28
    1f72:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.COUNT.reg =
    1f74:	742b      	strb	r3, [r5, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1f76:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1f78:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1f7a:	b25b      	sxtb	r3, r3
    1f7c:	2b00      	cmp	r3, #0
    1f7e:	dbfb      	blt.n	1f78 <tc_init+0x1c4>
					config->counter_8_bit.period;
    1f80:	2329      	movs	r3, #41	; 0x29
    1f82:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.PER.reg =
    1f84:	752b      	strb	r3, [r5, #20]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1f86:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1f88:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1f8a:	b25b      	sxtb	r3, r3
    1f8c:	2b00      	cmp	r3, #0
    1f8e:	dbfb      	blt.n	1f88 <tc_init+0x1d4>
					config->counter_8_bit.compare_capture_channel[0];
    1f90:	232a      	movs	r3, #42	; 0x2a
    1f92:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[0].reg =
    1f94:	762b      	strb	r3, [r5, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1f96:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1f98:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1f9a:	b25b      	sxtb	r3, r3
    1f9c:	2b00      	cmp	r3, #0
    1f9e:	dbfb      	blt.n	1f98 <tc_init+0x1e4>
					config->counter_8_bit.compare_capture_channel[1];
    1fa0:	232b      	movs	r3, #43	; 0x2b
    1fa2:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[1].reg =
    1fa4:	766b      	strb	r3, [r5, #25]
			return STATUS_OK;
    1fa6:	2000      	movs	r0, #0
    1fa8:	e730      	b.n	1e0c <tc_init+0x58>
    1faa:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1fac:	b25b      	sxtb	r3, r3
    1fae:	2b00      	cmp	r3, #0
    1fb0:	dbfb      	blt.n	1faa <tc_init+0x1f6>
				= config->counter_32_bit.value;
    1fb2:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    1fb4:	612b      	str	r3, [r5, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1fb6:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1fb8:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1fba:	b25b      	sxtb	r3, r3
    1fbc:	2b00      	cmp	r3, #0
    1fbe:	dbfb      	blt.n	1fb8 <tc_init+0x204>
			hw->COUNT32.CC[0].reg =
    1fc0:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    1fc2:	61ab      	str	r3, [r5, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1fc4:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1fc6:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1fc8:	b25b      	sxtb	r3, r3
    1fca:	2b00      	cmp	r3, #0
    1fcc:	dbfb      	blt.n	1fc6 <tc_init+0x212>
					config->counter_32_bit.compare_capture_channel[1];
    1fce:	6b33      	ldr	r3, [r6, #48]	; 0x30
			hw->COUNT32.CC[1].reg =
    1fd0:	61eb      	str	r3, [r5, #28]
			return STATUS_OK;
    1fd2:	2000      	movs	r0, #0
    1fd4:	e71a      	b.n	1e0c <tc_init+0x58>
    1fd6:	46c0      	nop			; (mov r8, r8)
    1fd8:	00001d7d 	.word	0x00001d7d
    1fdc:	2000012c 	.word	0x2000012c
    1fe0:	40000400 	.word	0x40000400
    1fe4:	000014d1 	.word	0x000014d1
    1fe8:	00001445 	.word	0x00001445
    1fec:	000015c9 	.word	0x000015c9

00001ff0 <tc_set_count_value>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance*/
	Tc *const tc_module = module_inst->hw;
    1ff0:	6802      	ldr	r2, [r0, #0]
    1ff2:	7bd3      	ldrb	r3, [r2, #15]

	while (tc_is_syncing(module_inst)) {
    1ff4:	b25b      	sxtb	r3, r3
    1ff6:	2b00      	cmp	r3, #0
    1ff8:	dbfb      	blt.n	1ff2 <tc_set_count_value+0x2>
		/* Wait for sync */
	}

	/* Write to based on the TC counter_size */
	switch (module_inst->counter_size) {
    1ffa:	7903      	ldrb	r3, [r0, #4]
    1ffc:	2b04      	cmp	r3, #4
    1ffe:	d005      	beq.n	200c <tc_set_count_value+0x1c>
    2000:	2b08      	cmp	r3, #8
    2002:	d00b      	beq.n	201c <tc_set_count_value+0x2c>
		case TC_COUNTER_SIZE_32BIT:
			tc_module->COUNT32.COUNT.reg = (uint32_t)count;
			return STATUS_OK;

		default:
			return STATUS_ERR_INVALID_ARG;
    2004:	2017      	movs	r0, #23
	switch (module_inst->counter_size) {
    2006:	2b00      	cmp	r3, #0
    2008:	d004      	beq.n	2014 <tc_set_count_value+0x24>
	}
}
    200a:	4770      	bx	lr
			tc_module->COUNT8.COUNT.reg  = (uint8_t)count;
    200c:	b2c9      	uxtb	r1, r1
    200e:	7411      	strb	r1, [r2, #16]
			return STATUS_OK;
    2010:	2000      	movs	r0, #0
    2012:	e7fa      	b.n	200a <tc_set_count_value+0x1a>
			tc_module->COUNT16.COUNT.reg = (uint16_t)count;
    2014:	b289      	uxth	r1, r1
    2016:	8211      	strh	r1, [r2, #16]
			return STATUS_OK;
    2018:	2000      	movs	r0, #0
    201a:	e7f6      	b.n	200a <tc_set_count_value+0x1a>
			tc_module->COUNT32.COUNT.reg = (uint32_t)count;
    201c:	6111      	str	r1, [r2, #16]
			return STATUS_OK;
    201e:	2000      	movs	r0, #0
    2020:	e7f3      	b.n	200a <tc_set_count_value+0x1a>

00002022 <Dummy_Handler>:
 */
void Dummy_Handler(void)
{
        //while (1) {
        //}
}
    2022:	4770      	bx	lr

00002024 <Reset_Handler>:
{
    2024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    2026:	4a2a      	ldr	r2, [pc, #168]	; (20d0 <Reset_Handler+0xac>)
    2028:	4b2a      	ldr	r3, [pc, #168]	; (20d4 <Reset_Handler+0xb0>)
    202a:	429a      	cmp	r2, r3
    202c:	d011      	beq.n	2052 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    202e:	001a      	movs	r2, r3
    2030:	4b29      	ldr	r3, [pc, #164]	; (20d8 <Reset_Handler+0xb4>)
    2032:	429a      	cmp	r2, r3
    2034:	d20d      	bcs.n	2052 <Reset_Handler+0x2e>
    2036:	4a29      	ldr	r2, [pc, #164]	; (20dc <Reset_Handler+0xb8>)
    2038:	3303      	adds	r3, #3
    203a:	1a9b      	subs	r3, r3, r2
    203c:	089b      	lsrs	r3, r3, #2
    203e:	3301      	adds	r3, #1
    2040:	009b      	lsls	r3, r3, #2
    2042:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    2044:	4823      	ldr	r0, [pc, #140]	; (20d4 <Reset_Handler+0xb0>)
    2046:	4922      	ldr	r1, [pc, #136]	; (20d0 <Reset_Handler+0xac>)
    2048:	588c      	ldr	r4, [r1, r2]
    204a:	5084      	str	r4, [r0, r2]
    204c:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    204e:	429a      	cmp	r2, r3
    2050:	d1fa      	bne.n	2048 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    2052:	4a23      	ldr	r2, [pc, #140]	; (20e0 <Reset_Handler+0xbc>)
    2054:	4b23      	ldr	r3, [pc, #140]	; (20e4 <Reset_Handler+0xc0>)
    2056:	429a      	cmp	r2, r3
    2058:	d20a      	bcs.n	2070 <Reset_Handler+0x4c>
    205a:	43d3      	mvns	r3, r2
    205c:	4921      	ldr	r1, [pc, #132]	; (20e4 <Reset_Handler+0xc0>)
    205e:	185b      	adds	r3, r3, r1
    2060:	2103      	movs	r1, #3
    2062:	438b      	bics	r3, r1
    2064:	3304      	adds	r3, #4
    2066:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    2068:	2100      	movs	r1, #0
    206a:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    206c:	4293      	cmp	r3, r2
    206e:	d1fc      	bne.n	206a <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    2070:	4a1d      	ldr	r2, [pc, #116]	; (20e8 <Reset_Handler+0xc4>)
    2072:	21ff      	movs	r1, #255	; 0xff
    2074:	4b1d      	ldr	r3, [pc, #116]	; (20ec <Reset_Handler+0xc8>)
    2076:	438b      	bics	r3, r1
    2078:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    207a:	39fd      	subs	r1, #253	; 0xfd
    207c:	2390      	movs	r3, #144	; 0x90
    207e:	005b      	lsls	r3, r3, #1
    2080:	4a1b      	ldr	r2, [pc, #108]	; (20f0 <Reset_Handler+0xcc>)
    2082:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    2084:	4a1b      	ldr	r2, [pc, #108]	; (20f4 <Reset_Handler+0xd0>)
    2086:	78d3      	ldrb	r3, [r2, #3]
    2088:	2503      	movs	r5, #3
    208a:	43ab      	bics	r3, r5
    208c:	2402      	movs	r4, #2
    208e:	4323      	orrs	r3, r4
    2090:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    2092:	78d3      	ldrb	r3, [r2, #3]
    2094:	270c      	movs	r7, #12
    2096:	43bb      	bics	r3, r7
    2098:	2608      	movs	r6, #8
    209a:	4333      	orrs	r3, r6
    209c:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    209e:	4b16      	ldr	r3, [pc, #88]	; (20f8 <Reset_Handler+0xd4>)
    20a0:	7b98      	ldrb	r0, [r3, #14]
    20a2:	2230      	movs	r2, #48	; 0x30
    20a4:	4390      	bics	r0, r2
    20a6:	2220      	movs	r2, #32
    20a8:	4310      	orrs	r0, r2
    20aa:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    20ac:	7b99      	ldrb	r1, [r3, #14]
    20ae:	43b9      	bics	r1, r7
    20b0:	4331      	orrs	r1, r6
    20b2:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    20b4:	7b9a      	ldrb	r2, [r3, #14]
    20b6:	43aa      	bics	r2, r5
    20b8:	4322      	orrs	r2, r4
    20ba:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    20bc:	4a0f      	ldr	r2, [pc, #60]	; (20fc <Reset_Handler+0xd8>)
    20be:	6853      	ldr	r3, [r2, #4]
    20c0:	2180      	movs	r1, #128	; 0x80
    20c2:	430b      	orrs	r3, r1
    20c4:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    20c6:	4b0e      	ldr	r3, [pc, #56]	; (2100 <Reset_Handler+0xdc>)
    20c8:	4798      	blx	r3
        main();
    20ca:	4b0e      	ldr	r3, [pc, #56]	; (2104 <Reset_Handler+0xe0>)
    20cc:	4798      	blx	r3
    20ce:	e7fe      	b.n	20ce <Reset_Handler+0xaa>
    20d0:	000074e0 	.word	0x000074e0
    20d4:	20000000 	.word	0x20000000
    20d8:	20000048 	.word	0x20000048
    20dc:	20000004 	.word	0x20000004
    20e0:	20000048 	.word	0x20000048
    20e4:	200002d8 	.word	0x200002d8
    20e8:	e000ed00 	.word	0xe000ed00
    20ec:	00000000 	.word	0x00000000
    20f0:	41007000 	.word	0x41007000
    20f4:	41005000 	.word	0x41005000
    20f8:	41004800 	.word	0x41004800
    20fc:	41004000 	.word	0x41004000
    2100:	00006ffd 	.word	0x00006ffd
    2104:	00002e81 	.word	0x00002e81

00002108 <i2c_read_complete_callback>:
    i2c_master_read_packet_job(&i2c_master_instance,&rd_packet);
}

void i2c_read_complete_callback(struct i2c_master_module *const module) {

}
    2108:	4770      	bx	lr
	...

0000210c <tc_callback_method>:
    //tc_enable_callback(&tc_instance, TC_CALLBACK_CC_CHANNEL0);
}

static uint16_t timeslotCounter = 0;
static bool slot_triggered = false;
void tc_callback_method(struct tc_module *const module_inst) {
    210c:	b510      	push	{r4, lr}
    tc_set_count_value(module_inst, 0x0000);
    210e:	2100      	movs	r1, #0
    2110:	4b09      	ldr	r3, [pc, #36]	; (2138 <tc_callback_method+0x2c>)
    2112:	4798      	blx	r3

    timeslotCounter++;
    2114:	4b09      	ldr	r3, [pc, #36]	; (213c <tc_callback_method+0x30>)
    2116:	881b      	ldrh	r3, [r3, #0]
    2118:	3301      	adds	r3, #1
    211a:	b29b      	uxth	r3, r3
    if(timeslotCounter == 999) {
    211c:	4a08      	ldr	r2, [pc, #32]	; (2140 <tc_callback_method+0x34>)
    211e:	4293      	cmp	r3, r2
    2120:	d005      	beq.n	212e <tc_callback_method+0x22>
    timeslotCounter++;
    2122:	4a06      	ldr	r2, [pc, #24]	; (213c <tc_callback_method+0x30>)
    2124:	8013      	strh	r3, [r2, #0]
        timeslotCounter = 0;
    }
	
	slot_triggered = true;
    2126:	2201      	movs	r2, #1
    2128:	4b06      	ldr	r3, [pc, #24]	; (2144 <tc_callback_method+0x38>)
    212a:	701a      	strb	r2, [r3, #0]
}
    212c:	bd10      	pop	{r4, pc}
        timeslotCounter = 0;
    212e:	2200      	movs	r2, #0
    2130:	4b02      	ldr	r3, [pc, #8]	; (213c <tc_callback_method+0x30>)
    2132:	801a      	strh	r2, [r3, #0]
    2134:	e7f7      	b.n	2126 <tc_callback_method+0x1a>
    2136:	46c0      	nop			; (mov r8, r8)
    2138:	00001ff1 	.word	0x00001ff1
    213c:	200000bc 	.word	0x200000bc
    2140:	000003e7 	.word	0x000003e7
    2144:	200000b8 	.word	0x200000b8

00002148 <i2c_write_complete_callback>:
    struct i2c_master_module *const module) {
    2148:	b510      	push	{r4, lr}
    i2c_master_read_packet_job(&i2c_master_instance,&rd_packet);
    214a:	4902      	ldr	r1, [pc, #8]	; (2154 <i2c_write_complete_callback+0xc>)
    214c:	4802      	ldr	r0, [pc, #8]	; (2158 <i2c_write_complete_callback+0x10>)
    214e:	4b03      	ldr	r3, [pc, #12]	; (215c <i2c_write_complete_callback+0x14>)
    2150:	4798      	blx	r3
}
    2152:	bd10      	pop	{r4, pc}
    2154:	2000025c 	.word	0x2000025c
    2158:	200001ac 	.word	0x200001ac
    215c:	000009dd 	.word	0x000009dd

00002160 <setPWM>:
	3,2,1,0,1,
	3,1,0,1,2
};

void setPWM(uint8_t ledNumber, uint8_t pwmPercentage)
{
    2160:	b510      	push	{r4, lr}
	tcc_set_compare_value((struct tcc_module *const) tccAddress[ledNumber],waveformAddress[ledNumber],(101-pwmPercentage));
    2162:	2265      	movs	r2, #101	; 0x65
    2164:	1a52      	subs	r2, r2, r1
    2166:	4b04      	ldr	r3, [pc, #16]	; (2178 <setPWM+0x18>)
    2168:	5c19      	ldrb	r1, [r3, r0]
    216a:	0080      	lsls	r0, r0, #2
    216c:	4b03      	ldr	r3, [pc, #12]	; (217c <setPWM+0x1c>)
    216e:	58c0      	ldr	r0, [r0, r3]
    2170:	4b03      	ldr	r3, [pc, #12]	; (2180 <setPWM+0x20>)
    2172:	4798      	blx	r3
    2174:	bd10      	pop	{r4, pc}
    2176:	46c0      	nop			; (mov r8, r8)
    2178:	20000008 	.word	0x20000008
    217c:	00007138 	.word	0x00007138
    2180:	00001c29 	.word	0x00001c29

00002184 <driveLEDs>:

void setMinSegmentsOn(uint8_t segmentCount) {
    minSegmentsOn = segmentCount;
}

void driveLEDs(void) {
    2184:	b5f0      	push	{r4, r5, r6, r7, lr}
    2186:	46d6      	mov	lr, sl
    2188:	464f      	mov	r7, r9
    218a:	4646      	mov	r6, r8
    218c:	b5c0      	push	{r6, r7, lr}
    218e:	b082      	sub	sp, #8
    volatile bool ledInSegmentOn = false;
    2190:	2200      	movs	r2, #0
    2192:	466b      	mov	r3, sp
    2194:	71da      	strb	r2, [r3, #7]
    static uint8_t previousSourceValue = 0;
    volatile static uint8_t segmentOnCount = 0;

    while (!ledInSegmentOn) {

		ioport_set_pin_level(sourcePins[previousSourceValue], 0);
    2196:	4b48      	ldr	r3, [pc, #288]	; (22b8 <driveLEDs+0x134>)
    2198:	4698      	mov	r8, r3
                    //ioport_set_pin_level(pinSet[ledOfInterest][1], 0);
					setPWM(ledOfInterest,0);
					setPWM(ledOfInterest,0);
                } else {
                    //ioport_set_pin_level(pinSet[ledOfInterest][1], 1);
					setPWM(ledOfInterest,LEDdim[ledOfInterest]);
    219a:	4d48      	ldr	r5, [pc, #288]	; (22bc <driveLEDs+0x138>)
    while (!ledInSegmentOn) {
    219c:	e061      	b.n	2262 <driveLEDs+0xde>
    219e:	3301      	adds	r3, #1
    21a0:	b2db      	uxtb	r3, r3
        for(uint8_t i = 0; i < LEDS_PER_SEGMENT; i++) {
    21a2:	4299      	cmp	r1, r3
    21a4:	d007      	beq.n	21b6 <driveLEDs+0x32>
            if(LEDdim[ledOfInterest] != 0 && ledOfInterest < NUMBER_OF_LEDS) {
    21a6:	5cc2      	ldrb	r2, [r0, r3]
    21a8:	2a00      	cmp	r2, #0
    21aa:	d0f8      	beq.n	219e <driveLEDs+0x1a>
    21ac:	2b3b      	cmp	r3, #59	; 0x3b
    21ae:	d8f6      	bhi.n	219e <driveLEDs+0x1a>
                ledInSegmentOn = true;
    21b0:	466a      	mov	r2, sp
    21b2:	71d7      	strb	r7, [r2, #7]
    21b4:	e7f3      	b.n	219e <driveLEDs+0x1a>
        if(ledInSegmentOn) {
    21b6:	466b      	mov	r3, sp
    21b8:	3307      	adds	r3, #7
    21ba:	781b      	ldrb	r3, [r3, #0]
    21bc:	2b00      	cmp	r3, #0
    21be:	d034      	beq.n	222a <driveLEDs+0xa6>
            previousSourceValue = sourceValue;
    21c0:	4b3f      	ldr	r3, [pc, #252]	; (22c0 <driveLEDs+0x13c>)
    21c2:	701c      	strb	r4, [r3, #0]
            for(uint8_t i = 0; i < LEDS_PER_SEGMENT; i++) {
    21c4:	2700      	movs	r7, #0
                uint8_t ledOfInterest = sourceValue*LEDS_PER_SEGMENT+i;
    21c6:	4b3f      	ldr	r3, [pc, #252]	; (22c4 <driveLEDs+0x140>)
    21c8:	4699      	mov	r9, r3
                if(LEDdim[ledOfInterest] == 0) {
    21ca:	4e3f      	ldr	r6, [pc, #252]	; (22c8 <driveLEDs+0x144>)
    21cc:	e009      	b.n	21e2 <driveLEDs+0x5e>
					setPWM(ledOfInterest,LEDdim[ledOfInterest]);
    21ce:	0020      	movs	r0, r4
    21d0:	47a8      	blx	r5
					setPWM(ledOfInterest,LEDdim[ledOfInterest]);
    21d2:	4b3d      	ldr	r3, [pc, #244]	; (22c8 <driveLEDs+0x144>)
    21d4:	5d19      	ldrb	r1, [r3, r4]
    21d6:	0020      	movs	r0, r4
    21d8:	47a8      	blx	r5
            for(uint8_t i = 0; i < LEDS_PER_SEGMENT; i++) {
    21da:	3701      	adds	r7, #1
    21dc:	b2ff      	uxtb	r7, r7
    21de:	2f05      	cmp	r7, #5
    21e0:	d010      	beq.n	2204 <driveLEDs+0x80>
                uint8_t ledOfInterest = sourceValue*LEDS_PER_SEGMENT+i;
    21e2:	464b      	mov	r3, r9
    21e4:	781c      	ldrb	r4, [r3, #0]
    21e6:	00a3      	lsls	r3, r4, #2
    21e8:	18e4      	adds	r4, r4, r3
    21ea:	193c      	adds	r4, r7, r4
    21ec:	b2e4      	uxtb	r4, r4
                if(LEDdim[ledOfInterest] == 0) {
    21ee:	5d31      	ldrb	r1, [r6, r4]
    21f0:	2900      	cmp	r1, #0
    21f2:	d1ec      	bne.n	21ce <driveLEDs+0x4a>
					setPWM(ledOfInterest,0);
    21f4:	0020      	movs	r0, r4
    21f6:	4b31      	ldr	r3, [pc, #196]	; (22bc <driveLEDs+0x138>)
    21f8:	469a      	mov	sl, r3
    21fa:	4798      	blx	r3
					setPWM(ledOfInterest,0);
    21fc:	2100      	movs	r1, #0
    21fe:	0020      	movs	r0, r4
    2200:	47d0      	blx	sl
    2202:	e7ea      	b.n	21da <driveLEDs+0x56>
                }
            }
			segmentOnCount++;
    2204:	4a31      	ldr	r2, [pc, #196]	; (22cc <driveLEDs+0x148>)
    2206:	7813      	ldrb	r3, [r2, #0]
    2208:	3301      	adds	r3, #1
    220a:	b2db      	uxtb	r3, r3
    220c:	7013      	strb	r3, [r2, #0]
            ioport_set_pin_level(sourcePins[sourceValue], 1);
    220e:	4b2d      	ldr	r3, [pc, #180]	; (22c4 <driveLEDs+0x140>)
    2210:	781b      	ldrb	r3, [r3, #0]
    2212:	4a29      	ldr	r2, [pc, #164]	; (22b8 <driveLEDs+0x134>)
    2214:	5cd2      	ldrb	r2, [r2, r3]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
    2216:	0953      	lsrs	r3, r2, #5
}

inline static PortGroup *arch_ioport_port_to_base(
		ioport_port_t port)
{
	return &PORT->Group[port];
    2218:	01db      	lsls	r3, r3, #7
    221a:	492d      	ldr	r1, [pc, #180]	; (22d0 <driveLEDs+0x14c>)
    221c:	468c      	mov	ip, r1
    221e:	4463      	add	r3, ip
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
    2220:	211f      	movs	r1, #31
    2222:	4011      	ands	r1, r2
    2224:	2201      	movs	r2, #1
    2226:	408a      	lsls	r2, r1

inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->OUTSET.reg = arch_ioport_pin_to_mask(pin);
    2228:	619a      	str	r2, [r3, #24]
        }
		
		int8_t segmentsRemaining =  NUMBER_OF_SEGMENTS - ((int8_t)sourceValue+1);
    222a:	4b26      	ldr	r3, [pc, #152]	; (22c4 <driveLEDs+0x140>)
    222c:	781b      	ldrb	r3, [r3, #0]
        if(segmentsRemaining <= (int8_t)minSegmentsOn - (int8_t)segmentOnCount) {
    222e:	4a27      	ldr	r2, [pc, #156]	; (22cc <driveLEDs+0x148>)
    2230:	7810      	ldrb	r0, [r2, #0]
		int8_t segmentsRemaining =  NUMBER_OF_SEGMENTS - ((int8_t)sourceValue+1);
    2232:	220b      	movs	r2, #11
    2234:	1ad2      	subs	r2, r2, r3
        if(segmentsRemaining <= (int8_t)minSegmentsOn - (int8_t)segmentOnCount) {
    2236:	b252      	sxtb	r2, r2
    2238:	4926      	ldr	r1, [pc, #152]	; (22d4 <driveLEDs+0x150>)
    223a:	7809      	ldrb	r1, [r1, #0]
    223c:	b249      	sxtb	r1, r1
    223e:	b240      	sxtb	r0, r0
    2240:	1a09      	subs	r1, r1, r0
    2242:	428a      	cmp	r2, r1
    2244:	dc07      	bgt.n	2256 <driveLEDs+0xd2>
            ledInSegmentOn = true;
    2246:	2101      	movs	r1, #1
    2248:	466a      	mov	r2, sp
    224a:	71d1      	strb	r1, [r2, #7]
            segmentOnCount++;
    224c:	491f      	ldr	r1, [pc, #124]	; (22cc <driveLEDs+0x148>)
    224e:	780a      	ldrb	r2, [r1, #0]
    2250:	3201      	adds	r2, #1
    2252:	b2d2      	uxtb	r2, r2
    2254:	700a      	strb	r2, [r1, #0]
        }

        sourceValue++;
    2256:	3301      	adds	r3, #1
    2258:	b2db      	uxtb	r3, r3
    225a:	4a1a      	ldr	r2, [pc, #104]	; (22c4 <driveLEDs+0x140>)
    225c:	7013      	strb	r3, [r2, #0]
        if(sourceValue == NUMBER_OF_SEGMENTS) {
    225e:	2b0c      	cmp	r3, #12
    2260:	d01c      	beq.n	229c <driveLEDs+0x118>
    while (!ledInSegmentOn) {
    2262:	466b      	mov	r3, sp
    2264:	3307      	adds	r3, #7
    2266:	781b      	ldrb	r3, [r3, #0]
    2268:	2b00      	cmp	r3, #0
    226a:	d11f      	bne.n	22ac <driveLEDs+0x128>
		ioport_set_pin_level(sourcePins[previousSourceValue], 0);
    226c:	4b14      	ldr	r3, [pc, #80]	; (22c0 <driveLEDs+0x13c>)
    226e:	781b      	ldrb	r3, [r3, #0]
    2270:	4642      	mov	r2, r8
    2272:	5cd2      	ldrb	r2, [r2, r3]
	return pin >> 5;
    2274:	0953      	lsrs	r3, r2, #5
	return &PORT->Group[port];
    2276:	01db      	lsls	r3, r3, #7
    2278:	4915      	ldr	r1, [pc, #84]	; (22d0 <driveLEDs+0x14c>)
    227a:	468c      	mov	ip, r1
    227c:	4463      	add	r3, ip
	return 1U << (pin & 0x1F);
    227e:	211f      	movs	r1, #31
    2280:	4011      	ands	r1, r2
    2282:	2201      	movs	r2, #1
    2284:	408a      	lsls	r2, r1
	} else {
		arch_ioport_pin_to_base(pin)->OUTCLR.reg = arch_ioport_pin_to_mask(pin);
    2286:	615a      	str	r2, [r3, #20]
            uint8_t ledOfInterest = sourceValue*LEDS_PER_SEGMENT+i;
    2288:	4b0e      	ldr	r3, [pc, #56]	; (22c4 <driveLEDs+0x140>)
    228a:	781c      	ldrb	r4, [r3, #0]
    228c:	00a3      	lsls	r3, r4, #2
    228e:	18e3      	adds	r3, r4, r3
    2290:	b2db      	uxtb	r3, r3
    2292:	1d59      	adds	r1, r3, #5
    2294:	b2c9      	uxtb	r1, r1
            if(LEDdim[ledOfInterest] != 0 && ledOfInterest < NUMBER_OF_LEDS) {
    2296:	480c      	ldr	r0, [pc, #48]	; (22c8 <driveLEDs+0x144>)
                ledInSegmentOn = true;
    2298:	2701      	movs	r7, #1
    229a:	e784      	b.n	21a6 <driveLEDs+0x22>
            sourceValue = 0;
    229c:	2300      	movs	r3, #0
    229e:	7013      	strb	r3, [r2, #0]
            ledInSegmentOn = true;
    22a0:	2101      	movs	r1, #1
    22a2:	466a      	mov	r2, sp
    22a4:	71d1      	strb	r1, [r2, #7]
                for(uint8_t i = 0; i < 11; i++) {
                    ioport_set_pin_level(sourcePins[i], 0);
                }
            }
			*/
            segmentOnCount = 0;
    22a6:	4a09      	ldr	r2, [pc, #36]	; (22cc <driveLEDs+0x148>)
    22a8:	7013      	strb	r3, [r2, #0]
    22aa:	e7da      	b.n	2262 <driveLEDs+0xde>
        }
    }
}
    22ac:	b002      	add	sp, #8
    22ae:	bc1c      	pop	{r2, r3, r4}
    22b0:	4690      	mov	r8, r2
    22b2:	4699      	mov	r9, r3
    22b4:	46a2      	mov	sl, r4
    22b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    22b8:	00007128 	.word	0x00007128
    22bc:	00002161 	.word	0x00002161
    22c0:	200000ac 	.word	0x200000ac
    22c4:	200000b9 	.word	0x200000b9
    22c8:	2000029c 	.word	0x2000029c
    22cc:	200000b6 	.word	0x200000b6
    22d0:	41004400 	.word	0x41004400
    22d4:	20000003 	.word	0x20000003

000022d8 <addLED>:
		LEDdim[led] = pwm;
	}
}

void addLED(uint8_t led, uint8_t pwm){
	if(led < 60 && led >= 0){
    22d8:	283b      	cmp	r0, #59	; 0x3b
    22da:	d807      	bhi.n	22ec <addLED+0x14>
		if(LEDdim[led] + pwm > 100){
    22dc:	4b06      	ldr	r3, [pc, #24]	; (22f8 <addLED+0x20>)
    22de:	5c1b      	ldrb	r3, [r3, r0]
    22e0:	185a      	adds	r2, r3, r1
    22e2:	2a64      	cmp	r2, #100	; 0x64
    22e4:	dc03      	bgt.n	22ee <addLED+0x16>
			LEDdim[led] = 100;
		} else {
		LEDdim[led] = LEDdim[led] + pwm;
    22e6:	185b      	adds	r3, r3, r1
    22e8:	4a03      	ldr	r2, [pc, #12]	; (22f8 <addLED+0x20>)
    22ea:	5413      	strb	r3, [r2, r0]
		}
	}
}
    22ec:	4770      	bx	lr
			LEDdim[led] = 100;
    22ee:	2264      	movs	r2, #100	; 0x64
    22f0:	4b01      	ldr	r3, [pc, #4]	; (22f8 <addLED+0x20>)
    22f2:	541a      	strb	r2, [r3, r0]
    22f4:	e7fa      	b.n	22ec <addLED+0x14>
    22f6:	46c0      	nop			; (mov r8, r8)
    22f8:	2000029c 	.word	0x2000029c

000022fc <turnOffAllLEDS>:

void turnOffAllLEDS(void){
    22fc:	2300      	movs	r3, #0
		LEDdim[led] = pwm;
    22fe:	4806      	ldr	r0, [pc, #24]	; (2318 <turnOffAllLEDS+0x1c>)
    2300:	2100      	movs	r1, #0
    2302:	e002      	b.n	230a <turnOffAllLEDS+0xe>
    2304:	3301      	adds	r3, #1
	for(uint8_t i = 0; i <= NUMBER_OF_LEDS; i++){
    2306:	2b3d      	cmp	r3, #61	; 0x3d
    2308:	d005      	beq.n	2316 <turnOffAllLEDS+0x1a>
	if(led < 60 && led >= 0){
    230a:	b2da      	uxtb	r2, r3
    230c:	2a3b      	cmp	r2, #59	; 0x3b
    230e:	d8f9      	bhi.n	2304 <turnOffAllLEDS+0x8>
		LEDdim[led] = pwm;
    2310:	181a      	adds	r2, r3, r0
    2312:	7011      	strb	r1, [r2, #0]
    2314:	e7f6      	b.n	2304 <turnOffAllLEDS+0x8>
		//turnOffLED(i);
		switchLED(i,0);
	}
}
    2316:	4770      	bx	lr
    2318:	2000029c 	.word	0x2000029c

0000231c <setLEDPinsAsOutputs>:
void turnOnLED(uint8_t ledNumber) {
    ioport_set_pin_level(pinSet[ledNumber][0], 1);
    ioport_set_pin_level(pinSet[ledNumber][1], 0);
}

void setLEDPinsAsOutputs(void) {
    231c:	b5f0      	push	{r4, r5, r6, r7, lr}
    231e:	46ce      	mov	lr, r9
    2320:	4647      	mov	r7, r8
    2322:	b580      	push	{r7, lr}
    2324:	481f      	ldr	r0, [pc, #124]	; (23a4 <setLEDPinsAsOutputs+0x88>)
    2326:	0007      	movs	r7, r0
    2328:	370d      	adds	r7, #13
	return 1U << (pin & 0x1F);
    232a:	261f      	movs	r6, #31
    232c:	2301      	movs	r3, #1
    232e:	4699      	mov	r9, r3
	base->PINCFG[pin].reg |= PORT_PINCFG_INEN;
    2330:	2302      	movs	r3, #2
    2332:	469c      	mov	ip, r3
    for(uint8_t i = 0; i <= sizeof(sourcePins); i++) {
        ioport_set_pin_dir(sourcePins[i], IOPORT_DIR_OUTPUT);
    2334:	7803      	ldrb	r3, [r0, #0]
	return pin >> 5;
    2336:	095a      	lsrs	r2, r3, #5
	return &PORT->Group[port];
    2338:	01d2      	lsls	r2, r2, #7
    233a:	491b      	ldr	r1, [pc, #108]	; (23a8 <setLEDPinsAsOutputs+0x8c>)
    233c:	4688      	mov	r8, r1
    233e:	4442      	add	r2, r8
	return 1U << (pin & 0x1F);
    2340:	0031      	movs	r1, r6
    2342:	4019      	ands	r1, r3
    2344:	464c      	mov	r4, r9
    2346:	408c      	lsls	r4, r1
		base->DIRSET.reg = arch_ioport_pin_to_mask(pin);
    2348:	6094      	str	r4, [r2, #8]
	base->PINCFG[pin].reg |= PORT_PINCFG_INEN;
    234a:	18d3      	adds	r3, r2, r3
    234c:	3340      	adds	r3, #64	; 0x40
    234e:	7819      	ldrb	r1, [r3, #0]
    2350:	4665      	mov	r5, ip
    2352:	4329      	orrs	r1, r5
    2354:	b2c9      	uxtb	r1, r1
    2356:	7019      	strb	r1, [r3, #0]
		arch_ioport_pin_to_base(pin)->OUTCLR.reg = arch_ioport_pin_to_mask(pin);
    2358:	6154      	str	r4, [r2, #20]
    235a:	3001      	adds	r0, #1
    for(uint8_t i = 0; i <= sizeof(sourcePins); i++) {
    235c:	42b8      	cmp	r0, r7
    235e:	d1e9      	bne.n	2334 <setLEDPinsAsOutputs+0x18>
    2360:	2000      	movs	r0, #0
        ioport_set_pin_level(sourcePins[i], 0);
    }
    for(uint8_t i = 0; i <= sizeof(sinkPins); i++) {
        ioport_set_pin_dir(sinkPins[i], IOPORT_DIR_OUTPUT);
    2362:	4f12      	ldr	r7, [pc, #72]	; (23ac <setLEDPinsAsOutputs+0x90>)
	return 1U << (pin & 0x1F);
    2364:	261f      	movs	r6, #31
    2366:	2301      	movs	r3, #1
    2368:	4699      	mov	r9, r3
	base->PINCFG[pin].reg |= PORT_PINCFG_INEN;
    236a:	2302      	movs	r3, #2
    236c:	469c      	mov	ip, r3
    236e:	5dc3      	ldrb	r3, [r0, r7]
	return pin >> 5;
    2370:	095a      	lsrs	r2, r3, #5
	return &PORT->Group[port];
    2372:	01d2      	lsls	r2, r2, #7
    2374:	490c      	ldr	r1, [pc, #48]	; (23a8 <setLEDPinsAsOutputs+0x8c>)
    2376:	4688      	mov	r8, r1
    2378:	4442      	add	r2, r8
	return 1U << (pin & 0x1F);
    237a:	0031      	movs	r1, r6
    237c:	4019      	ands	r1, r3
    237e:	464c      	mov	r4, r9
    2380:	408c      	lsls	r4, r1
		base->DIRSET.reg = arch_ioport_pin_to_mask(pin);
    2382:	6094      	str	r4, [r2, #8]
	base->PINCFG[pin].reg |= PORT_PINCFG_INEN;
    2384:	18d3      	adds	r3, r2, r3
    2386:	3340      	adds	r3, #64	; 0x40
    2388:	7819      	ldrb	r1, [r3, #0]
    238a:	4665      	mov	r5, ip
    238c:	4329      	orrs	r1, r5
    238e:	b2c9      	uxtb	r1, r1
    2390:	7019      	strb	r1, [r3, #0]
		arch_ioport_pin_to_base(pin)->OUTSET.reg = arch_ioport_pin_to_mask(pin);
    2392:	6194      	str	r4, [r2, #24]
    2394:	3001      	adds	r0, #1
    for(uint8_t i = 0; i <= sizeof(sinkPins); i++) {
    2396:	2806      	cmp	r0, #6
    2398:	d1e9      	bne.n	236e <setLEDPinsAsOutputs+0x52>
        ioport_set_pin_level(sinkPins[i], 1);
    }
}
    239a:	bc0c      	pop	{r2, r3}
    239c:	4690      	mov	r8, r2
    239e:	4699      	mov	r9, r3
    23a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    23a2:	46c0      	nop			; (mov r8, r8)
    23a4:	00007128 	.word	0x00007128
    23a8:	41004400 	.word	0x41004400
    23ac:	00007120 	.word	0x00007120

000023b0 <enable_timer>:

void enable_timer(void) {
    23b0:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    23b2:	4b13      	ldr	r3, [pc, #76]	; (2400 <enable_timer+0x50>)
    23b4:	681a      	ldr	r2, [r3, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    23b6:	7bd3      	ldrb	r3, [r2, #15]

	while (tc_is_syncing(module_inst)) {
    23b8:	b25b      	sxtb	r3, r3
    23ba:	2b00      	cmp	r3, #0
    23bc:	dbfb      	blt.n	23b6 <enable_timer+0x6>
		/* Wait for sync */
	}

	/* Enable TC module */
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    23be:	8813      	ldrh	r3, [r2, #0]
    23c0:	2102      	movs	r1, #2
    23c2:	430b      	orrs	r3, r1
    23c4:	8013      	strh	r3, [r2, #0]
    tc_enable(&tc_instance);
    tc_register_callback(&tc_instance,tc_callback_method,TC_CALLBACK_CC_CHANNEL0);
    23c6:	4c0e      	ldr	r4, [pc, #56]	; (2400 <enable_timer+0x50>)
    23c8:	2202      	movs	r2, #2
    23ca:	490e      	ldr	r1, [pc, #56]	; (2404 <enable_timer+0x54>)
    23cc:	0020      	movs	r0, r4
    23ce:	4b0e      	ldr	r3, [pc, #56]	; (2408 <enable_timer+0x58>)
    23d0:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module);


	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    23d2:	6820      	ldr	r0, [r4, #0]
    23d4:	4b0d      	ldr	r3, [pc, #52]	; (240c <enable_timer+0x5c>)
    23d6:	4798      	blx	r3
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    23d8:	4b0d      	ldr	r3, [pc, #52]	; (2410 <enable_timer+0x60>)
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    23da:	5c1b      	ldrb	r3, [r3, r0]
    23dc:	221f      	movs	r2, #31
    23de:	401a      	ands	r2, r3
    23e0:	2301      	movs	r3, #1
    23e2:	4093      	lsls	r3, r2
    23e4:	4a0b      	ldr	r2, [pc, #44]	; (2414 <enable_timer+0x64>)
    23e6:	6013      	str	r3, [r2, #0]

	/* Enable callback */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
		module->enable_callback_mask |= TC_INTFLAG_MC(1);
    23e8:	7e63      	ldrb	r3, [r4, #25]
    23ea:	2210      	movs	r2, #16
    23ec:	4313      	orrs	r3, r2
    23ee:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(1);
    23f0:	6823      	ldr	r3, [r4, #0]
    23f2:	2210      	movs	r2, #16
    23f4:	735a      	strb	r2, [r3, #13]
    tc_enable_callback(&tc_instance, TC_CALLBACK_CC_CHANNEL0);
    timeslotCounter = 0;
    23f6:	2200      	movs	r2, #0
    23f8:	4b07      	ldr	r3, [pc, #28]	; (2418 <enable_timer+0x68>)
    23fa:	801a      	strh	r2, [r3, #0]
}
    23fc:	bd10      	pop	{r4, pc}
    23fe:	46c0      	nop			; (mov r8, r8)
    2400:	20000268 	.word	0x20000268
    2404:	0000210d 	.word	0x0000210d
    2408:	00001cb5 	.word	0x00001cb5
    240c:	00001d7d 	.word	0x00001d7d
    2410:	00007134 	.word	0x00007134
    2414:	e000e100 	.word	0xe000e100
    2418:	200000bc 	.word	0x200000bc

0000241c <configure_tc>:
void configure_tc(void) {
    241c:	b500      	push	{lr}
    241e:	b08f      	sub	sp, #60	; 0x3c
	config->clock_source               = GCLK_GENERATOR_0;
    2420:	aa01      	add	r2, sp, #4
    2422:	2300      	movs	r3, #0
    2424:	7013      	strb	r3, [r2, #0]
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
    2426:	7093      	strb	r3, [r2, #2]
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
    2428:	2100      	movs	r1, #0
    242a:	8093      	strh	r3, [r2, #4]
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
    242c:	7191      	strb	r1, [r2, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
    242e:	8113      	strh	r3, [r2, #8]
	config->run_in_standby             = false;
    2430:	7051      	strb	r1, [r2, #1]
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
    2432:	7291      	strb	r1, [r2, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    2434:	72d1      	strb	r1, [r2, #11]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    2436:	7311      	strb	r1, [r2, #12]
	config->count_direction            = TC_COUNT_DIRECTION_UP;
    2438:	7391      	strb	r1, [r2, #14]
	config->oneshot                    = false;
    243a:	7351      	strb	r1, [r2, #13]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
    243c:	7411      	strb	r1, [r2, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
    243e:	6153      	str	r3, [r2, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
    2440:	6193      	str	r3, [r2, #24]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
    2442:	7711      	strb	r1, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
    2444:	6213      	str	r3, [r2, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
    2446:	6253      	str	r3, [r2, #36]	; 0x24
	config->counter_16_bit.value                   = 0x0000;
    2448:	8513      	strh	r3, [r2, #40]	; 0x28
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
    244a:	8593      	strh	r3, [r2, #44]	; 0x2c
    config_tc.counter_16_bit.compare_capture_channel[0] = 0xBB80;
    244c:	4b04      	ldr	r3, [pc, #16]	; (2460 <configure_tc+0x44>)
    244e:	8553      	strh	r3, [r2, #42]	; 0x2a
    tc_init(&tc_instance, TC3, &config_tc);
    2450:	4904      	ldr	r1, [pc, #16]	; (2464 <configure_tc+0x48>)
    2452:	4805      	ldr	r0, [pc, #20]	; (2468 <configure_tc+0x4c>)
    2454:	4b05      	ldr	r3, [pc, #20]	; (246c <configure_tc+0x50>)
    2456:	4798      	blx	r3
    enable_timer();
    2458:	4b05      	ldr	r3, [pc, #20]	; (2470 <configure_tc+0x54>)
    245a:	4798      	blx	r3
}
    245c:	b00f      	add	sp, #60	; 0x3c
    245e:	bd00      	pop	{pc}
    2460:	ffffbb80 	.word	0xffffbb80
    2464:	42002c00 	.word	0x42002c00
    2468:	20000268 	.word	0x20000268
    246c:	00001db5 	.word	0x00001db5
    2470:	000023b1 	.word	0x000023b1

00002474 <convertToGs>:
float convertToGs(uint8_t input) {
    2474:	b510      	push	{r4, lr}
    if(input > 127) {
    2476:	b243      	sxtb	r3, r0
    2478:	2b00      	cmp	r3, #0
    247a:	db06      	blt.n	248a <convertToGs+0x16>
        output = (float)(input)/64.0;
    247c:	4b07      	ldr	r3, [pc, #28]	; (249c <convertToGs+0x28>)
    247e:	4798      	blx	r3
    2480:	21f2      	movs	r1, #242	; 0xf2
    2482:	0589      	lsls	r1, r1, #22
    2484:	4b06      	ldr	r3, [pc, #24]	; (24a0 <convertToGs+0x2c>)
    2486:	4798      	blx	r3
}
    2488:	bd10      	pop	{r4, pc}
        output = (float)(input-256)/64.0;
    248a:	3801      	subs	r0, #1
    248c:	38ff      	subs	r0, #255	; 0xff
    248e:	4b05      	ldr	r3, [pc, #20]	; (24a4 <convertToGs+0x30>)
    2490:	4798      	blx	r3
    2492:	21f2      	movs	r1, #242	; 0xf2
    2494:	0589      	lsls	r1, r1, #22
    2496:	4b02      	ldr	r3, [pc, #8]	; (24a0 <convertToGs+0x2c>)
    2498:	4798      	blx	r3
    249a:	e7f5      	b.n	2488 <convertToGs+0x14>
    249c:	0000526d 	.word	0x0000526d
    24a0:	00004c15 	.word	0x00004c15
    24a4:	000051cd 	.word	0x000051cd

000024a8 <getAccelerometerValues>:
struct ACCELEROMETER_VALUES_TYPE getAccelerometerValues(void) {
    24a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    24aa:	46c6      	mov	lr, r8
    24ac:	b500      	push	{lr}
    24ae:	0004      	movs	r4, r0
    output.x = convertToGs(rd_buffer[1]);
    24b0:	4e0a      	ldr	r6, [pc, #40]	; (24dc <getAccelerometerValues+0x34>)
    24b2:	7870      	ldrb	r0, [r6, #1]
    24b4:	b2c0      	uxtb	r0, r0
    24b6:	4d0a      	ldr	r5, [pc, #40]	; (24e0 <getAccelerometerValues+0x38>)
    24b8:	47a8      	blx	r5
    24ba:	1c07      	adds	r7, r0, #0
    output.y = convertToGs(rd_buffer[3]);
    24bc:	78f0      	ldrb	r0, [r6, #3]
    24be:	b2c0      	uxtb	r0, r0
    24c0:	47a8      	blx	r5
    24c2:	4680      	mov	r8, r0
    output.z = convertToGs(rd_buffer[5]);
    24c4:	7970      	ldrb	r0, [r6, #5]
    24c6:	b2c0      	uxtb	r0, r0
    24c8:	47a8      	blx	r5
    return output;
    24ca:	6027      	str	r7, [r4, #0]
    24cc:	4643      	mov	r3, r8
    24ce:	6063      	str	r3, [r4, #4]
    24d0:	60a0      	str	r0, [r4, #8]
}
    24d2:	0020      	movs	r0, r4
    24d4:	bc04      	pop	{r2}
    24d6:	4690      	mov	r8, r2
    24d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    24da:	46c0      	nop			; (mov r8, r8)
    24dc:	200000b0 	.word	0x200000b0
    24e0:	00002475 	.word	0x00002475

000024e4 <configure_i2c_callbacks>:

void configure_i2c_callbacks(void) {
    24e4:	b570      	push	{r4, r5, r6, lr}
    /* Register callback function. */
    i2c_master_register_callback(&i2c_master_instance, i2c_write_complete_callback,
    24e6:	4c09      	ldr	r4, [pc, #36]	; (250c <configure_i2c_callbacks+0x28>)
    24e8:	2200      	movs	r2, #0
    24ea:	4909      	ldr	r1, [pc, #36]	; (2510 <configure_i2c_callbacks+0x2c>)
    24ec:	0020      	movs	r0, r4
    24ee:	4d09      	ldr	r5, [pc, #36]	; (2514 <configure_i2c_callbacks+0x30>)
    24f0:	47a8      	blx	r5
                                 I2C_MASTER_CALLBACK_WRITE_COMPLETE);
    i2c_master_register_callback(&i2c_master_instance, i2c_read_complete_callback,
    24f2:	2201      	movs	r2, #1
    24f4:	4908      	ldr	r1, [pc, #32]	; (2518 <configure_i2c_callbacks+0x34>)
    24f6:	0020      	movs	r0, r4
    24f8:	47a8      	blx	r5
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	/* Mark callback as enabled */
	module->enabled_callback |= (1 << callback_type);
    24fa:	7e63      	ldrb	r3, [r4, #25]
    24fc:	2201      	movs	r2, #1
    24fe:	4313      	orrs	r3, r2
    2500:	7663      	strb	r3, [r4, #25]
    2502:	7e63      	ldrb	r3, [r4, #25]
    2504:	3201      	adds	r2, #1
    2506:	4313      	orrs	r3, r2
    2508:	7663      	strb	r3, [r4, #25]
                                 I2C_MASTER_CALLBACK_READ_COMPLETE);
    i2c_master_enable_callback(&i2c_master_instance,
                               I2C_MASTER_CALLBACK_WRITE_COMPLETE);
    i2c_master_enable_callback(&i2c_master_instance,
                               I2C_MASTER_CALLBACK_READ_COMPLETE);
}
    250a:	bd70      	pop	{r4, r5, r6, pc}
    250c:	200001ac 	.word	0x200001ac
    2510:	00002149 	.word	0x00002149
    2514:	000009c5 	.word	0x000009c5
    2518:	00002109 	.word	0x00002109

0000251c <write_i2c_packet>:

void write_i2c_packet(void) {
    251c:	b500      	push	{lr}
    251e:	b083      	sub	sp, #12
    wr_packet.address = SLAVE_WRITE_ADDRESS;
    2520:	4906      	ldr	r1, [pc, #24]	; (253c <write_i2c_packet+0x20>)
    2522:	2319      	movs	r3, #25
    2524:	800b      	strh	r3, [r1, #0]
    wr_packet.data_length = 1;
    2526:	3b18      	subs	r3, #24
    2528:	804b      	strh	r3, [r1, #2]
    wr_packet.data = &whoAmILocation[0];
    252a:	4b05      	ldr	r3, [pc, #20]	; (2540 <write_i2c_packet+0x24>)
    252c:	604b      	str	r3, [r1, #4]
    volatile enum status_code write_result = i2c_master_write_packet_job_no_stop(&i2c_master_instance, &wr_packet);
    252e:	4805      	ldr	r0, [pc, #20]	; (2544 <write_i2c_packet+0x28>)
    2530:	4b05      	ldr	r3, [pc, #20]	; (2548 <write_i2c_packet+0x2c>)
    2532:	4798      	blx	r3
    2534:	466b      	mov	r3, sp
    2536:	71d8      	strb	r0, [r3, #7]
    //addressToWrite++;
}
    2538:	b003      	add	sp, #12
    253a:	bd00      	pop	{pc}
    253c:	20000198 	.word	0x20000198
    2540:	20000044 	.word	0x20000044
    2544:	200001ac 	.word	0x200001ac
    2548:	00000a25 	.word	0x00000a25

0000254c <requestAccerometerReading>:
void requestAccerometerReading(void) {
    254c:	b510      	push	{r4, lr}
    return 	accelerometerIsInitialized;
    254e:	4b04      	ldr	r3, [pc, #16]	; (2560 <requestAccerometerReading+0x14>)
    if(isAccelerometerInitialized()) {
    2550:	781b      	ldrb	r3, [r3, #0]
    2552:	2b00      	cmp	r3, #0
    2554:	d100      	bne.n	2558 <requestAccerometerReading+0xc>
}
    2556:	bd10      	pop	{r4, pc}
        write_i2c_packet();
    2558:	4b02      	ldr	r3, [pc, #8]	; (2564 <requestAccerometerReading+0x18>)
    255a:	4798      	blx	r3
}
    255c:	e7fb      	b.n	2556 <requestAccerometerReading+0xa>
    255e:	46c0      	nop			; (mov r8, r8)
    2560:	20000099 	.word	0x20000099
    2564:	0000251d 	.word	0x0000251d

00002568 <write_i2c_byte>:



void write_i2c_byte(uint8_t location, uint8_t byte) {
    2568:	b500      	push	{lr}
    256a:	b083      	sub	sp, #12
    wr_packet.address = SLAVE_WRITE_ADDRESS;
    256c:	4b08      	ldr	r3, [pc, #32]	; (2590 <write_i2c_byte+0x28>)
    256e:	2219      	movs	r2, #25
    2570:	801a      	strh	r2, [r3, #0]
    wr_packet.data_length = 2;
    2572:	3a17      	subs	r2, #23
    2574:	805a      	strh	r2, [r3, #2]
    wr_buffer[0] = location;
    2576:	4a07      	ldr	r2, [pc, #28]	; (2594 <write_i2c_byte+0x2c>)
    2578:	7010      	strb	r0, [r2, #0]
    wr_buffer[1] = byte;
    257a:	7051      	strb	r1, [r2, #1]
    wr_packet.data = &wr_buffer[0];
    257c:	605a      	str	r2, [r3, #4]
    volatile enum status_code write_result = i2c_master_write_packet_job(&i2c_master_instance, &wr_packet);
    257e:	0019      	movs	r1, r3
    2580:	4805      	ldr	r0, [pc, #20]	; (2598 <write_i2c_byte+0x30>)
    2582:	4b06      	ldr	r3, [pc, #24]	; (259c <write_i2c_byte+0x34>)
    2584:	4798      	blx	r3
    2586:	466b      	mov	r3, sp
    2588:	71d8      	strb	r0, [r3, #7]
}
    258a:	b003      	add	sp, #12
    258c:	bd00      	pop	{pc}
    258e:	46c0      	nop			; (mov r8, r8)
    2590:	20000198 	.word	0x20000198
    2594:	200000c8 	.word	0x200000c8
    2598:	200001ac 	.word	0x200001ac
    259c:	00000a01 	.word	0x00000a01

000025a0 <accelerometerLoop>:
void accelerometerLoop(void) {
    25a0:	b510      	push	{r4, lr}
    if(initialCountdown > 0) {
    25a2:	4b14      	ldr	r3, [pc, #80]	; (25f4 <accelerometerLoop+0x54>)
    25a4:	781b      	ldrb	r3, [r3, #0]
    25a6:	2b00      	cmp	r3, #0
    25a8:	d018      	beq.n	25dc <accelerometerLoop+0x3c>
        initialCountdown--;
    25aa:	3b01      	subs	r3, #1
    25ac:	b2db      	uxtb	r3, r3
    25ae:	4a11      	ldr	r2, [pc, #68]	; (25f4 <accelerometerLoop+0x54>)
    25b0:	7013      	strb	r3, [r2, #0]
    if(!accelerometerIsInitialized && initialCountdown == 0) {
    25b2:	4a11      	ldr	r2, [pc, #68]	; (25f8 <accelerometerLoop+0x58>)
    25b4:	7812      	ldrb	r2, [r2, #0]
    25b6:	2a00      	cmp	r2, #0
    25b8:	d101      	bne.n	25be <accelerometerLoop+0x1e>
    25ba:	2b00      	cmp	r3, #0
    25bc:	d012      	beq.n	25e4 <accelerometerLoop+0x44>
    requestAccerometerReading();
    25be:	4b0f      	ldr	r3, [pc, #60]	; (25fc <accelerometerLoop+0x5c>)
    25c0:	4798      	blx	r3
}
    25c2:	bd10      	pop	{r4, pc}
            write_i2c_byte(accelerometer_registers_to_configure[setupRegisterToWrite][0],accelerometer_registers_to_configure[setupRegisterToWrite][1]);
    25c4:	4a0e      	ldr	r2, [pc, #56]	; (2600 <accelerometerLoop+0x60>)
    25c6:	005b      	lsls	r3, r3, #1
    25c8:	18d1      	adds	r1, r2, r3
    25ca:	7849      	ldrb	r1, [r1, #1]
    25cc:	5c98      	ldrb	r0, [r3, r2]
    25ce:	4b0d      	ldr	r3, [pc, #52]	; (2604 <accelerometerLoop+0x64>)
    25d0:	4798      	blx	r3
            setupRegisterToWrite++;
    25d2:	4a0d      	ldr	r2, [pc, #52]	; (2608 <accelerometerLoop+0x68>)
    25d4:	7813      	ldrb	r3, [r2, #0]
    25d6:	3301      	adds	r3, #1
    25d8:	7013      	strb	r3, [r2, #0]
    25da:	e7f0      	b.n	25be <accelerometerLoop+0x1e>
    if(!accelerometerIsInitialized && initialCountdown == 0) {
    25dc:	4b06      	ldr	r3, [pc, #24]	; (25f8 <accelerometerLoop+0x58>)
    25de:	781b      	ldrb	r3, [r3, #0]
    25e0:	2b00      	cmp	r3, #0
    25e2:	d1ec      	bne.n	25be <accelerometerLoop+0x1e>
        if(setupRegisterToWrite >= (sizeof(accelerometer_registers_to_configure)/2)) {
    25e4:	4b08      	ldr	r3, [pc, #32]	; (2608 <accelerometerLoop+0x68>)
    25e6:	781b      	ldrb	r3, [r3, #0]
    25e8:	2b06      	cmp	r3, #6
    25ea:	d9eb      	bls.n	25c4 <accelerometerLoop+0x24>
            accelerometerIsInitialized = true;
    25ec:	2201      	movs	r2, #1
    25ee:	4b02      	ldr	r3, [pc, #8]	; (25f8 <accelerometerLoop+0x58>)
    25f0:	701a      	strb	r2, [r3, #0]
    25f2:	e7e4      	b.n	25be <accelerometerLoop+0x1e>
    25f4:	20000002 	.word	0x20000002
    25f8:	20000099 	.word	0x20000099
    25fc:	0000254d 	.word	0x0000254d
    2600:	00007110 	.word	0x00007110
    2604:	00002569 	.word	0x00002569
    2608:	200000b7 	.word	0x200000b7

0000260c <read_i2c_packet>:

void read_i2c_packet(void) {
    rd_packet.address = SLAVE_READ_ADDRESS;
    260c:	4b03      	ldr	r3, [pc, #12]	; (261c <read_i2c_packet+0x10>)
    260e:	2219      	movs	r2, #25
    2610:	801a      	strh	r2, [r3, #0]
    rd_packet.data_length = 6;
    2612:	3a13      	subs	r2, #19
    2614:	805a      	strh	r2, [r3, #2]
    rd_packet.data = &rd_buffer[0];
    2616:	4a02      	ldr	r2, [pc, #8]	; (2620 <read_i2c_packet+0x14>)
    2618:	605a      	str	r2, [r3, #4]
    //volatile enum status_code read_result = i2c_master_read_packet_job(&i2c_master_instance, &rd_packet);
}
    261a:	4770      	bx	lr
    261c:	2000025c 	.word	0x2000025c
    2620:	200000b0 	.word	0x200000b0

00002624 <configure_i2c>:
void configure_i2c(void) {
    2624:	b530      	push	{r4, r5, lr}
    2626:	b08f      	sub	sp, #60	; 0x3c
static inline void i2c_master_get_config_defaults(
		struct i2c_master_config *const config)
{
	/*Sanity check argument */
	Assert(config);
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
    2628:	ab01      	add	r3, sp, #4
    262a:	2264      	movs	r2, #100	; 0x64
    262c:	9201      	str	r2, [sp, #4]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
    262e:	4a26      	ldr	r2, [pc, #152]	; (26c8 <configure_i2c+0xa4>)
    2630:	9202      	str	r2, [sp, #8]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
    2632:	2200      	movs	r2, #0
    2634:	9203      	str	r2, [sp, #12]
#endif
	config->generator_source = GCLK_GENERATOR_0;
	config->run_in_standby   = false;
    2636:	761a      	strb	r2, [r3, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
    2638:	2180      	movs	r1, #128	; 0x80
    263a:	0389      	lsls	r1, r1, #14
    263c:	9105      	str	r1, [sp, #20]
	config->buffer_timeout   = 65535;
    263e:	2101      	movs	r1, #1
    2640:	4249      	negs	r1, r1
    2642:	82d9      	strh	r1, [r3, #22]
	config->unknown_bus_state_timeout = 65535;
    2644:	8299      	strh	r1, [r3, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->scl_low_timeout  = false;
    2646:	3125      	adds	r1, #37	; 0x25
    2648:	545a      	strb	r2, [r3, r1]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
    264a:	920b      	str	r2, [sp, #44]	; 0x2c
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
    264c:	3108      	adds	r1, #8
    264e:	545a      	strb	r2, [r3, r1]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
    2650:	3101      	adds	r1, #1
    2652:	545a      	strb	r2, [r3, r1]
	config->master_scl_low_extend_timeout  = false;
    2654:	3101      	adds	r1, #1
    2656:	545a      	strb	r2, [r3, r1]
#endif
	/* The typical value is 215ns */
	config->sda_scl_rise_time_ns = 215;
    2658:	32d7      	adds	r2, #215	; 0xd7
    265a:	861a      	strh	r2, [r3, #48]	; 0x30
    config_i2c_master.pinmux_pad0    = SERCOM2_PAD0_DEFAULT;
    265c:	4a1b      	ldr	r2, [pc, #108]	; (26cc <configure_i2c+0xa8>)
    265e:	9208      	str	r2, [sp, #32]
    config_i2c_master.pinmux_pad1    = SERCOM2_PAD1_DEFAULT;
    2660:	4a1b      	ldr	r2, [pc, #108]	; (26d0 <configure_i2c+0xac>)
    2662:	9209      	str	r2, [sp, #36]	; 0x24
    config_i2c_master.generator_source = GCLK_GENERATOR_3;
    2664:	2203      	movs	r2, #3
    2666:	731a      	strb	r2, [r3, #12]
    while(i2c_master_init(&i2c_master_instance, SERCOM2, &config_i2c_master)     \
    2668:	4d1a      	ldr	r5, [pc, #104]	; (26d4 <configure_i2c+0xb0>)
    266a:	4c1b      	ldr	r4, [pc, #108]	; (26d8 <configure_i2c+0xb4>)
    266c:	aa01      	add	r2, sp, #4
    266e:	491b      	ldr	r1, [pc, #108]	; (26dc <configure_i2c+0xb8>)
    2670:	0028      	movs	r0, r5
    2672:	47a0      	blx	r4
    2674:	2800      	cmp	r0, #0
    2676:	d1f9      	bne.n	266c <configure_i2c+0x48>
{
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    2678:	4b16      	ldr	r3, [pc, #88]	; (26d4 <configure_i2c+0xb0>)
    267a:	681c      	ldr	r4, [r3, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    267c:	2207      	movs	r2, #7
    267e:	69e3      	ldr	r3, [r4, #28]
	while (i2c_master_is_syncing(module)) {
    2680:	421a      	tst	r2, r3
    2682:	d1fc      	bne.n	267e <configure_i2c+0x5a>

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);

	/* Enable module */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    2684:	6823      	ldr	r3, [r4, #0]
    2686:	2202      	movs	r2, #2
    2688:	4313      	orrs	r3, r2
    268a:	6023      	str	r3, [r4, #0]

#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    268c:	4d11      	ldr	r5, [pc, #68]	; (26d4 <configure_i2c+0xb0>)
    268e:	6828      	ldr	r0, [r5, #0]
    2690:	4b13      	ldr	r3, [pc, #76]	; (26e0 <configure_i2c+0xbc>)
    2692:	4798      	blx	r3
    2694:	231f      	movs	r3, #31
    2696:	4018      	ands	r0, r3
    2698:	3b1e      	subs	r3, #30
    269a:	4083      	lsls	r3, r0
    269c:	4a11      	ldr	r2, [pc, #68]	; (26e4 <configure_i2c+0xc0>)
    269e:	6013      	str	r3, [r2, #0]
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
		timeout_counter++;
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    26a0:	88e8      	ldrh	r0, [r5, #6]
	uint32_t timeout_counter = 0;
    26a2:	2300      	movs	r3, #0
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    26a4:	2110      	movs	r1, #16
    26a6:	8b62      	ldrh	r2, [r4, #26]
    26a8:	420a      	tst	r2, r1
    26aa:	d104      	bne.n	26b6 <configure_i2c+0x92>
		timeout_counter++;
    26ac:	3301      	adds	r3, #1
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    26ae:	4283      	cmp	r3, r0
    26b0:	d3f9      	bcc.n	26a6 <configure_i2c+0x82>
			/* Timeout, force bus state to idle */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    26b2:	2310      	movs	r3, #16
    26b4:	8363      	strh	r3, [r4, #26]
    write_i2c_byte(0x24,0b10000000);
    26b6:	2180      	movs	r1, #128	; 0x80
    26b8:	2024      	movs	r0, #36	; 0x24
    26ba:	4b0b      	ldr	r3, [pc, #44]	; (26e8 <configure_i2c+0xc4>)
    26bc:	4798      	blx	r3
    read_i2c_packet();
    26be:	4b0b      	ldr	r3, [pc, #44]	; (26ec <configure_i2c+0xc8>)
    26c0:	4798      	blx	r3
}
    26c2:	b00f      	add	sp, #60	; 0x3c
    26c4:	bd30      	pop	{r4, r5, pc}
    26c6:	46c0      	nop			; (mov r8, r8)
    26c8:	00000d48 	.word	0x00000d48
    26cc:	00080003 	.word	0x00080003
    26d0:	00090003 	.word	0x00090003
    26d4:	200001ac 	.word	0x200001ac
    26d8:	00000451 	.word	0x00000451
    26dc:	42001000 	.word	0x42001000
    26e0:	00000e09 	.word	0x00000e09
    26e4:	e000e100 	.word	0xe000e100
    26e8:	00002569 	.word	0x00002569
    26ec:	0000260d 	.word	0x0000260d

000026f0 <eic_init>:

#include "hal_gpio.h"
HAL_GPIO_PIN(BUTTON,   A, 10)

void eic_init(void)
{
    26f0:	b510      	push	{r4, lr}
HAL_GPIO_PIN(BUTTON,   A, 10)
    26f2:	4b12      	ldr	r3, [pc, #72]	; (273c <eic_init+0x4c>)
    26f4:	2180      	movs	r1, #128	; 0x80
    26f6:	00c9      	lsls	r1, r1, #3
    26f8:	6059      	str	r1, [r3, #4]
    26fa:	224a      	movs	r2, #74	; 0x4a
    26fc:	5c98      	ldrb	r0, [r3, r2]
    26fe:	2402      	movs	r4, #2
    2700:	4320      	orrs	r0, r4
    2702:	5498      	strb	r0, [r3, r2]
    2704:	5c98      	ldrb	r0, [r3, r2]
    2706:	3402      	adds	r4, #2
    2708:	43a0      	bics	r0, r4
    270a:	5498      	strb	r0, [r3, r2]
    270c:	5c98      	ldrb	r0, [r3, r2]
    270e:	3c03      	subs	r4, #3
    2710:	4320      	orrs	r0, r4
    2712:	5498      	strb	r0, [r3, r2]
    2714:	2035      	movs	r0, #53	; 0x35
    2716:	5c1a      	ldrb	r2, [r3, r0]
    2718:	340e      	adds	r4, #14
    271a:	43a2      	bics	r2, r4
    271c:	541a      	strb	r2, [r3, r0]
	HAL_GPIO_BUTTON_in();
	//HAL_GPIO_BUTTON_pullup();
	HAL_GPIO_BUTTON_pmuxen(PORT_PMUX_PMUXE_A_Val);

	GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(EIC_GCLK_ID) |
    271e:	4a08      	ldr	r2, [pc, #32]	; (2740 <eic_init+0x50>)
    2720:	4b08      	ldr	r3, [pc, #32]	; (2744 <eic_init+0x54>)
    2722:	805a      	strh	r2, [r3, #2]
	GCLK_CLKCTRL_CLKEN | GCLK_CLKCTRL_GEN(0);

	EIC->CTRL.reg = EIC_CTRL_ENABLE;
    2724:	4b08      	ldr	r3, [pc, #32]	; (2748 <eic_init+0x58>)
    2726:	2202      	movs	r2, #2
    2728:	701a      	strb	r2, [r3, #0]

	EIC->CONFIG[1].reg = EIC_CONFIG_SENSE2_RISE;
    272a:	32fe      	adds	r2, #254	; 0xfe
    272c:	61da      	str	r2, [r3, #28]

	EIC->WAKEUP.reg = EIC_WAKEUP_WAKEUPEN10;
    272e:	6159      	str	r1, [r3, #20]
	EIC->INTENSET.reg = EIC_INTENSET_EXTINT10;
    2730:	60d9      	str	r1, [r3, #12]

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
    2732:	3af0      	subs	r2, #240	; 0xf0
    2734:	4b05      	ldr	r3, [pc, #20]	; (274c <eic_init+0x5c>)
    2736:	601a      	str	r2, [r3, #0]

	NVIC_EnableIRQ(EIC_IRQn);
}
    2738:	bd10      	pop	{r4, pc}
    273a:	46c0      	nop			; (mov r8, r8)
    273c:	41004400 	.word	0x41004400
    2740:	00004005 	.word	0x00004005
    2744:	40000c00 	.word	0x40000c00
    2748:	40001800 	.word	0x40001800
    274c:	e000e100 	.word	0xe000e100

00002750 <getRTCTime>:
	rtc_calendar_set_time(&rtc_object, &currentTime);
	//rtc_calendar_get_time(&rtc_object , &currentTime);
	getRTCTime();
}

void getRTCTime(void){
    2750:	b510      	push	{r4, lr}
	rtc_calendar_get_time(&rtc_object , &currentTime);
    2752:	4c09      	ldr	r4, [pc, #36]	; (2778 <getRTCTime+0x28>)
    2754:	0021      	movs	r1, r4
    2756:	4809      	ldr	r0, [pc, #36]	; (277c <getRTCTime+0x2c>)
    2758:	4b09      	ldr	r3, [pc, #36]	; (2780 <getRTCTime+0x30>)
    275a:	4798      	blx	r3
	twelveHourTime = currentTime.hour * 3600 + currentTime.minute * 60 + currentTime.second;
    275c:	78a3      	ldrb	r3, [r4, #2]
    275e:	7860      	ldrb	r0, [r4, #1]
    2760:	7821      	ldrb	r1, [r4, #0]
    2762:	22e1      	movs	r2, #225	; 0xe1
    2764:	0112      	lsls	r2, r2, #4
    2766:	4353      	muls	r3, r2
    2768:	0102      	lsls	r2, r0, #4
    276a:	1a12      	subs	r2, r2, r0
    276c:	0092      	lsls	r2, r2, #2
    276e:	189b      	adds	r3, r3, r2
    2770:	18cb      	adds	r3, r1, r3
    2772:	4a04      	ldr	r2, [pc, #16]	; (2784 <getRTCTime+0x34>)
    2774:	6013      	str	r3, [r2, #0]
}
    2776:	bd10      	pop	{r4, pc}
    2778:	20000294 	.word	0x20000294
    277c:	200001a4 	.word	0x200001a4
    2780:	00000345 	.word	0x00000345
    2784:	200000c0 	.word	0x200000c0

00002788 <configure_rtc>:
void configure_rtc(void){
    2788:	b570      	push	{r4, r5, r6, lr}
	/* Initialize and set time structure to default */
	struct rtc_calendar_time time;
	rtc_calendar_get_time_defaults(&time);

	/* Set defaults into configuration structure */
	config->prescaler           = RTC_CALENDAR_PRESCALER_DIV_1024;
    278a:	4a15      	ldr	r2, [pc, #84]	; (27e0 <configure_rtc+0x58>)
    278c:	23a0      	movs	r3, #160	; 0xa0
    278e:	011b      	lsls	r3, r3, #4
    2790:	8013      	strh	r3, [r2, #0]
	config->clear_on_match      = false;
    2792:	2400      	movs	r4, #0
    2794:	7094      	strb	r4, [r2, #2]
#ifdef FEATURE_RTC_CONTINUOUSLY_UPDATED
	config->continuously_update = false;
    2796:	70d4      	strb	r4, [r2, #3]
#endif
	config->clock_24h           = false;
    2798:	7114      	strb	r4, [r2, #4]
	config->year_init_value     = 2000;
    279a:	23fa      	movs	r3, #250	; 0xfa
    279c:	00db      	lsls	r3, r3, #3
    279e:	80d3      	strh	r3, [r2, #6]
#if (SAML21XXXB) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	config->enable_read_sync    = true;
#endif
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
		config->alarm[i].time = time;
    27a0:	7214      	strb	r4, [r2, #8]
    27a2:	7254      	strb	r4, [r2, #9]
    27a4:	7294      	strb	r4, [r2, #10]
    27a6:	72d4      	strb	r4, [r2, #11]
    27a8:	2101      	movs	r1, #1
    27aa:	7311      	strb	r1, [r2, #12]
    27ac:	7351      	strb	r1, [r2, #13]
    27ae:	81d3      	strh	r3, [r2, #14]
		config->alarm[i].mask = RTC_CALENDAR_ALARM_MASK_YEAR;
    27b0:	2306      	movs	r3, #6
    27b2:	7413      	strb	r3, [r2, #16]
	rtc_calendar_init(&rtc_object, RTC, &rtc_config_object);
    27b4:	4d0b      	ldr	r5, [pc, #44]	; (27e4 <configure_rtc+0x5c>)
    27b6:	490c      	ldr	r1, [pc, #48]	; (27e8 <configure_rtc+0x60>)
    27b8:	0028      	movs	r0, r5
    27ba:	4b0c      	ldr	r3, [pc, #48]	; (27ec <configure_rtc+0x64>)
    27bc:	4798      	blx	r3
	rtc_calendar_enable(&rtc_object);
    27be:	0028      	movs	r0, r5
    27c0:	4b0b      	ldr	r3, [pc, #44]	; (27f0 <configure_rtc+0x68>)
    27c2:	4798      	blx	r3
	currentTime.hour = 9;
    27c4:	490b      	ldr	r1, [pc, #44]	; (27f4 <configure_rtc+0x6c>)
    27c6:	2309      	movs	r3, #9
    27c8:	708b      	strb	r3, [r1, #2]
	currentTime.pm = 0;
    27ca:	70cc      	strb	r4, [r1, #3]
	currentTime.minute = 29;
    27cc:	3314      	adds	r3, #20
    27ce:	704b      	strb	r3, [r1, #1]
	currentTime.second = 15;
    27d0:	3b0e      	subs	r3, #14
    27d2:	700b      	strb	r3, [r1, #0]
	rtc_calendar_set_time(&rtc_object, &currentTime);
    27d4:	0028      	movs	r0, r5
    27d6:	4b08      	ldr	r3, [pc, #32]	; (27f8 <configure_rtc+0x70>)
    27d8:	4798      	blx	r3
	getRTCTime();
    27da:	4b08      	ldr	r3, [pc, #32]	; (27fc <configure_rtc+0x74>)
    27dc:	4798      	blx	r3
}
    27de:	bd70      	pop	{r4, r5, r6, pc}
    27e0:	20000138 	.word	0x20000138
    27e4:	200001a4 	.word	0x200001a4
    27e8:	40001400 	.word	0x40001400
    27ec:	000003bd 	.word	0x000003bd
    27f0:	00000261 	.word	0x00000261
    27f4:	20000294 	.word	0x20000294
    27f8:	0000032d 	.word	0x0000032d
    27fc:	00002751 	.word	0x00002751

00002800 <updateTime>:

void updateTime(void){
	twelveHourTime++;
    2800:	4a02      	ldr	r2, [pc, #8]	; (280c <updateTime+0xc>)
    2802:	6813      	ldr	r3, [r2, #0]
    2804:	3301      	adds	r3, #1
    2806:	6013      	str	r3, [r2, #0]
}
    2808:	4770      	bx	lr
    280a:	46c0      	nop			; (mov r8, r8)
    280c:	200000c0 	.word	0x200000c0

00002810 <displayTimeSimple>:
#define TWELVEHOURS 43200
#define ONEHOUR 3600
#define ONEMINUTE 60

void displayTimeSimple(void){
    2810:	b5f0      	push	{r4, r5, r6, r7, lr}
    2812:	46c6      	mov	lr, r8
    2814:	b500      	push	{lr}

uint32_t getTime(void){
	return twelveHourTime;
    2816:	4b1c      	ldr	r3, [pc, #112]	; (2888 <displayTimeSimple+0x78>)
    2818:	6818      	ldr	r0, [r3, #0]
	uint32_t timeVal = getTime();
	timeVal = timeVal % TWELVEHOURS;
    281a:	4d1c      	ldr	r5, [pc, #112]	; (288c <displayTimeSimple+0x7c>)
    281c:	491c      	ldr	r1, [pc, #112]	; (2890 <displayTimeSimple+0x80>)
    281e:	47a8      	blx	r5
    2820:	000c      	movs	r4, r1
	uint8_t hours = (5*timeVal)/ONEHOUR;
    2822:	0088      	lsls	r0, r1, #2
    2824:	1840      	adds	r0, r0, r1
    2826:	4e1b      	ldr	r6, [pc, #108]	; (2894 <displayTimeSimple+0x84>)
    2828:	21e1      	movs	r1, #225	; 0xe1
    282a:	0109      	lsls	r1, r1, #4
    282c:	47b0      	blx	r6
    282e:	0007      	movs	r7, r0
	uint8_t mins = (timeVal % ONEHOUR)/60;
    2830:	21e1      	movs	r1, #225	; 0xe1
    2832:	0109      	lsls	r1, r1, #4
    2834:	0020      	movs	r0, r4
    2836:	47a8      	blx	r5
    2838:	0008      	movs	r0, r1
    283a:	213c      	movs	r1, #60	; 0x3c
    283c:	47b0      	blx	r6
    283e:	0006      	movs	r6, r0
    2840:	b2c3      	uxtb	r3, r0
    2842:	4698      	mov	r8, r3
	uint8_t seconds = timeVal % ONEMINUTE;
    2844:	213c      	movs	r1, #60	; 0x3c
    2846:	0020      	movs	r0, r4
    2848:	47a8      	blx	r5
    284a:	000c      	movs	r4, r1
    284c:	b2cd      	uxtb	r5, r1
	turnOffAllLEDS();	
    284e:	4b12      	ldr	r3, [pc, #72]	; (2898 <displayTimeSimple+0x88>)
    2850:	4798      	blx	r3
	if(led < 60 && led >= 0){
    2852:	b2fb      	uxtb	r3, r7
    2854:	2b3b      	cmp	r3, #59	; 0x3b
    2856:	d804      	bhi.n	2862 <displayTimeSimple+0x52>
		LEDdim[led] = pwm;
    2858:	23ff      	movs	r3, #255	; 0xff
    285a:	401f      	ands	r7, r3
    285c:	220a      	movs	r2, #10
    285e:	4b0f      	ldr	r3, [pc, #60]	; (289c <displayTimeSimple+0x8c>)
    2860:	55da      	strb	r2, [r3, r7]
	if(led < 60 && led >= 0){
    2862:	4643      	mov	r3, r8
    2864:	2b3b      	cmp	r3, #59	; 0x3b
    2866:	d804      	bhi.n	2872 <displayTimeSimple+0x62>
		LEDdim[led] = pwm;
    2868:	23ff      	movs	r3, #255	; 0xff
    286a:	401e      	ands	r6, r3
    286c:	220a      	movs	r2, #10
    286e:	4b0b      	ldr	r3, [pc, #44]	; (289c <displayTimeSimple+0x8c>)
    2870:	559a      	strb	r2, [r3, r6]
	if(led < 60 && led >= 0){
    2872:	2d3b      	cmp	r5, #59	; 0x3b
    2874:	d804      	bhi.n	2880 <displayTimeSimple+0x70>
		LEDdim[led] = pwm;
    2876:	23ff      	movs	r3, #255	; 0xff
    2878:	401c      	ands	r4, r3
    287a:	220a      	movs	r2, #10
    287c:	4b07      	ldr	r3, [pc, #28]	; (289c <displayTimeSimple+0x8c>)
    287e:	551a      	strb	r2, [r3, r4]
	switchLED(hours, 10);
	switchLED(mins, 10);
	switchLED(seconds, 10);
	
}
    2880:	bc04      	pop	{r2}
    2882:	4690      	mov	r8, r2
    2884:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2886:	46c0      	nop			; (mov r8, r8)
    2888:	200000c0 	.word	0x200000c0
    288c:	000044a1 	.word	0x000044a1
    2890:	0000a8c0 	.word	0x0000a8c0
    2894:	00004395 	.word	0x00004395
    2898:	000022fd 	.word	0x000022fd
    289c:	2000029c 	.word	0x2000029c

000028a0 <singleLEDphysics>:


void singleLEDphysics() {
    28a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    28a2:	46de      	mov	lr, fp
    28a4:	4657      	mov	r7, sl
    28a6:	464e      	mov	r6, r9
    28a8:	4645      	mov	r5, r8
    28aa:	b5e0      	push	{r5, r6, r7, lr}
    28ac:	b08b      	sub	sp, #44	; 0x2c

    static float position = 0;
    static uint8_t currentPosition = 0;
    static uint8_t lastPosition = 0;

    struct ACCELEROMETER_VALUES_TYPE accelValues = getAccelerometerValues();
    28ae:	a807      	add	r0, sp, #28
    28b0:	4b75      	ldr	r3, [pc, #468]	; (2a88 <singleLEDphysics+0x1e8>)
    28b2:	4798      	blx	r3
    //volatile float locationRadians = atan(accelValues.y/accelValues.x);
    //int output = (uint8_t)(60*((locationRadians+(M_PI/2.0))/(M_PI)));

    float force = 0.1;

    force = cos(2*M_PI*position/60.0)*accelValues.y + sin(2*M_PI*position/60.0)*accelValues.x;
    28b4:	4b75      	ldr	r3, [pc, #468]	; (2a8c <singleLEDphysics+0x1ec>)
    28b6:	681b      	ldr	r3, [r3, #0]
    28b8:	4a75      	ldr	r2, [pc, #468]	; (2a90 <singleLEDphysics+0x1f0>)
    28ba:	4691      	mov	r9, r2
    28bc:	9302      	str	r3, [sp, #8]
    28be:	1c18      	adds	r0, r3, #0
    28c0:	4790      	blx	r2
    28c2:	4d74      	ldr	r5, [pc, #464]	; (2a94 <singleLEDphysics+0x1f4>)
    28c4:	4a74      	ldr	r2, [pc, #464]	; (2a98 <singleLEDphysics+0x1f8>)
    28c6:	4b75      	ldr	r3, [pc, #468]	; (2a9c <singleLEDphysics+0x1fc>)
    28c8:	9004      	str	r0, [sp, #16]
    28ca:	9105      	str	r1, [sp, #20]
    28cc:	47a8      	blx	r5
    28ce:	2200      	movs	r2, #0
    28d0:	4b73      	ldr	r3, [pc, #460]	; (2aa0 <singleLEDphysics+0x200>)
    28d2:	4c74      	ldr	r4, [pc, #464]	; (2aa4 <singleLEDphysics+0x204>)
    28d4:	47a0      	blx	r4
    28d6:	0006      	movs	r6, r0
    28d8:	000f      	movs	r7, r1
    28da:	4b73      	ldr	r3, [pc, #460]	; (2aa8 <singleLEDphysics+0x208>)
    28dc:	4798      	blx	r3
    28de:	9000      	str	r0, [sp, #0]
    28e0:	9101      	str	r1, [sp, #4]
    28e2:	0030      	movs	r0, r6
    28e4:	0039      	movs	r1, r7
    28e6:	4b71      	ldr	r3, [pc, #452]	; (2aac <singleLEDphysics+0x20c>)
    28e8:	4798      	blx	r3
    28ea:	0006      	movs	r6, r0
    28ec:	000f      	movs	r7, r1
    28ee:	9808      	ldr	r0, [sp, #32]
    28f0:	47c8      	blx	r9
    28f2:	9a00      	ldr	r2, [sp, #0]
    28f4:	9b01      	ldr	r3, [sp, #4]
    28f6:	47a8      	blx	r5
    28f8:	9000      	str	r0, [sp, #0]
    28fa:	9101      	str	r1, [sp, #4]
    28fc:	9807      	ldr	r0, [sp, #28]
    28fe:	47c8      	blx	r9
    2900:	0032      	movs	r2, r6
    2902:	003b      	movs	r3, r7
    2904:	47a8      	blx	r5
    2906:	0002      	movs	r2, r0
    2908:	000b      	movs	r3, r1
    290a:	4f69      	ldr	r7, [pc, #420]	; (2ab0 <singleLEDphysics+0x210>)
    290c:	9800      	ldr	r0, [sp, #0]
    290e:	9901      	ldr	r1, [sp, #4]
    2910:	47b8      	blx	r7
    2912:	4e68      	ldr	r6, [pc, #416]	; (2ab4 <singleLEDphysics+0x214>)
    2914:	47b0      	blx	r6

    static float velocity = 0;
    velocity = 0.85*velocity + force;
    2916:	47c8      	blx	r9
    2918:	9000      	str	r0, [sp, #0]
    291a:	9101      	str	r1, [sp, #4]
    291c:	4c66      	ldr	r4, [pc, #408]	; (2ab8 <singleLEDphysics+0x218>)
    291e:	6820      	ldr	r0, [r4, #0]
    2920:	47c8      	blx	r9
    2922:	4a66      	ldr	r2, [pc, #408]	; (2abc <singleLEDphysics+0x21c>)
    2924:	4b66      	ldr	r3, [pc, #408]	; (2ac0 <singleLEDphysics+0x220>)
    2926:	47a8      	blx	r5
    2928:	0002      	movs	r2, r0
    292a:	000b      	movs	r3, r1
    292c:	9800      	ldr	r0, [sp, #0]
    292e:	9901      	ldr	r1, [sp, #4]
    2930:	47b8      	blx	r7
    2932:	47b0      	blx	r6
    2934:	9000      	str	r0, [sp, #0]
    2936:	6020      	str	r0, [r4, #0]
    float output = 100*velocity + position;
    2938:	4962      	ldr	r1, [pc, #392]	; (2ac4 <singleLEDphysics+0x224>)
    293a:	4b63      	ldr	r3, [pc, #396]	; (2ac8 <singleLEDphysics+0x228>)
    293c:	4798      	blx	r3
    293e:	9902      	ldr	r1, [sp, #8]
    2940:	4b62      	ldr	r3, [pc, #392]	; (2acc <singleLEDphysics+0x22c>)
    2942:	4798      	blx	r3

    position = (0.95)*position + (0.05)*output;
    2944:	47c8      	blx	r9
    2946:	4a62      	ldr	r2, [pc, #392]	; (2ad0 <singleLEDphysics+0x230>)
    2948:	4b62      	ldr	r3, [pc, #392]	; (2ad4 <singleLEDphysics+0x234>)
    294a:	47a8      	blx	r5
    294c:	9002      	str	r0, [sp, #8]
    294e:	9103      	str	r1, [sp, #12]
    2950:	4a61      	ldr	r2, [pc, #388]	; (2ad8 <singleLEDphysics+0x238>)
    2952:	4b62      	ldr	r3, [pc, #392]	; (2adc <singleLEDphysics+0x23c>)
    2954:	9804      	ldr	r0, [sp, #16]
    2956:	9905      	ldr	r1, [sp, #20]
    2958:	47a8      	blx	r5
    295a:	0002      	movs	r2, r0
    295c:	000b      	movs	r3, r1
    295e:	9802      	ldr	r0, [sp, #8]
    2960:	9903      	ldr	r1, [sp, #12]
    2962:	47b8      	blx	r7
    2964:	47b0      	blx	r6
    2966:	1c04      	adds	r4, r0, #0
    if(position > 60) {
    2968:	495d      	ldr	r1, [pc, #372]	; (2ae0 <singleLEDphysics+0x240>)
    296a:	4b5e      	ldr	r3, [pc, #376]	; (2ae4 <singleLEDphysics+0x244>)
    296c:	4798      	blx	r3
    296e:	2800      	cmp	r0, #0
    2970:	d15b      	bne.n	2a2a <singleLEDphysics+0x18a>
    position = (0.95)*position + (0.05)*output;
    2972:	4b46      	ldr	r3, [pc, #280]	; (2a8c <singleLEDphysics+0x1ec>)
    2974:	601c      	str	r4, [r3, #0]
        position = position - 60;
    }
    if(position < 0) {
    2976:	4b45      	ldr	r3, [pc, #276]	; (2a8c <singleLEDphysics+0x1ec>)
    2978:	681c      	ldr	r4, [r3, #0]
    297a:	2100      	movs	r1, #0
    297c:	1c20      	adds	r0, r4, #0
    297e:	4b5a      	ldr	r3, [pc, #360]	; (2ae8 <singleLEDphysics+0x248>)
    2980:	4798      	blx	r3
    2982:	2800      	cmp	r0, #0
    2984:	d158      	bne.n	2a38 <singleLEDphysics+0x198>
        position = position + 60;
    }
    if(position > currentPosition + 0.5 || position < currentPosition - 0.5) {
    2986:	4b41      	ldr	r3, [pc, #260]	; (2a8c <singleLEDphysics+0x1ec>)
    2988:	681e      	ldr	r6, [r3, #0]
    298a:	1c30      	adds	r0, r6, #0
    298c:	4b40      	ldr	r3, [pc, #256]	; (2a90 <singleLEDphysics+0x1f0>)
    298e:	4798      	blx	r3
    2990:	9002      	str	r0, [sp, #8]
    2992:	9103      	str	r1, [sp, #12]
    2994:	4b55      	ldr	r3, [pc, #340]	; (2aec <singleLEDphysics+0x24c>)
    2996:	7818      	ldrb	r0, [r3, #0]
    2998:	4b55      	ldr	r3, [pc, #340]	; (2af0 <singleLEDphysics+0x250>)
    299a:	4798      	blx	r3
    299c:	0004      	movs	r4, r0
    299e:	000d      	movs	r5, r1
    29a0:	2200      	movs	r2, #0
    29a2:	4b54      	ldr	r3, [pc, #336]	; (2af4 <singleLEDphysics+0x254>)
    29a4:	4f42      	ldr	r7, [pc, #264]	; (2ab0 <singleLEDphysics+0x210>)
    29a6:	47b8      	blx	r7
    29a8:	0002      	movs	r2, r0
    29aa:	000b      	movs	r3, r1
    29ac:	9802      	ldr	r0, [sp, #8]
    29ae:	9903      	ldr	r1, [sp, #12]
    29b0:	4f51      	ldr	r7, [pc, #324]	; (2af8 <singleLEDphysics+0x258>)
    29b2:	47b8      	blx	r7
    29b4:	2800      	cmp	r0, #0
    29b6:	d10d      	bne.n	29d4 <singleLEDphysics+0x134>
    29b8:	2200      	movs	r2, #0
    29ba:	4b4e      	ldr	r3, [pc, #312]	; (2af4 <singleLEDphysics+0x254>)
    29bc:	0020      	movs	r0, r4
    29be:	0029      	movs	r1, r5
    29c0:	4c4e      	ldr	r4, [pc, #312]	; (2afc <singleLEDphysics+0x25c>)
    29c2:	47a0      	blx	r4
    29c4:	0002      	movs	r2, r0
    29c6:	000b      	movs	r3, r1
    29c8:	9802      	ldr	r0, [sp, #8]
    29ca:	9903      	ldr	r1, [sp, #12]
    29cc:	4c4c      	ldr	r4, [pc, #304]	; (2b00 <singleLEDphysics+0x260>)
    29ce:	47a0      	blx	r4
    29d0:	2800      	cmp	r0, #0
    29d2:	d004      	beq.n	29de <singleLEDphysics+0x13e>
        currentPosition = (uint8_t)position;
    29d4:	1c30      	adds	r0, r6, #0
    29d6:	4b4b      	ldr	r3, [pc, #300]	; (2b04 <singleLEDphysics+0x264>)
    29d8:	4798      	blx	r3
    29da:	4b44      	ldr	r3, [pc, #272]	; (2aec <singleLEDphysics+0x24c>)
    29dc:	7018      	strb	r0, [r3, #0]
    }
    //currentPosition = (uint8_t)position;
    if(currentPosition != lastPosition) {
    29de:	4b43      	ldr	r3, [pc, #268]	; (2aec <singleLEDphysics+0x24c>)
    29e0:	781e      	ldrb	r6, [r3, #0]
    29e2:	4b49      	ldr	r3, [pc, #292]	; (2b08 <singleLEDphysics+0x268>)
    29e4:	781b      	ldrb	r3, [r3, #0]
    29e6:	42b3      	cmp	r3, r6
    29e8:	d047      	beq.n	2a7a <singleLEDphysics+0x1da>
        turnOffAllLEDS();
    29ea:	4b48      	ldr	r3, [pc, #288]	; (2b0c <singleLEDphysics+0x26c>)
    29ec:	4798      	blx	r3
	if(led < 60 && led >= 0){
    29ee:	2e3b      	cmp	r6, #59	; 0x3b
    29f0:	d802      	bhi.n	29f8 <singleLEDphysics+0x158>
		LEDdim[led] = pwm;
    29f2:	220a      	movs	r2, #10
    29f4:	4b46      	ldr	r3, [pc, #280]	; (2b10 <singleLEDphysics+0x270>)
    29f6:	559a      	strb	r2, [r3, r6]
        //switchLED(lastPosition, true);
        switchLED(currentPosition, 10);
        for(uint8_t i = 1; i <= (uint8_t)abs(velocity*5); i++) {
    29f8:	4946      	ldr	r1, [pc, #280]	; (2b14 <singleLEDphysics+0x274>)
    29fa:	9800      	ldr	r0, [sp, #0]
    29fc:	4b32      	ldr	r3, [pc, #200]	; (2ac8 <singleLEDphysics+0x228>)
    29fe:	4798      	blx	r3
    2a00:	4b45      	ldr	r3, [pc, #276]	; (2b18 <singleLEDphysics+0x278>)
    2a02:	4798      	blx	r3
    2a04:	17c3      	asrs	r3, r0, #31
    2a06:	18c0      	adds	r0, r0, r3
    2a08:	4058      	eors	r0, r3
    2a0a:	b2c3      	uxtb	r3, r0
    2a0c:	4698      	mov	r8, r3
    2a0e:	2b00      	cmp	r3, #0
    2a10:	d031      	beq.n	2a76 <singleLEDphysics+0x1d6>
    2a12:	1c74      	adds	r4, r6, #1
    2a14:	b2e4      	uxtb	r4, r4
    2a16:	1e75      	subs	r5, r6, #1
    2a18:	b2ed      	uxtb	r5, r5
            if(velocity > 0) {
    2a1a:	4f32      	ldr	r7, [pc, #200]	; (2ae4 <singleLEDphysics+0x244>)
    2a1c:	230a      	movs	r3, #10
    2a1e:	469b      	mov	fp, r3
    2a20:	4b3b      	ldr	r3, [pc, #236]	; (2b10 <singleLEDphysics+0x270>)
    2a22:	4699      	mov	r9, r3
    2a24:	2300      	movs	r3, #0
    2a26:	469a      	mov	sl, r3
    2a28:	e01a      	b.n	2a60 <singleLEDphysics+0x1c0>
        position = position - 60;
    2a2a:	492d      	ldr	r1, [pc, #180]	; (2ae0 <singleLEDphysics+0x240>)
    2a2c:	1c20      	adds	r0, r4, #0
    2a2e:	4b3b      	ldr	r3, [pc, #236]	; (2b1c <singleLEDphysics+0x27c>)
    2a30:	4798      	blx	r3
    2a32:	4b16      	ldr	r3, [pc, #88]	; (2a8c <singleLEDphysics+0x1ec>)
    2a34:	6018      	str	r0, [r3, #0]
    2a36:	e79e      	b.n	2976 <singleLEDphysics+0xd6>
        position = position + 60;
    2a38:	4929      	ldr	r1, [pc, #164]	; (2ae0 <singleLEDphysics+0x240>)
    2a3a:	1c20      	adds	r0, r4, #0
    2a3c:	4b23      	ldr	r3, [pc, #140]	; (2acc <singleLEDphysics+0x22c>)
    2a3e:	4798      	blx	r3
    2a40:	4b12      	ldr	r3, [pc, #72]	; (2a8c <singleLEDphysics+0x1ec>)
    2a42:	6018      	str	r0, [r3, #0]
    2a44:	e79f      	b.n	2986 <singleLEDphysics+0xe6>
	if(led < 60 && led >= 0){
    2a46:	2d3b      	cmp	r5, #59	; 0x3b
    2a48:	d802      	bhi.n	2a50 <singleLEDphysics+0x1b0>
		LEDdim[led] = pwm;
    2a4a:	4b31      	ldr	r3, [pc, #196]	; (2b10 <singleLEDphysics+0x270>)
    2a4c:	465a      	mov	r2, fp
    2a4e:	555a      	strb	r2, [r3, r5]
    2a50:	3401      	adds	r4, #1
    2a52:	b2e4      	uxtb	r4, r4
    2a54:	3d01      	subs	r5, #1
    2a56:	b2ed      	uxtb	r5, r5
        for(uint8_t i = 1; i <= (uint8_t)abs(velocity*5); i++) {
    2a58:	1ba3      	subs	r3, r4, r6
    2a5a:	b2db      	uxtb	r3, r3
    2a5c:	4598      	cmp	r8, r3
    2a5e:	d30a      	bcc.n	2a76 <singleLEDphysics+0x1d6>
            if(velocity > 0) {
    2a60:	2100      	movs	r1, #0
    2a62:	9800      	ldr	r0, [sp, #0]
    2a64:	47b8      	blx	r7
    2a66:	2800      	cmp	r0, #0
    2a68:	d0ed      	beq.n	2a46 <singleLEDphysics+0x1a6>
	if(led < 60 && led >= 0){
    2a6a:	2c3b      	cmp	r4, #59	; 0x3b
    2a6c:	d8f0      	bhi.n	2a50 <singleLEDphysics+0x1b0>
		LEDdim[led] = pwm;
    2a6e:	464b      	mov	r3, r9
    2a70:	4652      	mov	r2, sl
    2a72:	551a      	strb	r2, [r3, r4]
    2a74:	e7ec      	b.n	2a50 <singleLEDphysics+0x1b0>
                switchLED(currentPosition+i, 0);
            } else {
                switchLED(currentPosition-i, 10);
            }
        }
        lastPosition = currentPosition;
    2a76:	4b24      	ldr	r3, [pc, #144]	; (2b08 <singleLEDphysics+0x268>)
    2a78:	701e      	strb	r6, [r3, #0]
    }
}
    2a7a:	b00b      	add	sp, #44	; 0x2c
    2a7c:	bc3c      	pop	{r2, r3, r4, r5}
    2a7e:	4690      	mov	r8, r2
    2a80:	4699      	mov	r9, r3
    2a82:	46a2      	mov	sl, r4
    2a84:	46ab      	mov	fp, r5
    2a86:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2a88:	000024a9 	.word	0x000024a9
    2a8c:	200000a8 	.word	0x200000a8
    2a90:	00006e09 	.word	0x00006e09
    2a94:	00006181 	.word	0x00006181
    2a98:	54442d18 	.word	0x54442d18
    2a9c:	401921fb 	.word	0x401921fb
    2aa0:	404e0000 	.word	0x404e0000
    2aa4:	00005919 	.word	0x00005919
    2aa8:	00002fa5 	.word	0x00002fa5
    2aac:	00003031 	.word	0x00003031
    2ab0:	000052f9 	.word	0x000052f9
    2ab4:	00006ead 	.word	0x00006ead
    2ab8:	200000c4 	.word	0x200000c4
    2abc:	33333333 	.word	0x33333333
    2ac0:	3feb3333 	.word	0x3feb3333
    2ac4:	42c80000 	.word	0x42c80000
    2ac8:	00004c15 	.word	0x00004c15
    2acc:	000047a1 	.word	0x000047a1
    2ad0:	9999999a 	.word	0x9999999a
    2ad4:	3fa99999 	.word	0x3fa99999
    2ad8:	66666666 	.word	0x66666666
    2adc:	3fee6666 	.word	0x3fee6666
    2ae0:	42700000 	.word	0x42700000
    2ae4:	00004749 	.word	0x00004749
    2ae8:	00004721 	.word	0x00004721
    2aec:	2000009e 	.word	0x2000009e
    2af0:	00006d15 	.word	0x00006d15
    2af4:	3fe00000 	.word	0x3fe00000
    2af8:	000046d5 	.word	0x000046d5
    2afc:	00006681 	.word	0x00006681
    2b00:	000046ad 	.word	0x000046ad
    2b04:	00004771 	.word	0x00004771
    2b08:	200000a4 	.word	0x200000a4
    2b0c:	000022fd 	.word	0x000022fd
    2b10:	2000029c 	.word	0x2000029c
    2b14:	40a00000 	.word	0x40a00000
    2b18:	0000518d 	.word	0x0000518d
    2b1c:	00004e55 	.word	0x00004e55

00002b20 <spinLEDs>:

void spinLEDs(void) {
    static uint8_t counter = 0;
    static uint8_t ledCount = 0;
    counter += 1;
    2b20:	4a11      	ldr	r2, [pc, #68]	; (2b68 <spinLEDs+0x48>)
    2b22:	7813      	ldrb	r3, [r2, #0]
    2b24:	3301      	adds	r3, #1
    2b26:	b2db      	uxtb	r3, r3
    2b28:	7013      	strb	r3, [r2, #0]
    if(counter == 10) {
    2b2a:	2b0a      	cmp	r3, #10
    2b2c:	d000      	beq.n	2b30 <spinLEDs+0x10>
            ledCount = 0;
        }
        switchLED(ledCount, 10);
        counter = 0;
    }
}
    2b2e:	4770      	bx	lr
        switchLED(ledCount, 0);
    2b30:	4b0e      	ldr	r3, [pc, #56]	; (2b6c <spinLEDs+0x4c>)
    2b32:	781b      	ldrb	r3, [r3, #0]
	if(led < 60 && led >= 0){
    2b34:	2b3b      	cmp	r3, #59	; 0x3b
    2b36:	d802      	bhi.n	2b3e <spinLEDs+0x1e>
		LEDdim[led] = pwm;
    2b38:	2100      	movs	r1, #0
    2b3a:	4a0d      	ldr	r2, [pc, #52]	; (2b70 <spinLEDs+0x50>)
    2b3c:	54d1      	strb	r1, [r2, r3]
        ledCount++;
    2b3e:	3301      	adds	r3, #1
    2b40:	b2db      	uxtb	r3, r3
    2b42:	4a0a      	ldr	r2, [pc, #40]	; (2b6c <spinLEDs+0x4c>)
    2b44:	7013      	strb	r3, [r2, #0]
        if(ledCount == 60) {
    2b46:	2b3c      	cmp	r3, #60	; 0x3c
    2b48:	d008      	beq.n	2b5c <spinLEDs+0x3c>
	if(led < 60 && led >= 0){
    2b4a:	2b3b      	cmp	r3, #59	; 0x3b
    2b4c:	d802      	bhi.n	2b54 <spinLEDs+0x34>
		LEDdim[led] = pwm;
    2b4e:	210a      	movs	r1, #10
    2b50:	4a07      	ldr	r2, [pc, #28]	; (2b70 <spinLEDs+0x50>)
    2b52:	54d1      	strb	r1, [r2, r3]
        counter = 0;
    2b54:	2200      	movs	r2, #0
    2b56:	4b04      	ldr	r3, [pc, #16]	; (2b68 <spinLEDs+0x48>)
    2b58:	701a      	strb	r2, [r3, #0]
}
    2b5a:	e7e8      	b.n	2b2e <spinLEDs+0xe>
            ledCount = 0;
    2b5c:	2200      	movs	r2, #0
    2b5e:	4b03      	ldr	r3, [pc, #12]	; (2b6c <spinLEDs+0x4c>)
    2b60:	701a      	strb	r2, [r3, #0]
        switchLED(ledCount, 10);
    2b62:	2300      	movs	r3, #0
    2b64:	e7f3      	b.n	2b4e <spinLEDs+0x2e>
    2b66:	46c0      	nop			; (mov r8, r8)
    2b68:	2000009d 	.word	0x2000009d
    2b6c:	200000a5 	.word	0x200000a5
    2b70:	2000029c 	.word	0x2000029c

00002b74 <ledFillEmpty>:

void ledFillEmpty(void) {
    2b74:	b510      	push	{r4, lr}
    static uint8_t splitTime = 0;

    splitTime++;
    2b76:	4b14      	ldr	r3, [pc, #80]	; (2bc8 <ledFillEmpty+0x54>)
    2b78:	781b      	ldrb	r3, [r3, #0]
    2b7a:	3301      	adds	r3, #1
    2b7c:	b2db      	uxtb	r3, r3
    if (splitTime == 2) {
    2b7e:	2b02      	cmp	r3, #2
    2b80:	d002      	beq.n	2b88 <ledFillEmpty+0x14>
    splitTime++;
    2b82:	4a11      	ldr	r2, [pc, #68]	; (2bc8 <ledFillEmpty+0x54>)
    2b84:	7013      	strb	r3, [r2, #0]
        if(LEDIncrement == 121) {
            LEDIncrement = 0;
            turnOffAllLEDS();
        }
    }
}
    2b86:	bd10      	pop	{r4, pc}
        splitTime = 0;
    2b88:	2200      	movs	r2, #0
    2b8a:	4b0f      	ldr	r3, [pc, #60]	; (2bc8 <ledFillEmpty+0x54>)
    2b8c:	701a      	strb	r2, [r3, #0]
        if(LEDIncrement < 60) {
    2b8e:	4b0f      	ldr	r3, [pc, #60]	; (2bcc <ledFillEmpty+0x58>)
    2b90:	781b      	ldrb	r3, [r3, #0]
    2b92:	2b3b      	cmp	r3, #59	; 0x3b
    2b94:	d809      	bhi.n	2baa <ledFillEmpty+0x36>
    2b96:	210a      	movs	r1, #10
    2b98:	4a0d      	ldr	r2, [pc, #52]	; (2bd0 <ledFillEmpty+0x5c>)
    2b9a:	54d1      	strb	r1, [r2, r3]
        LEDIncrement++;
    2b9c:	3301      	adds	r3, #1
    2b9e:	b2db      	uxtb	r3, r3
        if(LEDIncrement == 121) {
    2ba0:	2b79      	cmp	r3, #121	; 0x79
    2ba2:	d00b      	beq.n	2bbc <ledFillEmpty+0x48>
        LEDIncrement++;
    2ba4:	4a09      	ldr	r2, [pc, #36]	; (2bcc <ledFillEmpty+0x58>)
    2ba6:	7013      	strb	r3, [r2, #0]
    2ba8:	e7ed      	b.n	2b86 <ledFillEmpty+0x12>
            switchLED(120-LEDIncrement, 0);
    2baa:	2278      	movs	r2, #120	; 0x78
    2bac:	1ad2      	subs	r2, r2, r3
    2bae:	b2d2      	uxtb	r2, r2
	if(led < 60 && led >= 0){
    2bb0:	2a3b      	cmp	r2, #59	; 0x3b
    2bb2:	d8f3      	bhi.n	2b9c <ledFillEmpty+0x28>
		LEDdim[led] = pwm;
    2bb4:	2000      	movs	r0, #0
    2bb6:	4906      	ldr	r1, [pc, #24]	; (2bd0 <ledFillEmpty+0x5c>)
    2bb8:	5488      	strb	r0, [r1, r2]
    2bba:	e7ef      	b.n	2b9c <ledFillEmpty+0x28>
            LEDIncrement = 0;
    2bbc:	2200      	movs	r2, #0
    2bbe:	4b03      	ldr	r3, [pc, #12]	; (2bcc <ledFillEmpty+0x58>)
    2bc0:	701a      	strb	r2, [r3, #0]
            turnOffAllLEDS();
    2bc2:	4b04      	ldr	r3, [pc, #16]	; (2bd4 <ledFillEmpty+0x60>)
    2bc4:	4798      	blx	r3
}
    2bc6:	e7de      	b.n	2b86 <ledFillEmpty+0x12>
    2bc8:	200000ba 	.word	0x200000ba
    2bcc:	20000098 	.word	0x20000098
    2bd0:	2000029c 	.word	0x2000029c
    2bd4:	000022fd 	.word	0x000022fd

00002bd8 <drawPoint>:

void drawPoint(uint8_t location, uint8_t width, uint8_t brightness){
    2bd8:	b5f0      	push	{r4, r5, r6, r7, lr}
    2bda:	46de      	mov	lr, fp
    2bdc:	4657      	mov	r7, sl
    2bde:	464e      	mov	r6, r9
    2be0:	4645      	mov	r5, r8
    2be2:	b5e0      	push	{r5, r6, r7, lr}
    2be4:	b083      	sub	sp, #12
    2be6:	0006      	movs	r6, r0
    2be8:	4689      	mov	r9, r1
    2bea:	4690      	mov	r8, r2
	uint8_t forward = location;
	uint8_t reverse = location;
	for(uint8_t i = 0; i < width; i++){
    2bec:	2900      	cmp	r1, #0
    2bee:	d02e      	beq.n	2c4e <drawPoint+0x76>
		
		addLED(forward, (uint8_t)(brightness - (brightness*i)/width));
    2bf0:	9100      	str	r1, [sp, #0]
    2bf2:	4643      	mov	r3, r8
    2bf4:	466a      	mov	r2, sp
    2bf6:	71d3      	strb	r3, [r2, #7]
    2bf8:	79d1      	ldrb	r1, [r2, #7]
    2bfa:	0030      	movs	r0, r6
    2bfc:	4b17      	ldr	r3, [pc, #92]	; (2c5c <drawPoint+0x84>)
    2bfe:	4798      	blx	r3
    2c00:	0037      	movs	r7, r6
    2c02:	2400      	movs	r4, #0
    2c04:	4b16      	ldr	r3, [pc, #88]	; (2c60 <drawPoint+0x88>)
    2c06:	469b      	mov	fp, r3
		if(i != 0){
		addLED(reverse, (uint8_t)(brightness - (brightness*i)/width));
    2c08:	4b14      	ldr	r3, [pc, #80]	; (2c5c <drawPoint+0x84>)
    2c0a:	469a      	mov	sl, r3
    2c0c:	e016      	b.n	2c3c <drawPoint+0x64>
		}
        
		if(forward == 59){
	    forward = 0;
    2c0e:	2600      	movs	r6, #0
    2c10:	e018      	b.n	2c44 <drawPoint+0x6c>
		} else {
		forward++;	
		}
	    if(reverse == 0){
		reverse = 59;
    2c12:	273b      	movs	r7, #59	; 0x3b
	for(uint8_t i = 0; i < width; i++){
    2c14:	3401      	adds	r4, #1
    2c16:	b2e4      	uxtb	r4, r4
    2c18:	45a1      	cmp	r9, r4
    2c1a:	d918      	bls.n	2c4e <drawPoint+0x76>
		addLED(forward, (uint8_t)(brightness - (brightness*i)/width));
    2c1c:	9900      	ldr	r1, [sp, #0]
    2c1e:	4640      	mov	r0, r8
    2c20:	4360      	muls	r0, r4
    2c22:	47d8      	blx	fp
    2c24:	4643      	mov	r3, r8
    2c26:	1a1d      	subs	r5, r3, r0
    2c28:	b2ed      	uxtb	r5, r5
    2c2a:	0029      	movs	r1, r5
    2c2c:	0030      	movs	r0, r6
    2c2e:	4b0b      	ldr	r3, [pc, #44]	; (2c5c <drawPoint+0x84>)
    2c30:	4798      	blx	r3
		if(i != 0){
    2c32:	2c00      	cmp	r4, #0
    2c34:	d002      	beq.n	2c3c <drawPoint+0x64>
		addLED(reverse, (uint8_t)(brightness - (brightness*i)/width));
    2c36:	0029      	movs	r1, r5
    2c38:	0038      	movs	r0, r7
    2c3a:	47d0      	blx	sl
		if(forward == 59){
    2c3c:	2e3b      	cmp	r6, #59	; 0x3b
    2c3e:	d0e6      	beq.n	2c0e <drawPoint+0x36>
		forward++;	
    2c40:	3601      	adds	r6, #1
    2c42:	b2f6      	uxtb	r6, r6
	    if(reverse == 0){
    2c44:	2f00      	cmp	r7, #0
    2c46:	d0e4      	beq.n	2c12 <drawPoint+0x3a>
		} else {
	    reverse--;
    2c48:	3f01      	subs	r7, #1
    2c4a:	b2ff      	uxtb	r7, r7
    2c4c:	e7e2      	b.n	2c14 <drawPoint+0x3c>
		}
		
	}
}
    2c4e:	b003      	add	sp, #12
    2c50:	bc3c      	pop	{r2, r3, r4, r5}
    2c52:	4690      	mov	r8, r2
    2c54:	4699      	mov	r9, r3
    2c56:	46a2      	mov	sl, r4
    2c58:	46ab      	mov	fp, r5
    2c5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2c5c:	000022d9 	.word	0x000022d9
    2c60:	000044a9 	.word	0x000044a9

00002c64 <ledWave>:

void ledWave(void) {
    2c64:	b570      	push	{r4, r5, r6, lr}
    static uint8_t count = 0;
	static uint8_t count2 = 0;
	static uint8_t count3 = 0;

    turnOffAllLEDS();
    2c66:	4b23      	ldr	r3, [pc, #140]	; (2cf4 <ledWave+0x90>)
    2c68:	4798      	blx	r3
    drawPoint(count, 6, 10);
    2c6a:	4d23      	ldr	r5, [pc, #140]	; (2cf8 <ledWave+0x94>)
    2c6c:	782c      	ldrb	r4, [r5, #0]
    2c6e:	220a      	movs	r2, #10
    2c70:	2106      	movs	r1, #6
    2c72:	0020      	movs	r0, r4
    2c74:	4b21      	ldr	r3, [pc, #132]	; (2cfc <ledWave+0x98>)
    2c76:	4798      	blx	r3
	count ++;
    2c78:	3401      	adds	r4, #1
    2c7a:	b2e4      	uxtb	r4, r4
    2c7c:	702c      	strb	r4, [r5, #0]
	if (count == 60){
    2c7e:	2c3c      	cmp	r4, #60	; 0x3c
    2c80:	d020      	beq.n	2cc4 <ledWave+0x60>
		count = 0;
	}
	
	if (count%3 == 1){
    2c82:	2103      	movs	r1, #3
    2c84:	0020      	movs	r0, r4
    2c86:	4b1e      	ldr	r3, [pc, #120]	; (2d00 <ledWave+0x9c>)
    2c88:	4798      	blx	r3
    2c8a:	b2c9      	uxtb	r1, r1
    2c8c:	2901      	cmp	r1, #1
    2c8e:	d023      	beq.n	2cd8 <ledWave+0x74>
	if (count3 == 60){
		count3 = 0;
	}
		
	}
	drawPoint(count3, 15, 10);
    2c90:	4b1c      	ldr	r3, [pc, #112]	; (2d04 <ledWave+0xa0>)
    2c92:	7818      	ldrb	r0, [r3, #0]
    2c94:	220a      	movs	r2, #10
    2c96:	210f      	movs	r1, #15
    2c98:	4b18      	ldr	r3, [pc, #96]	; (2cfc <ledWave+0x98>)
    2c9a:	4798      	blx	r3
	
	if (count%2 == 1){
    2c9c:	07e3      	lsls	r3, r4, #31
    2c9e:	d50a      	bpl.n	2cb6 <ledWave+0x52>
	if (count2 == 0){
    2ca0:	4b19      	ldr	r3, [pc, #100]	; (2d08 <ledWave+0xa4>)
    2ca2:	781b      	ldrb	r3, [r3, #0]
    2ca4:	2b00      	cmp	r3, #0
    2ca6:	d102      	bne.n	2cae <ledWave+0x4a>
		count2 = 60;
    2ca8:	223c      	movs	r2, #60	; 0x3c
    2caa:	4b17      	ldr	r3, [pc, #92]	; (2d08 <ledWave+0xa4>)
    2cac:	701a      	strb	r2, [r3, #0]
	}
	count2 --;	
    2cae:	4a16      	ldr	r2, [pc, #88]	; (2d08 <ledWave+0xa4>)
    2cb0:	7813      	ldrb	r3, [r2, #0]
    2cb2:	3b01      	subs	r3, #1
    2cb4:	7013      	strb	r3, [r2, #0]
	}
	drawPoint(count2, 6, 5);
    2cb6:	4b14      	ldr	r3, [pc, #80]	; (2d08 <ledWave+0xa4>)
    2cb8:	7818      	ldrb	r0, [r3, #0]
    2cba:	2205      	movs	r2, #5
    2cbc:	2106      	movs	r1, #6
    2cbe:	4b0f      	ldr	r3, [pc, #60]	; (2cfc <ledWave+0x98>)
    2cc0:	4798      	blx	r3
}
    2cc2:	bd70      	pop	{r4, r5, r6, pc}
		count = 0;
    2cc4:	2200      	movs	r2, #0
    2cc6:	4b0c      	ldr	r3, [pc, #48]	; (2cf8 <ledWave+0x94>)
    2cc8:	701a      	strb	r2, [r3, #0]
	drawPoint(count3, 15, 10);
    2cca:	4b0e      	ldr	r3, [pc, #56]	; (2d04 <ledWave+0xa0>)
    2ccc:	7818      	ldrb	r0, [r3, #0]
    2cce:	320a      	adds	r2, #10
    2cd0:	210f      	movs	r1, #15
    2cd2:	4b0a      	ldr	r3, [pc, #40]	; (2cfc <ledWave+0x98>)
    2cd4:	4798      	blx	r3
    2cd6:	e7ee      	b.n	2cb6 <ledWave+0x52>
	count3 ++;
    2cd8:	4b0a      	ldr	r3, [pc, #40]	; (2d04 <ledWave+0xa0>)
    2cda:	781b      	ldrb	r3, [r3, #0]
    2cdc:	3301      	adds	r3, #1
    2cde:	b2db      	uxtb	r3, r3
	if (count3 == 60){
    2ce0:	2b3c      	cmp	r3, #60	; 0x3c
    2ce2:	d002      	beq.n	2cea <ledWave+0x86>
	count3 ++;
    2ce4:	4a07      	ldr	r2, [pc, #28]	; (2d04 <ledWave+0xa0>)
    2ce6:	7013      	strb	r3, [r2, #0]
    2ce8:	e7d2      	b.n	2c90 <ledWave+0x2c>
		count3 = 0;
    2cea:	2200      	movs	r2, #0
    2cec:	4b05      	ldr	r3, [pc, #20]	; (2d04 <ledWave+0xa0>)
    2cee:	701a      	strb	r2, [r3, #0]
    2cf0:	e7ce      	b.n	2c90 <ledWave+0x2c>
    2cf2:	46c0      	nop			; (mov r8, r8)
    2cf4:	000022fd 	.word	0x000022fd
    2cf8:	2000009a 	.word	0x2000009a
    2cfc:	00002bd9 	.word	0x00002bd9
    2d00:	000044a1 	.word	0x000044a1
    2d04:	2000009c 	.word	0x2000009c
    2d08:	2000009b 	.word	0x2000009b

00002d0c <demoState>:
		localState = ENTER;
		break;
	}
}

void demoState(void) {
    2d0c:	b510      	push	{r4, lr}
    static enum stateStatus localState = ENTER;
    static uint16_t timer = 1000;
    static uint8_t demoNumber = 1;
    switch (localState) {
    2d0e:	4b1f      	ldr	r3, [pc, #124]	; (2d8c <demoState+0x80>)
    2d10:	781b      	ldrb	r3, [r3, #0]
    2d12:	2b01      	cmp	r3, #1
    2d14:	d008      	beq.n	2d28 <demoState+0x1c>
    2d16:	2b00      	cmp	r3, #0
    2d18:	d002      	beq.n	2d20 <demoState+0x14>
    2d1a:	2b02      	cmp	r3, #2
    2d1c:	d032      	beq.n	2d84 <demoState+0x78>
        break;
    case EXIT:
        localState = ENTER;      //Make sure we start at the enter state when we return
        break;
    }
}
    2d1e:	bd10      	pop	{r4, pc}
        localState = ACTIVE;
    2d20:	2201      	movs	r2, #1
    2d22:	4b1a      	ldr	r3, [pc, #104]	; (2d8c <demoState+0x80>)
    2d24:	701a      	strb	r2, [r3, #0]
        break;
    2d26:	e7fa      	b.n	2d1e <demoState+0x12>
        switch(demoNumber) {
    2d28:	4b19      	ldr	r3, [pc, #100]	; (2d90 <demoState+0x84>)
    2d2a:	781a      	ldrb	r2, [r3, #0]
    2d2c:	2a04      	cmp	r2, #4
    2d2e:	d81a      	bhi.n	2d66 <demoState+0x5a>
    2d30:	0093      	lsls	r3, r2, #2
    2d32:	4a18      	ldr	r2, [pc, #96]	; (2d94 <demoState+0x88>)
    2d34:	58d3      	ldr	r3, [r2, r3]
    2d36:	469f      	mov	pc, r3
            spinLEDs();
    2d38:	4b17      	ldr	r3, [pc, #92]	; (2d98 <demoState+0x8c>)
    2d3a:	4798      	blx	r3
        timer--;
    2d3c:	4b17      	ldr	r3, [pc, #92]	; (2d9c <demoState+0x90>)
    2d3e:	881b      	ldrh	r3, [r3, #0]
    2d40:	3b01      	subs	r3, #1
    2d42:	b29b      	uxth	r3, r3
        if(timer == 0) {
    2d44:	2b00      	cmp	r3, #0
    2d46:	d012      	beq.n	2d6e <demoState+0x62>
        timer--;
    2d48:	4a14      	ldr	r2, [pc, #80]	; (2d9c <demoState+0x90>)
    2d4a:	8013      	strh	r3, [r2, #0]
    2d4c:	e7e7      	b.n	2d1e <demoState+0x12>
            ledFillEmpty();
    2d4e:	4b14      	ldr	r3, [pc, #80]	; (2da0 <demoState+0x94>)
    2d50:	4798      	blx	r3
            break;
    2d52:	e7f3      	b.n	2d3c <demoState+0x30>
            singleLEDphysics();
    2d54:	4b13      	ldr	r3, [pc, #76]	; (2da4 <demoState+0x98>)
    2d56:	4798      	blx	r3
            break;
    2d58:	e7f0      	b.n	2d3c <demoState+0x30>
            displayTimeSimple();
    2d5a:	4b13      	ldr	r3, [pc, #76]	; (2da8 <demoState+0x9c>)
    2d5c:	4798      	blx	r3
            break;
    2d5e:	e7ed      	b.n	2d3c <demoState+0x30>
		    ledWave();
    2d60:	4b12      	ldr	r3, [pc, #72]	; (2dac <demoState+0xa0>)
    2d62:	4798      	blx	r3
			break;
    2d64:	e7ea      	b.n	2d3c <demoState+0x30>
            demoNumber = 0;
    2d66:	2200      	movs	r2, #0
    2d68:	4b09      	ldr	r3, [pc, #36]	; (2d90 <demoState+0x84>)
    2d6a:	701a      	strb	r2, [r3, #0]
            break;
    2d6c:	e7e6      	b.n	2d3c <demoState+0x30>
            timer = 500;
    2d6e:	22fa      	movs	r2, #250	; 0xfa
    2d70:	0052      	lsls	r2, r2, #1
    2d72:	4b0a      	ldr	r3, [pc, #40]	; (2d9c <demoState+0x90>)
    2d74:	801a      	strh	r2, [r3, #0]
            turnOffAllLEDS();
    2d76:	4b0e      	ldr	r3, [pc, #56]	; (2db0 <demoState+0xa4>)
    2d78:	4798      	blx	r3
            demoNumber++;
    2d7a:	4a05      	ldr	r2, [pc, #20]	; (2d90 <demoState+0x84>)
    2d7c:	7813      	ldrb	r3, [r2, #0]
    2d7e:	3301      	adds	r3, #1
    2d80:	7013      	strb	r3, [r2, #0]
    2d82:	e7cc      	b.n	2d1e <demoState+0x12>
        localState = ENTER;      //Make sure we start at the enter state when we return
    2d84:	2200      	movs	r2, #0
    2d86:	4b01      	ldr	r3, [pc, #4]	; (2d8c <demoState+0x80>)
    2d88:	701a      	strb	r2, [r3, #0]
}
    2d8a:	e7c8      	b.n	2d1e <demoState+0x12>
    2d8c:	200000a6 	.word	0x200000a6
    2d90:	20000001 	.word	0x20000001
    2d94:	000070fc 	.word	0x000070fc
    2d98:	00002b21 	.word	0x00002b21
    2d9c:	20000006 	.word	0x20000006
    2da0:	00002b75 	.word	0x00002b75
    2da4:	000028a1 	.word	0x000028a1
    2da8:	00002811 	.word	0x00002811
    2dac:	00002c65 	.word	0x00002c65
    2db0:	000022fd 	.word	0x000022fd

00002db4 <runStateMachine>:
void runStateMachine(void) {
    2db4:	b510      	push	{r4, lr}
    switch (stateMachineStatus) {
    2db6:	4b09      	ldr	r3, [pc, #36]	; (2ddc <runStateMachine+0x28>)
    2db8:	781b      	ldrb	r3, [r3, #0]
    2dba:	b2db      	uxtb	r3, r3
    2dbc:	2b00      	cmp	r3, #0
    2dbe:	d002      	beq.n	2dc6 <runStateMachine+0x12>
    2dc0:	2b01      	cmp	r3, #1
    2dc2:	d007      	beq.n	2dd4 <runStateMachine+0x20>
}
    2dc4:	bd10      	pop	{r4, pc}
    currentState = stateToSwitch;
    2dc6:	4a06      	ldr	r2, [pc, #24]	; (2de0 <runStateMachine+0x2c>)
    2dc8:	4b06      	ldr	r3, [pc, #24]	; (2de4 <runStateMachine+0x30>)
    2dca:	601a      	str	r2, [r3, #0]
        stateMachineStatus = ACTIVE;
    2dcc:	2201      	movs	r2, #1
    2dce:	4b03      	ldr	r3, [pc, #12]	; (2ddc <runStateMachine+0x28>)
    2dd0:	701a      	strb	r2, [r3, #0]
        break;
    2dd2:	e7f7      	b.n	2dc4 <runStateMachine+0x10>
        currentState();
    2dd4:	4b03      	ldr	r3, [pc, #12]	; (2de4 <runStateMachine+0x30>)
    2dd6:	681b      	ldr	r3, [r3, #0]
    2dd8:	4798      	blx	r3
}
    2dda:	e7f3      	b.n	2dc4 <runStateMachine+0x10>
    2ddc:	200000bb 	.word	0x200000bb
    2de0:	00002d0d 	.word	0x00002d0d
    2de4:	200000a0 	.word	0x200000a0

00002de8 <timeSlot_1000ms>:
}

void timeSlot_100ms(void) {
}

void timeSlot_1000ms(void) {
    2de8:	b510      	push	{r4, lr}
	}
	switchLED(i, outputValue);
	}
	*/
    //ledHeartbeat(30);
    updateTime();
    2dea:	4b05      	ldr	r3, [pc, #20]	; (2e00 <timeSlot_1000ms+0x18>)
    2dec:	4798      	blx	r3

    if(startUp > 0) {
    2dee:	4b05      	ldr	r3, [pc, #20]	; (2e04 <timeSlot_1000ms+0x1c>)
    2df0:	781b      	ldrb	r3, [r3, #0]
    2df2:	2b00      	cmp	r3, #0
    2df4:	d002      	beq.n	2dfc <timeSlot_1000ms+0x14>
        startUp = startUp - 1;
    2df6:	3b01      	subs	r3, #1
    2df8:	4a02      	ldr	r2, [pc, #8]	; (2e04 <timeSlot_1000ms+0x1c>)
    2dfa:	7013      	strb	r3, [r2, #0]
    }

}
    2dfc:	bd10      	pop	{r4, pc}
    2dfe:	46c0      	nop			; (mov r8, r8)
    2e00:	00002801 	.word	0x00002801
    2e04:	20000004 	.word	0x20000004

00002e08 <slotManager>:
void slotManager(void){
    2e08:	b510      	push	{r4, lr}
	if(slot_triggered){
    2e0a:	4b16      	ldr	r3, [pc, #88]	; (2e64 <slotManager+0x5c>)
    2e0c:	781b      	ldrb	r3, [r3, #0]
    2e0e:	2b00      	cmp	r3, #0
    2e10:	d100      	bne.n	2e14 <slotManager+0xc>
    if(timeslotCounter % 1000 == 0) {
        timeSlot_1000ms();
    }
	slot_triggered = false;
	}
    2e12:	bd10      	pop	{r4, pc}
    driveLEDs();
    2e14:	4b14      	ldr	r3, [pc, #80]	; (2e68 <slotManager+0x60>)
    2e16:	4798      	blx	r3
    if(timeslotCounter % 10 == 0) {
    2e18:	4b14      	ldr	r3, [pc, #80]	; (2e6c <slotManager+0x64>)
    2e1a:	8818      	ldrh	r0, [r3, #0]
    2e1c:	210a      	movs	r1, #10
    2e1e:	4b14      	ldr	r3, [pc, #80]	; (2e70 <slotManager+0x68>)
    2e20:	4798      	blx	r3
    2e22:	b289      	uxth	r1, r1
    2e24:	2900      	cmp	r1, #0
    2e26:	d014      	beq.n	2e52 <slotManager+0x4a>
    if(timeslotCounter % 10 == 5) {
    2e28:	4b10      	ldr	r3, [pc, #64]	; (2e6c <slotManager+0x64>)
    2e2a:	8818      	ldrh	r0, [r3, #0]
    2e2c:	210a      	movs	r1, #10
    2e2e:	4b10      	ldr	r3, [pc, #64]	; (2e70 <slotManager+0x68>)
    2e30:	4798      	blx	r3
    2e32:	b289      	uxth	r1, r1
    2e34:	2905      	cmp	r1, #5
    2e36:	d00f      	beq.n	2e58 <slotManager+0x50>
    if(timeslotCounter % 100 == 0) {
    2e38:	4b0c      	ldr	r3, [pc, #48]	; (2e6c <slotManager+0x64>)
    if(timeslotCounter % 1000 == 0) {
    2e3a:	8818      	ldrh	r0, [r3, #0]
    2e3c:	21fa      	movs	r1, #250	; 0xfa
    2e3e:	0089      	lsls	r1, r1, #2
    2e40:	4b0b      	ldr	r3, [pc, #44]	; (2e70 <slotManager+0x68>)
    2e42:	4798      	blx	r3
    2e44:	b289      	uxth	r1, r1
    2e46:	2900      	cmp	r1, #0
    2e48:	d009      	beq.n	2e5e <slotManager+0x56>
	slot_triggered = false;
    2e4a:	2200      	movs	r2, #0
    2e4c:	4b05      	ldr	r3, [pc, #20]	; (2e64 <slotManager+0x5c>)
    2e4e:	701a      	strb	r2, [r3, #0]
    2e50:	e7df      	b.n	2e12 <slotManager+0xa>
    accelerometerLoop();
    2e52:	4b08      	ldr	r3, [pc, #32]	; (2e74 <slotManager+0x6c>)
    2e54:	4798      	blx	r3
    2e56:	e7e7      	b.n	2e28 <slotManager+0x20>
    runStateMachine();
    2e58:	4b07      	ldr	r3, [pc, #28]	; (2e78 <slotManager+0x70>)
    2e5a:	4798      	blx	r3
    2e5c:	e7ec      	b.n	2e38 <slotManager+0x30>
        timeSlot_1000ms();
    2e5e:	4b07      	ldr	r3, [pc, #28]	; (2e7c <slotManager+0x74>)
    2e60:	4798      	blx	r3
    2e62:	e7f2      	b.n	2e4a <slotManager+0x42>
    2e64:	200000b8 	.word	0x200000b8
    2e68:	00002185 	.word	0x00002185
    2e6c:	200000bc 	.word	0x200000bc
    2e70:	000044a1 	.word	0x000044a1
    2e74:	000025a1 	.word	0x000025a1
    2e78:	00002db5 	.word	0x00002db5
    2e7c:	00002de9 	.word	0x00002de9

00002e80 <main>:



int main (void) {
    2e80:	b5f0      	push	{r4, r5, r6, r7, lr}
    2e82:	46de      	mov	lr, fp
    2e84:	4657      	mov	r7, sl
    2e86:	464e      	mov	r6, r9
    2e88:	4645      	mov	r5, r8
    2e8a:	b5e0      	push	{r5, r6, r7, lr}
    2e8c:	b0ab      	sub	sp, #172	; 0xac
    system_init();
    2e8e:	4b37      	ldr	r3, [pc, #220]	; (2f6c <main+0xec>)
    2e90:	4798      	blx	r3
    ioport_init();
   
    configure_rtc();
    2e92:	4b37      	ldr	r3, [pc, #220]	; (2f70 <main+0xf0>)
    2e94:	4798      	blx	r3
    configure_tc();
    2e96:	4b37      	ldr	r3, [pc, #220]	; (2f74 <main+0xf4>)
    2e98:	4798      	blx	r3
	tcc_get_config_defaults(&config_tcc, TCC0);
    2e9a:	4f37      	ldr	r7, [pc, #220]	; (2f78 <main+0xf8>)
    2e9c:	ac01      	add	r4, sp, #4
    2e9e:	0039      	movs	r1, r7
    2ea0:	0020      	movs	r0, r4
    2ea2:	4b36      	ldr	r3, [pc, #216]	; (2f7c <main+0xfc>)
    2ea4:	469b      	mov	fp, r3
    2ea6:	4798      	blx	r3
	config_tcc.counter.period = 100;
    2ea8:	2364      	movs	r3, #100	; 0x64
    2eaa:	4698      	mov	r8, r3
    2eac:	6063      	str	r3, [r4, #4]
	config_tcc.compare.wave_generation = TCC_WAVE_GENERATION_SINGLE_SLOPE_PWM;
    2eae:	3b62      	subs	r3, #98	; 0x62
    2eb0:	469a      	mov	sl, r3
    2eb2:	7623      	strb	r3, [r4, #24]
	config_tcc.compare.match[1] = 1*100/5;
    2eb4:	2314      	movs	r3, #20
    2eb6:	6223      	str	r3, [r4, #32]
	config_tcc.compare.match[2] = 4*100/5;
    2eb8:	333c      	adds	r3, #60	; 0x3c
    2eba:	6263      	str	r3, [r4, #36]	; 0x24
	config_tcc.compare.match[3] = 5*100/5;
    2ebc:	4643      	mov	r3, r8
    2ebe:	62a3      	str	r3, [r4, #40]	; 0x28
	config_tcc.pins.enable_wave_out_pin[7] = true;
    2ec0:	2601      	movs	r6, #1
    2ec2:	333b      	adds	r3, #59	; 0x3b
    2ec4:	54e6      	strb	r6, [r4, r3]
	config_tcc.pins.wave_out_pin[7]        = PIN_PA17F_TCC0_WO7;
    2ec6:	3b8e      	subs	r3, #142	; 0x8e
    2ec8:	6763      	str	r3, [r4, #116]	; 0x74
	config_tcc.pins.wave_out_pin_mux[7]    = MUX_PA17F_TCC0_WO7;
    2eca:	2505      	movs	r5, #5
    2ecc:	3383      	adds	r3, #131	; 0x83
    2ece:	50e5      	str	r5, [r4, r3]
	config_tcc.pins.enable_wave_out_pin[2] = true;
    2ed0:	3306      	adds	r3, #6
    2ed2:	54e6      	strb	r6, [r4, r3]
	config_tcc.pins.wave_out_pin[2]		   = PIN_PA18F_TCC0_WO2;
    2ed4:	3b88      	subs	r3, #136	; 0x88
    2ed6:	6623      	str	r3, [r4, #96]	; 0x60
	config_tcc.pins.wave_out_pin_mux[2]	   = MUX_PA18F_TCC0_WO2;
    2ed8:	336e      	adds	r3, #110	; 0x6e
    2eda:	50e5      	str	r5, [r4, r3]
	config_tcc.pins.enable_wave_out_pin[5] = true;
    2edc:	331d      	adds	r3, #29
    2ede:	54e6      	strb	r6, [r4, r3]
	config_tcc.pins.wave_out_pin[5]		   = PIN_PA23F_TCC0_WO5;
    2ee0:	3b86      	subs	r3, #134	; 0x86
    2ee2:	66e3      	str	r3, [r4, #108]	; 0x6c
	config_tcc.pins.wave_out_pin_mux[5]	   = MUX_PA23F_TCC0_WO5;
    2ee4:	3375      	adds	r3, #117	; 0x75
    2ee6:	50e5      	str	r5, [r4, r3]
	tcc_init(&tcc_instance, TCC0, &config_tcc);
    2ee8:	4b25      	ldr	r3, [pc, #148]	; (2f80 <main+0x100>)
    2eea:	4699      	mov	r9, r3
    2eec:	0022      	movs	r2, r4
    2eee:	0039      	movs	r1, r7
    2ef0:	0018      	movs	r0, r3
    2ef2:	4f24      	ldr	r7, [pc, #144]	; (2f84 <main+0x104>)
    2ef4:	47b8      	blx	r7
	tcc_get_config_defaults(&config_tcc, TCC1);
    2ef6:	4924      	ldr	r1, [pc, #144]	; (2f88 <main+0x108>)
    2ef8:	0020      	movs	r0, r4
    2efa:	47d8      	blx	fp
	config_tcc.counter.period = 100;
    2efc:	4643      	mov	r3, r8
    2efe:	6063      	str	r3, [r4, #4]
	config_tcc.compare.wave_generation = TCC_WAVE_GENERATION_SINGLE_SLOPE_PWM;
    2f00:	4653      	mov	r3, sl
    2f02:	7623      	strb	r3, [r4, #24]
	config_tcc.compare.match[0] = 2*100/5;
    2f04:	2328      	movs	r3, #40	; 0x28
    2f06:	61e3      	str	r3, [r4, #28]
	config_tcc.compare.match[1] = 3*100/5;
    2f08:	3314      	adds	r3, #20
    2f0a:	6223      	str	r3, [r4, #32]
	config_tcc.pins.enable_wave_out_pin[3] = true;
    2f0c:	335f      	adds	r3, #95	; 0x5f
    2f0e:	54e6      	strb	r6, [r4, r3]
	config_tcc.pins.wave_out_pin[3]        = PIN_PA25F_TCC1_WO3;
    2f10:	3b82      	subs	r3, #130	; 0x82
    2f12:	6663      	str	r3, [r4, #100]	; 0x64
	config_tcc.pins.wave_out_pin_mux[3]    = MUX_PA25F_TCC1_WO3;
    2f14:	336b      	adds	r3, #107	; 0x6b
    2f16:	50e5      	str	r5, [r4, r3]
	config_tcc.pins.enable_wave_out_pin[2] = true;
    2f18:	3316      	adds	r3, #22
    2f1a:	54e6      	strb	r6, [r4, r3]
	config_tcc.pins.wave_out_pin[2]        = PIN_PA24F_TCC1_WO2;
    2f1c:	3b82      	subs	r3, #130	; 0x82
    2f1e:	6623      	str	r3, [r4, #96]	; 0x60
	config_tcc.pins.wave_out_pin_mux[2]    = MUX_PA24F_TCC1_WO2;
    2f20:	3368      	adds	r3, #104	; 0x68
    2f22:	50e5      	str	r5, [r4, r3]
	tcc_init(&tcc_instance1, TCC1, &config_tcc);
    2f24:	0022      	movs	r2, r4
    2f26:	4918      	ldr	r1, [pc, #96]	; (2f88 <main+0x108>)
    2f28:	4818      	ldr	r0, [pc, #96]	; (2f8c <main+0x10c>)
    2f2a:	47b8      	blx	r7
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
    2f2c:	464b      	mov	r3, r9
    2f2e:	681b      	ldr	r3, [r3, #0]

	while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_ENABLE) {
    2f30:	2202      	movs	r2, #2
    2f32:	6899      	ldr	r1, [r3, #8]
    2f34:	420a      	tst	r2, r1
    2f36:	d1fc      	bne.n	2f32 <main+0xb2>
		/* Wait for sync */
	}

	/* Enable the TCC module */
	tcc_module->CTRLA.reg |= TCC_CTRLA_ENABLE;
    2f38:	681a      	ldr	r2, [r3, #0]
    2f3a:	2102      	movs	r1, #2
    2f3c:	430a      	orrs	r2, r1
    2f3e:	601a      	str	r2, [r3, #0]
	Tcc *const tcc_module = module_inst->hw;
    2f40:	4b12      	ldr	r3, [pc, #72]	; (2f8c <main+0x10c>)
    2f42:	681b      	ldr	r3, [r3, #0]
	while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_ENABLE) {
    2f44:	2202      	movs	r2, #2
    2f46:	6899      	ldr	r1, [r3, #8]
    2f48:	420a      	tst	r2, r1
    2f4a:	d1fc      	bne.n	2f46 <main+0xc6>
	tcc_module->CTRLA.reg |= TCC_CTRLA_ENABLE;
    2f4c:	681a      	ldr	r2, [r3, #0]
    2f4e:	2102      	movs	r1, #2
    2f50:	430a      	orrs	r2, r1
    2f52:	601a      	str	r2, [r3, #0]
	configure_tcc();
    setLEDPinsAsOutputs();
    2f54:	4b0e      	ldr	r3, [pc, #56]	; (2f90 <main+0x110>)
    2f56:	4798      	blx	r3

    configure_i2c();
    2f58:	4b0e      	ldr	r3, [pc, #56]	; (2f94 <main+0x114>)
    2f5a:	4798      	blx	r3
    configure_i2c_callbacks();
    2f5c:	4b0e      	ldr	r3, [pc, #56]	; (2f98 <main+0x118>)
    2f5e:	4798      	blx	r3
	eic_init();	
    2f60:	4b0e      	ldr	r3, [pc, #56]	; (2f9c <main+0x11c>)
    2f62:	4798      	blx	r3
   
    while(1) {
		slotManager();
    2f64:	4c0e      	ldr	r4, [pc, #56]	; (2fa0 <main+0x120>)
    2f66:	47a0      	blx	r4
    2f68:	e7fd      	b.n	2f66 <main+0xe6>
    2f6a:	46c0      	nop			; (mov r8, r8)
    2f6c:	000015fd 	.word	0x000015fd
    2f70:	00002789 	.word	0x00002789
    2f74:	0000241d 	.word	0x0000241d
    2f78:	42002000 	.word	0x42002000
    2f7c:	000016d1 	.word	0x000016d1
    2f80:	2000014c 	.word	0x2000014c
    2f84:	0000181d 	.word	0x0000181d
    2f88:	42002400 	.word	0x42002400
    2f8c:	20000210 	.word	0x20000210
    2f90:	0000231d 	.word	0x0000231d
    2f94:	00002625 	.word	0x00002625
    2f98:	000024e5 	.word	0x000024e5
    2f9c:	000026f1 	.word	0x000026f1
    2fa0:	00002e09 	.word	0x00002e09

00002fa4 <cos>:
    2fa4:	b530      	push	{r4, r5, lr}
    2fa6:	4a20      	ldr	r2, [pc, #128]	; (3028 <cos+0x84>)
    2fa8:	004b      	lsls	r3, r1, #1
    2faa:	b087      	sub	sp, #28
    2fac:	085b      	lsrs	r3, r3, #1
    2fae:	4293      	cmp	r3, r2
    2fb0:	dd1c      	ble.n	2fec <cos+0x48>
    2fb2:	4a1e      	ldr	r2, [pc, #120]	; (302c <cos+0x88>)
    2fb4:	4293      	cmp	r3, r2
    2fb6:	dd05      	ble.n	2fc4 <cos+0x20>
    2fb8:	0002      	movs	r2, r0
    2fba:	000b      	movs	r3, r1
    2fbc:	f003 fb60 	bl	6680 <__aeabi_dsub>
    2fc0:	b007      	add	sp, #28
    2fc2:	bd30      	pop	{r4, r5, pc}
    2fc4:	aa02      	add	r2, sp, #8
    2fc6:	f000 f87b 	bl	30c0 <__ieee754_rem_pio2>
    2fca:	2303      	movs	r3, #3
    2fcc:	4018      	ands	r0, r3
    2fce:	9a04      	ldr	r2, [sp, #16]
    2fd0:	9b05      	ldr	r3, [sp, #20]
    2fd2:	2801      	cmp	r0, #1
    2fd4:	d018      	beq.n	3008 <cos+0x64>
    2fd6:	2802      	cmp	r0, #2
    2fd8:	d00d      	beq.n	2ff6 <cos+0x52>
    2fda:	2800      	cmp	r0, #0
    2fdc:	d01e      	beq.n	301c <cos+0x78>
    2fde:	9802      	ldr	r0, [sp, #8]
    2fe0:	9903      	ldr	r1, [sp, #12]
    2fe2:	2401      	movs	r4, #1
    2fe4:	9400      	str	r4, [sp, #0]
    2fe6:	f001 f819 	bl	401c <__kernel_sin>
    2fea:	e7e9      	b.n	2fc0 <cos+0x1c>
    2fec:	2200      	movs	r2, #0
    2fee:	2300      	movs	r3, #0
    2ff0:	f000 fa7e 	bl	34f0 <__kernel_cos>
    2ff4:	e7e4      	b.n	2fc0 <cos+0x1c>
    2ff6:	9802      	ldr	r0, [sp, #8]
    2ff8:	9903      	ldr	r1, [sp, #12]
    2ffa:	f000 fa79 	bl	34f0 <__kernel_cos>
    2ffe:	2380      	movs	r3, #128	; 0x80
    3000:	061b      	lsls	r3, r3, #24
    3002:	469c      	mov	ip, r3
    3004:	4461      	add	r1, ip
    3006:	e7db      	b.n	2fc0 <cos+0x1c>
    3008:	9000      	str	r0, [sp, #0]
    300a:	9802      	ldr	r0, [sp, #8]
    300c:	9903      	ldr	r1, [sp, #12]
    300e:	f001 f805 	bl	401c <__kernel_sin>
    3012:	2380      	movs	r3, #128	; 0x80
    3014:	061b      	lsls	r3, r3, #24
    3016:	469c      	mov	ip, r3
    3018:	4461      	add	r1, ip
    301a:	e7d1      	b.n	2fc0 <cos+0x1c>
    301c:	9802      	ldr	r0, [sp, #8]
    301e:	9903      	ldr	r1, [sp, #12]
    3020:	f000 fa66 	bl	34f0 <__kernel_cos>
    3024:	e7cc      	b.n	2fc0 <cos+0x1c>
    3026:	46c0      	nop			; (mov r8, r8)
    3028:	3fe921fb 	.word	0x3fe921fb
    302c:	7fefffff 	.word	0x7fefffff

00003030 <sin>:
    3030:	b530      	push	{r4, r5, lr}
    3032:	4a21      	ldr	r2, [pc, #132]	; (30b8 <sin+0x88>)
    3034:	004b      	lsls	r3, r1, #1
    3036:	b087      	sub	sp, #28
    3038:	085b      	lsrs	r3, r3, #1
    303a:	4293      	cmp	r3, r2
    303c:	dd1e      	ble.n	307c <sin+0x4c>
    303e:	4a1f      	ldr	r2, [pc, #124]	; (30bc <sin+0x8c>)
    3040:	4293      	cmp	r3, r2
    3042:	dd05      	ble.n	3050 <sin+0x20>
    3044:	0002      	movs	r2, r0
    3046:	000b      	movs	r3, r1
    3048:	f003 fb1a 	bl	6680 <__aeabi_dsub>
    304c:	b007      	add	sp, #28
    304e:	bd30      	pop	{r4, r5, pc}
    3050:	aa02      	add	r2, sp, #8
    3052:	f000 f835 	bl	30c0 <__ieee754_rem_pio2>
    3056:	2303      	movs	r3, #3
    3058:	4018      	ands	r0, r3
    305a:	9a04      	ldr	r2, [sp, #16]
    305c:	9b05      	ldr	r3, [sp, #20]
    305e:	2801      	cmp	r0, #1
    3060:	d01e      	beq.n	30a0 <sin+0x70>
    3062:	2802      	cmp	r0, #2
    3064:	d011      	beq.n	308a <sin+0x5a>
    3066:	2800      	cmp	r0, #0
    3068:	d01f      	beq.n	30aa <sin+0x7a>
    306a:	9802      	ldr	r0, [sp, #8]
    306c:	9903      	ldr	r1, [sp, #12]
    306e:	f000 fa3f 	bl	34f0 <__kernel_cos>
    3072:	2380      	movs	r3, #128	; 0x80
    3074:	061b      	lsls	r3, r3, #24
    3076:	469c      	mov	ip, r3
    3078:	4461      	add	r1, ip
    307a:	e7e7      	b.n	304c <sin+0x1c>
    307c:	2300      	movs	r3, #0
    307e:	2200      	movs	r2, #0
    3080:	9300      	str	r3, [sp, #0]
    3082:	2300      	movs	r3, #0
    3084:	f000 ffca 	bl	401c <__kernel_sin>
    3088:	e7e0      	b.n	304c <sin+0x1c>
    308a:	2401      	movs	r4, #1
    308c:	9802      	ldr	r0, [sp, #8]
    308e:	9903      	ldr	r1, [sp, #12]
    3090:	9400      	str	r4, [sp, #0]
    3092:	f000 ffc3 	bl	401c <__kernel_sin>
    3096:	2380      	movs	r3, #128	; 0x80
    3098:	061b      	lsls	r3, r3, #24
    309a:	469c      	mov	ip, r3
    309c:	4461      	add	r1, ip
    309e:	e7d5      	b.n	304c <sin+0x1c>
    30a0:	9802      	ldr	r0, [sp, #8]
    30a2:	9903      	ldr	r1, [sp, #12]
    30a4:	f000 fa24 	bl	34f0 <__kernel_cos>
    30a8:	e7d0      	b.n	304c <sin+0x1c>
    30aa:	2401      	movs	r4, #1
    30ac:	9802      	ldr	r0, [sp, #8]
    30ae:	9903      	ldr	r1, [sp, #12]
    30b0:	9400      	str	r4, [sp, #0]
    30b2:	f000 ffb3 	bl	401c <__kernel_sin>
    30b6:	e7c9      	b.n	304c <sin+0x1c>
    30b8:	3fe921fb 	.word	0x3fe921fb
    30bc:	7fefffff 	.word	0x7fefffff

000030c0 <__ieee754_rem_pio2>:
    30c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    30c2:	464e      	mov	r6, r9
    30c4:	4645      	mov	r5, r8
    30c6:	46de      	mov	lr, fp
    30c8:	4657      	mov	r7, sl
    30ca:	b5e0      	push	{r5, r6, r7, lr}
    30cc:	4bd4      	ldr	r3, [pc, #848]	; (3420 <__ieee754_rem_pio2+0x360>)
    30ce:	004c      	lsls	r4, r1, #1
    30d0:	b08f      	sub	sp, #60	; 0x3c
    30d2:	4690      	mov	r8, r2
    30d4:	4689      	mov	r9, r1
    30d6:	0864      	lsrs	r4, r4, #1
    30d8:	429c      	cmp	r4, r3
    30da:	dc00      	bgt.n	30de <__ieee754_rem_pio2+0x1e>
    30dc:	e087      	b.n	31ee <__ieee754_rem_pio2+0x12e>
    30de:	4bd1      	ldr	r3, [pc, #836]	; (3424 <__ieee754_rem_pio2+0x364>)
    30e0:	429c      	cmp	r4, r3
    30e2:	dc22      	bgt.n	312a <__ieee754_rem_pio2+0x6a>
    30e4:	4ad0      	ldr	r2, [pc, #832]	; (3428 <__ieee754_rem_pio2+0x368>)
    30e6:	2900      	cmp	r1, #0
    30e8:	dc00      	bgt.n	30ec <__ieee754_rem_pio2+0x2c>
    30ea:	e1bf      	b.n	346c <__ieee754_rem_pio2+0x3ac>
    30ec:	4bcf      	ldr	r3, [pc, #828]	; (342c <__ieee754_rem_pio2+0x36c>)
    30ee:	f003 fac7 	bl	6680 <__aeabi_dsub>
    30f2:	4bce      	ldr	r3, [pc, #824]	; (342c <__ieee754_rem_pio2+0x36c>)
    30f4:	0006      	movs	r6, r0
    30f6:	000f      	movs	r7, r1
    30f8:	429c      	cmp	r4, r3
    30fa:	d100      	bne.n	30fe <__ieee754_rem_pio2+0x3e>
    30fc:	e094      	b.n	3228 <__ieee754_rem_pio2+0x168>
    30fe:	4acc      	ldr	r2, [pc, #816]	; (3430 <__ieee754_rem_pio2+0x370>)
    3100:	4bcc      	ldr	r3, [pc, #816]	; (3434 <__ieee754_rem_pio2+0x374>)
    3102:	f003 fabd 	bl	6680 <__aeabi_dsub>
    3106:	0002      	movs	r2, r0
    3108:	000b      	movs	r3, r1
    310a:	4641      	mov	r1, r8
    310c:	0030      	movs	r0, r6
    310e:	600a      	str	r2, [r1, #0]
    3110:	604b      	str	r3, [r1, #4]
    3112:	0039      	movs	r1, r7
    3114:	f003 fab4 	bl	6680 <__aeabi_dsub>
    3118:	4bc6      	ldr	r3, [pc, #792]	; (3434 <__ieee754_rem_pio2+0x374>)
    311a:	4ac5      	ldr	r2, [pc, #788]	; (3430 <__ieee754_rem_pio2+0x370>)
    311c:	f003 fab0 	bl	6680 <__aeabi_dsub>
    3120:	4643      	mov	r3, r8
    3122:	2501      	movs	r5, #1
    3124:	6098      	str	r0, [r3, #8]
    3126:	60d9      	str	r1, [r3, #12]
    3128:	e06b      	b.n	3202 <__ieee754_rem_pio2+0x142>
    312a:	4bc3      	ldr	r3, [pc, #780]	; (3438 <__ieee754_rem_pio2+0x378>)
    312c:	429c      	cmp	r4, r3
    312e:	dc00      	bgt.n	3132 <__ieee754_rem_pio2+0x72>
    3130:	e097      	b.n	3262 <__ieee754_rem_pio2+0x1a2>
    3132:	4bc2      	ldr	r3, [pc, #776]	; (343c <__ieee754_rem_pio2+0x37c>)
    3134:	429c      	cmp	r4, r3
    3136:	dc6c      	bgt.n	3212 <__ieee754_rem_pio2+0x152>
    3138:	4ac1      	ldr	r2, [pc, #772]	; (3440 <__ieee754_rem_pio2+0x380>)
    313a:	1523      	asrs	r3, r4, #20
    313c:	4692      	mov	sl, r2
    313e:	449a      	add	sl, r3
    3140:	4651      	mov	r1, sl
    3142:	0509      	lsls	r1, r1, #20
    3144:	1a63      	subs	r3, r4, r1
    3146:	0019      	movs	r1, r3
    3148:	001d      	movs	r5, r3
    314a:	0004      	movs	r4, r0
    314c:	f003 fdae 	bl	6cac <__aeabi_d2iz>
    3150:	f003 fde0 	bl	6d14 <__aeabi_i2d>
    3154:	0002      	movs	r2, r0
    3156:	000b      	movs	r3, r1
    3158:	0020      	movs	r0, r4
    315a:	0029      	movs	r1, r5
    315c:	9208      	str	r2, [sp, #32]
    315e:	9309      	str	r3, [sp, #36]	; 0x24
    3160:	f003 fa8e 	bl	6680 <__aeabi_dsub>
    3164:	2200      	movs	r2, #0
    3166:	4bb7      	ldr	r3, [pc, #732]	; (3444 <__ieee754_rem_pio2+0x384>)
    3168:	f003 f80a 	bl	6180 <__aeabi_dmul>
    316c:	000f      	movs	r7, r1
    316e:	0006      	movs	r6, r0
    3170:	f003 fd9c 	bl	6cac <__aeabi_d2iz>
    3174:	f003 fdce 	bl	6d14 <__aeabi_i2d>
    3178:	0004      	movs	r4, r0
    317a:	000d      	movs	r5, r1
    317c:	0002      	movs	r2, r0
    317e:	000b      	movs	r3, r1
    3180:	0030      	movs	r0, r6
    3182:	0039      	movs	r1, r7
    3184:	940a      	str	r4, [sp, #40]	; 0x28
    3186:	950b      	str	r5, [sp, #44]	; 0x2c
    3188:	f003 fa7a 	bl	6680 <__aeabi_dsub>
    318c:	2200      	movs	r2, #0
    318e:	4bad      	ldr	r3, [pc, #692]	; (3444 <__ieee754_rem_pio2+0x384>)
    3190:	f002 fff6 	bl	6180 <__aeabi_dmul>
    3194:	2200      	movs	r2, #0
    3196:	2300      	movs	r3, #0
    3198:	900c      	str	r0, [sp, #48]	; 0x30
    319a:	910d      	str	r1, [sp, #52]	; 0x34
    319c:	f001 fa80 	bl	46a0 <__aeabi_dcmpeq>
    31a0:	2800      	cmp	r0, #0
    31a2:	d100      	bne.n	31a6 <__ieee754_rem_pio2+0xe6>
    31a4:	e181      	b.n	34aa <__ieee754_rem_pio2+0x3ea>
    31a6:	2300      	movs	r3, #0
    31a8:	2200      	movs	r2, #0
    31aa:	0020      	movs	r0, r4
    31ac:	0029      	movs	r1, r5
    31ae:	f001 fa77 	bl	46a0 <__aeabi_dcmpeq>
    31b2:	4243      	negs	r3, r0
    31b4:	4143      	adcs	r3, r0
    31b6:	3301      	adds	r3, #1
    31b8:	4aa3      	ldr	r2, [pc, #652]	; (3448 <__ieee754_rem_pio2+0x388>)
    31ba:	4641      	mov	r1, r8
    31bc:	9201      	str	r2, [sp, #4]
    31be:	2202      	movs	r2, #2
    31c0:	a808      	add	r0, sp, #32
    31c2:	9200      	str	r2, [sp, #0]
    31c4:	4652      	mov	r2, sl
    31c6:	f000 faad 	bl	3724 <__kernel_rem_pio2>
    31ca:	464b      	mov	r3, r9
    31cc:	0005      	movs	r5, r0
    31ce:	2b00      	cmp	r3, #0
    31d0:	da17      	bge.n	3202 <__ieee754_rem_pio2+0x142>
    31d2:	2280      	movs	r2, #128	; 0x80
    31d4:	4643      	mov	r3, r8
    31d6:	0612      	lsls	r2, r2, #24
    31d8:	4694      	mov	ip, r2
    31da:	4642      	mov	r2, r8
    31dc:	685b      	ldr	r3, [r3, #4]
    31de:	4245      	negs	r5, r0
    31e0:	4463      	add	r3, ip
    31e2:	6053      	str	r3, [r2, #4]
    31e4:	68d3      	ldr	r3, [r2, #12]
    31e6:	4642      	mov	r2, r8
    31e8:	4463      	add	r3, ip
    31ea:	60d3      	str	r3, [r2, #12]
    31ec:	e009      	b.n	3202 <__ieee754_rem_pio2+0x142>
    31ee:	000b      	movs	r3, r1
    31f0:	0002      	movs	r2, r0
    31f2:	4641      	mov	r1, r8
    31f4:	600a      	str	r2, [r1, #0]
    31f6:	604b      	str	r3, [r1, #4]
    31f8:	2200      	movs	r2, #0
    31fa:	2300      	movs	r3, #0
    31fc:	2500      	movs	r5, #0
    31fe:	608a      	str	r2, [r1, #8]
    3200:	60cb      	str	r3, [r1, #12]
    3202:	0028      	movs	r0, r5
    3204:	b00f      	add	sp, #60	; 0x3c
    3206:	bc3c      	pop	{r2, r3, r4, r5}
    3208:	4690      	mov	r8, r2
    320a:	4699      	mov	r9, r3
    320c:	46a2      	mov	sl, r4
    320e:	46ab      	mov	fp, r5
    3210:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3212:	000b      	movs	r3, r1
    3214:	0002      	movs	r2, r0
    3216:	f003 fa33 	bl	6680 <__aeabi_dsub>
    321a:	4643      	mov	r3, r8
    321c:	2500      	movs	r5, #0
    321e:	6098      	str	r0, [r3, #8]
    3220:	60d9      	str	r1, [r3, #12]
    3222:	6018      	str	r0, [r3, #0]
    3224:	6059      	str	r1, [r3, #4]
    3226:	e7ec      	b.n	3202 <__ieee754_rem_pio2+0x142>
    3228:	22d3      	movs	r2, #211	; 0xd3
    322a:	4b82      	ldr	r3, [pc, #520]	; (3434 <__ieee754_rem_pio2+0x374>)
    322c:	0552      	lsls	r2, r2, #21
    322e:	f003 fa27 	bl	6680 <__aeabi_dsub>
    3232:	4a86      	ldr	r2, [pc, #536]	; (344c <__ieee754_rem_pio2+0x38c>)
    3234:	4b86      	ldr	r3, [pc, #536]	; (3450 <__ieee754_rem_pio2+0x390>)
    3236:	000d      	movs	r5, r1
    3238:	0004      	movs	r4, r0
    323a:	f003 fa21 	bl	6680 <__aeabi_dsub>
    323e:	0002      	movs	r2, r0
    3240:	000b      	movs	r3, r1
    3242:	4641      	mov	r1, r8
    3244:	0020      	movs	r0, r4
    3246:	600a      	str	r2, [r1, #0]
    3248:	604b      	str	r3, [r1, #4]
    324a:	0029      	movs	r1, r5
    324c:	f003 fa18 	bl	6680 <__aeabi_dsub>
    3250:	4b7f      	ldr	r3, [pc, #508]	; (3450 <__ieee754_rem_pio2+0x390>)
    3252:	4a7e      	ldr	r2, [pc, #504]	; (344c <__ieee754_rem_pio2+0x38c>)
    3254:	f003 fa14 	bl	6680 <__aeabi_dsub>
    3258:	4643      	mov	r3, r8
    325a:	2501      	movs	r5, #1
    325c:	6098      	str	r0, [r3, #8]
    325e:	60d9      	str	r1, [r3, #12]
    3260:	e7cf      	b.n	3202 <__ieee754_rem_pio2+0x142>
    3262:	f000 ff8b 	bl	417c <fabs>
    3266:	4a7b      	ldr	r2, [pc, #492]	; (3454 <__ieee754_rem_pio2+0x394>)
    3268:	4b7b      	ldr	r3, [pc, #492]	; (3458 <__ieee754_rem_pio2+0x398>)
    326a:	0006      	movs	r6, r0
    326c:	000f      	movs	r7, r1
    326e:	f002 ff87 	bl	6180 <__aeabi_dmul>
    3272:	2200      	movs	r2, #0
    3274:	4b79      	ldr	r3, [pc, #484]	; (345c <__ieee754_rem_pio2+0x39c>)
    3276:	f002 f83f 	bl	52f8 <__aeabi_dadd>
    327a:	f003 fd17 	bl	6cac <__aeabi_d2iz>
    327e:	0005      	movs	r5, r0
    3280:	f003 fd48 	bl	6d14 <__aeabi_i2d>
    3284:	4a68      	ldr	r2, [pc, #416]	; (3428 <__ieee754_rem_pio2+0x368>)
    3286:	4b69      	ldr	r3, [pc, #420]	; (342c <__ieee754_rem_pio2+0x36c>)
    3288:	9004      	str	r0, [sp, #16]
    328a:	9105      	str	r1, [sp, #20]
    328c:	f002 ff78 	bl	6180 <__aeabi_dmul>
    3290:	0002      	movs	r2, r0
    3292:	000b      	movs	r3, r1
    3294:	0030      	movs	r0, r6
    3296:	0039      	movs	r1, r7
    3298:	f003 f9f2 	bl	6680 <__aeabi_dsub>
    329c:	4a64      	ldr	r2, [pc, #400]	; (3430 <__ieee754_rem_pio2+0x370>)
    329e:	0006      	movs	r6, r0
    32a0:	000f      	movs	r7, r1
    32a2:	9804      	ldr	r0, [sp, #16]
    32a4:	9905      	ldr	r1, [sp, #20]
    32a6:	4b63      	ldr	r3, [pc, #396]	; (3434 <__ieee754_rem_pio2+0x374>)
    32a8:	f002 ff6a 	bl	6180 <__aeabi_dmul>
    32ac:	9002      	str	r0, [sp, #8]
    32ae:	9103      	str	r1, [sp, #12]
    32b0:	2d1f      	cmp	r5, #31
    32b2:	dc33      	bgt.n	331c <__ieee754_rem_pio2+0x25c>
    32b4:	1e6b      	subs	r3, r5, #1
    32b6:	4a6a      	ldr	r2, [pc, #424]	; (3460 <__ieee754_rem_pio2+0x3a0>)
    32b8:	009b      	lsls	r3, r3, #2
    32ba:	589b      	ldr	r3, [r3, r2]
    32bc:	429c      	cmp	r4, r3
    32be:	d02d      	beq.n	331c <__ieee754_rem_pio2+0x25c>
    32c0:	0002      	movs	r2, r0
    32c2:	000b      	movs	r3, r1
    32c4:	0030      	movs	r0, r6
    32c6:	0039      	movs	r1, r7
    32c8:	f003 f9da 	bl	6680 <__aeabi_dsub>
    32cc:	000b      	movs	r3, r1
    32ce:	468a      	mov	sl, r1
    32d0:	0002      	movs	r2, r0
    32d2:	4641      	mov	r1, r8
    32d4:	4683      	mov	fp, r0
    32d6:	600a      	str	r2, [r1, #0]
    32d8:	604b      	str	r3, [r1, #4]
    32da:	465a      	mov	r2, fp
    32dc:	4653      	mov	r3, sl
    32de:	0030      	movs	r0, r6
    32e0:	0039      	movs	r1, r7
    32e2:	f003 f9cd 	bl	6680 <__aeabi_dsub>
    32e6:	9a02      	ldr	r2, [sp, #8]
    32e8:	9b03      	ldr	r3, [sp, #12]
    32ea:	f003 f9c9 	bl	6680 <__aeabi_dsub>
    32ee:	4644      	mov	r4, r8
    32f0:	000b      	movs	r3, r1
    32f2:	0002      	movs	r2, r0
    32f4:	60a2      	str	r2, [r4, #8]
    32f6:	60e3      	str	r3, [r4, #12]
    32f8:	464b      	mov	r3, r9
    32fa:	2b00      	cmp	r3, #0
    32fc:	db00      	blt.n	3300 <__ieee754_rem_pio2+0x240>
    32fe:	e780      	b.n	3202 <__ieee754_rem_pio2+0x142>
    3300:	465b      	mov	r3, fp
    3302:	6023      	str	r3, [r4, #0]
    3304:	2380      	movs	r3, #128	; 0x80
    3306:	061b      	lsls	r3, r3, #24
    3308:	4453      	add	r3, sl
    330a:	6063      	str	r3, [r4, #4]
    330c:	2380      	movs	r3, #128	; 0x80
    330e:	061b      	lsls	r3, r3, #24
    3310:	469c      	mov	ip, r3
    3312:	4461      	add	r1, ip
    3314:	60a0      	str	r0, [r4, #8]
    3316:	60e1      	str	r1, [r4, #12]
    3318:	426d      	negs	r5, r5
    331a:	e772      	b.n	3202 <__ieee754_rem_pio2+0x142>
    331c:	9a02      	ldr	r2, [sp, #8]
    331e:	9b03      	ldr	r3, [sp, #12]
    3320:	0030      	movs	r0, r6
    3322:	0039      	movs	r1, r7
    3324:	f003 f9ac 	bl	6680 <__aeabi_dsub>
    3328:	000b      	movs	r3, r1
    332a:	468a      	mov	sl, r1
    332c:	0002      	movs	r2, r0
    332e:	4641      	mov	r1, r8
    3330:	600a      	str	r2, [r1, #0]
    3332:	604b      	str	r3, [r1, #4]
    3334:	4653      	mov	r3, sl
    3336:	005b      	lsls	r3, r3, #1
    3338:	1524      	asrs	r4, r4, #20
    333a:	0d5b      	lsrs	r3, r3, #21
    333c:	4683      	mov	fp, r0
    333e:	1ae3      	subs	r3, r4, r3
    3340:	2b10      	cmp	r3, #16
    3342:	ddca      	ble.n	32da <__ieee754_rem_pio2+0x21a>
    3344:	9804      	ldr	r0, [sp, #16]
    3346:	9905      	ldr	r1, [sp, #20]
    3348:	22d3      	movs	r2, #211	; 0xd3
    334a:	4b3a      	ldr	r3, [pc, #232]	; (3434 <__ieee754_rem_pio2+0x374>)
    334c:	0552      	lsls	r2, r2, #21
    334e:	f002 ff17 	bl	6180 <__aeabi_dmul>
    3352:	9002      	str	r0, [sp, #8]
    3354:	9103      	str	r1, [sp, #12]
    3356:	0002      	movs	r2, r0
    3358:	000b      	movs	r3, r1
    335a:	0030      	movs	r0, r6
    335c:	0039      	movs	r1, r7
    335e:	f003 f98f 	bl	6680 <__aeabi_dsub>
    3362:	9006      	str	r0, [sp, #24]
    3364:	9107      	str	r1, [sp, #28]
    3366:	0002      	movs	r2, r0
    3368:	000b      	movs	r3, r1
    336a:	0030      	movs	r0, r6
    336c:	0039      	movs	r1, r7
    336e:	f003 f987 	bl	6680 <__aeabi_dsub>
    3372:	9a02      	ldr	r2, [sp, #8]
    3374:	9b03      	ldr	r3, [sp, #12]
    3376:	f003 f983 	bl	6680 <__aeabi_dsub>
    337a:	0006      	movs	r6, r0
    337c:	000f      	movs	r7, r1
    337e:	9804      	ldr	r0, [sp, #16]
    3380:	9905      	ldr	r1, [sp, #20]
    3382:	4a32      	ldr	r2, [pc, #200]	; (344c <__ieee754_rem_pio2+0x38c>)
    3384:	4b32      	ldr	r3, [pc, #200]	; (3450 <__ieee754_rem_pio2+0x390>)
    3386:	f002 fefb 	bl	6180 <__aeabi_dmul>
    338a:	0032      	movs	r2, r6
    338c:	003b      	movs	r3, r7
    338e:	f003 f977 	bl	6680 <__aeabi_dsub>
    3392:	9e06      	ldr	r6, [sp, #24]
    3394:	9f07      	ldr	r7, [sp, #28]
    3396:	0002      	movs	r2, r0
    3398:	000b      	movs	r3, r1
    339a:	0030      	movs	r0, r6
    339c:	0039      	movs	r1, r7
    339e:	9202      	str	r2, [sp, #8]
    33a0:	9303      	str	r3, [sp, #12]
    33a2:	f003 f96d 	bl	6680 <__aeabi_dsub>
    33a6:	000b      	movs	r3, r1
    33a8:	468a      	mov	sl, r1
    33aa:	0002      	movs	r2, r0
    33ac:	4641      	mov	r1, r8
    33ae:	600a      	str	r2, [r1, #0]
    33b0:	604b      	str	r3, [r1, #4]
    33b2:	4653      	mov	r3, sl
    33b4:	005b      	lsls	r3, r3, #1
    33b6:	0d5b      	lsrs	r3, r3, #21
    33b8:	4683      	mov	fp, r0
    33ba:	1ae4      	subs	r4, r4, r3
    33bc:	9606      	str	r6, [sp, #24]
    33be:	9707      	str	r7, [sp, #28]
    33c0:	2c31      	cmp	r4, #49	; 0x31
    33c2:	dd8a      	ble.n	32da <__ieee754_rem_pio2+0x21a>
    33c4:	9804      	ldr	r0, [sp, #16]
    33c6:	9905      	ldr	r1, [sp, #20]
    33c8:	22b8      	movs	r2, #184	; 0xb8
    33ca:	4b21      	ldr	r3, [pc, #132]	; (3450 <__ieee754_rem_pio2+0x390>)
    33cc:	0592      	lsls	r2, r2, #22
    33ce:	f002 fed7 	bl	6180 <__aeabi_dmul>
    33d2:	0003      	movs	r3, r0
    33d4:	000c      	movs	r4, r1
    33d6:	0002      	movs	r2, r0
    33d8:	9302      	str	r3, [sp, #8]
    33da:	9403      	str	r4, [sp, #12]
    33dc:	0030      	movs	r0, r6
    33de:	000b      	movs	r3, r1
    33e0:	0039      	movs	r1, r7
    33e2:	f003 f94d 	bl	6680 <__aeabi_dsub>
    33e6:	0002      	movs	r2, r0
    33e8:	000b      	movs	r3, r1
    33ea:	0006      	movs	r6, r0
    33ec:	000f      	movs	r7, r1
    33ee:	9806      	ldr	r0, [sp, #24]
    33f0:	9907      	ldr	r1, [sp, #28]
    33f2:	f003 f945 	bl	6680 <__aeabi_dsub>
    33f6:	9a02      	ldr	r2, [sp, #8]
    33f8:	9b03      	ldr	r3, [sp, #12]
    33fa:	f003 f941 	bl	6680 <__aeabi_dsub>
    33fe:	4a19      	ldr	r2, [pc, #100]	; (3464 <__ieee754_rem_pio2+0x3a4>)
    3400:	9002      	str	r0, [sp, #8]
    3402:	9103      	str	r1, [sp, #12]
    3404:	9804      	ldr	r0, [sp, #16]
    3406:	9905      	ldr	r1, [sp, #20]
    3408:	4b17      	ldr	r3, [pc, #92]	; (3468 <__ieee754_rem_pio2+0x3a8>)
    340a:	f002 feb9 	bl	6180 <__aeabi_dmul>
    340e:	9a02      	ldr	r2, [sp, #8]
    3410:	9b03      	ldr	r3, [sp, #12]
    3412:	f003 f935 	bl	6680 <__aeabi_dsub>
    3416:	0002      	movs	r2, r0
    3418:	000b      	movs	r3, r1
    341a:	9202      	str	r2, [sp, #8]
    341c:	9303      	str	r3, [sp, #12]
    341e:	e751      	b.n	32c4 <__ieee754_rem_pio2+0x204>
    3420:	3fe921fb 	.word	0x3fe921fb
    3424:	4002d97b 	.word	0x4002d97b
    3428:	54400000 	.word	0x54400000
    342c:	3ff921fb 	.word	0x3ff921fb
    3430:	1a626331 	.word	0x1a626331
    3434:	3dd0b461 	.word	0x3dd0b461
    3438:	413921fb 	.word	0x413921fb
    343c:	7fefffff 	.word	0x7fefffff
    3440:	fffffbea 	.word	0xfffffbea
    3444:	41700000 	.word	0x41700000
    3448:	000072a8 	.word	0x000072a8
    344c:	2e037073 	.word	0x2e037073
    3450:	3ba3198a 	.word	0x3ba3198a
    3454:	6dc9c883 	.word	0x6dc9c883
    3458:	3fe45f30 	.word	0x3fe45f30
    345c:	3fe00000 	.word	0x3fe00000
    3460:	00007228 	.word	0x00007228
    3464:	252049c1 	.word	0x252049c1
    3468:	397b839a 	.word	0x397b839a
    346c:	4b1b      	ldr	r3, [pc, #108]	; (34dc <__ieee754_rem_pio2+0x41c>)
    346e:	f001 ff43 	bl	52f8 <__aeabi_dadd>
    3472:	4b1a      	ldr	r3, [pc, #104]	; (34dc <__ieee754_rem_pio2+0x41c>)
    3474:	0006      	movs	r6, r0
    3476:	000f      	movs	r7, r1
    3478:	429c      	cmp	r4, r3
    347a:	d018      	beq.n	34ae <__ieee754_rem_pio2+0x3ee>
    347c:	4a18      	ldr	r2, [pc, #96]	; (34e0 <__ieee754_rem_pio2+0x420>)
    347e:	4b19      	ldr	r3, [pc, #100]	; (34e4 <__ieee754_rem_pio2+0x424>)
    3480:	f001 ff3a 	bl	52f8 <__aeabi_dadd>
    3484:	0002      	movs	r2, r0
    3486:	000b      	movs	r3, r1
    3488:	4641      	mov	r1, r8
    348a:	0030      	movs	r0, r6
    348c:	600a      	str	r2, [r1, #0]
    348e:	604b      	str	r3, [r1, #4]
    3490:	0039      	movs	r1, r7
    3492:	f003 f8f5 	bl	6680 <__aeabi_dsub>
    3496:	4a12      	ldr	r2, [pc, #72]	; (34e0 <__ieee754_rem_pio2+0x420>)
    3498:	4b12      	ldr	r3, [pc, #72]	; (34e4 <__ieee754_rem_pio2+0x424>)
    349a:	f001 ff2d 	bl	52f8 <__aeabi_dadd>
    349e:	2501      	movs	r5, #1
    34a0:	4643      	mov	r3, r8
    34a2:	426d      	negs	r5, r5
    34a4:	6098      	str	r0, [r3, #8]
    34a6:	60d9      	str	r1, [r3, #12]
    34a8:	e6ab      	b.n	3202 <__ieee754_rem_pio2+0x142>
    34aa:	2303      	movs	r3, #3
    34ac:	e684      	b.n	31b8 <__ieee754_rem_pio2+0xf8>
    34ae:	22d3      	movs	r2, #211	; 0xd3
    34b0:	4b0c      	ldr	r3, [pc, #48]	; (34e4 <__ieee754_rem_pio2+0x424>)
    34b2:	0552      	lsls	r2, r2, #21
    34b4:	f001 ff20 	bl	52f8 <__aeabi_dadd>
    34b8:	4a0b      	ldr	r2, [pc, #44]	; (34e8 <__ieee754_rem_pio2+0x428>)
    34ba:	4b0c      	ldr	r3, [pc, #48]	; (34ec <__ieee754_rem_pio2+0x42c>)
    34bc:	0004      	movs	r4, r0
    34be:	000d      	movs	r5, r1
    34c0:	f001 ff1a 	bl	52f8 <__aeabi_dadd>
    34c4:	0002      	movs	r2, r0
    34c6:	000b      	movs	r3, r1
    34c8:	4641      	mov	r1, r8
    34ca:	0020      	movs	r0, r4
    34cc:	600a      	str	r2, [r1, #0]
    34ce:	604b      	str	r3, [r1, #4]
    34d0:	0029      	movs	r1, r5
    34d2:	f003 f8d5 	bl	6680 <__aeabi_dsub>
    34d6:	4a04      	ldr	r2, [pc, #16]	; (34e8 <__ieee754_rem_pio2+0x428>)
    34d8:	4b04      	ldr	r3, [pc, #16]	; (34ec <__ieee754_rem_pio2+0x42c>)
    34da:	e7de      	b.n	349a <__ieee754_rem_pio2+0x3da>
    34dc:	3ff921fb 	.word	0x3ff921fb
    34e0:	1a626331 	.word	0x1a626331
    34e4:	3dd0b461 	.word	0x3dd0b461
    34e8:	2e037073 	.word	0x2e037073
    34ec:	3ba3198a 	.word	0x3ba3198a

000034f0 <__kernel_cos>:
    34f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    34f2:	4647      	mov	r7, r8
    34f4:	46ce      	mov	lr, r9
    34f6:	b580      	push	{r7, lr}
    34f8:	b087      	sub	sp, #28
    34fa:	9200      	str	r2, [sp, #0]
    34fc:	9301      	str	r3, [sp, #4]
    34fe:	4b75      	ldr	r3, [pc, #468]	; (36d4 <__kernel_cos+0x1e4>)
    3500:	004f      	lsls	r7, r1, #1
    3502:	4681      	mov	r9, r0
    3504:	4688      	mov	r8, r1
    3506:	087f      	lsrs	r7, r7, #1
    3508:	429f      	cmp	r7, r3
    350a:	dc63      	bgt.n	35d4 <__kernel_cos+0xe4>
    350c:	f003 fbce 	bl	6cac <__aeabi_d2iz>
    3510:	2800      	cmp	r0, #0
    3512:	d100      	bne.n	3516 <__kernel_cos+0x26>
    3514:	e0da      	b.n	36cc <__kernel_cos+0x1dc>
    3516:	464a      	mov	r2, r9
    3518:	4643      	mov	r3, r8
    351a:	4648      	mov	r0, r9
    351c:	4641      	mov	r1, r8
    351e:	f002 fe2f 	bl	6180 <__aeabi_dmul>
    3522:	0004      	movs	r4, r0
    3524:	000d      	movs	r5, r1
    3526:	4a6c      	ldr	r2, [pc, #432]	; (36d8 <__kernel_cos+0x1e8>)
    3528:	4b6c      	ldr	r3, [pc, #432]	; (36dc <__kernel_cos+0x1ec>)
    352a:	f002 fe29 	bl	6180 <__aeabi_dmul>
    352e:	4a6c      	ldr	r2, [pc, #432]	; (36e0 <__kernel_cos+0x1f0>)
    3530:	4b6c      	ldr	r3, [pc, #432]	; (36e4 <__kernel_cos+0x1f4>)
    3532:	f001 fee1 	bl	52f8 <__aeabi_dadd>
    3536:	0022      	movs	r2, r4
    3538:	002b      	movs	r3, r5
    353a:	f002 fe21 	bl	6180 <__aeabi_dmul>
    353e:	4a6a      	ldr	r2, [pc, #424]	; (36e8 <__kernel_cos+0x1f8>)
    3540:	4b6a      	ldr	r3, [pc, #424]	; (36ec <__kernel_cos+0x1fc>)
    3542:	f003 f89d 	bl	6680 <__aeabi_dsub>
    3546:	0022      	movs	r2, r4
    3548:	002b      	movs	r3, r5
    354a:	f002 fe19 	bl	6180 <__aeabi_dmul>
    354e:	4a68      	ldr	r2, [pc, #416]	; (36f0 <__kernel_cos+0x200>)
    3550:	4b68      	ldr	r3, [pc, #416]	; (36f4 <__kernel_cos+0x204>)
    3552:	f001 fed1 	bl	52f8 <__aeabi_dadd>
    3556:	0022      	movs	r2, r4
    3558:	002b      	movs	r3, r5
    355a:	f002 fe11 	bl	6180 <__aeabi_dmul>
    355e:	4a66      	ldr	r2, [pc, #408]	; (36f8 <__kernel_cos+0x208>)
    3560:	4b66      	ldr	r3, [pc, #408]	; (36fc <__kernel_cos+0x20c>)
    3562:	f003 f88d 	bl	6680 <__aeabi_dsub>
    3566:	0022      	movs	r2, r4
    3568:	002b      	movs	r3, r5
    356a:	f002 fe09 	bl	6180 <__aeabi_dmul>
    356e:	4a64      	ldr	r2, [pc, #400]	; (3700 <__kernel_cos+0x210>)
    3570:	4b64      	ldr	r3, [pc, #400]	; (3704 <__kernel_cos+0x214>)
    3572:	f001 fec1 	bl	52f8 <__aeabi_dadd>
    3576:	0022      	movs	r2, r4
    3578:	002b      	movs	r3, r5
    357a:	f002 fe01 	bl	6180 <__aeabi_dmul>
    357e:	9002      	str	r0, [sp, #8]
    3580:	9103      	str	r1, [sp, #12]
    3582:	2200      	movs	r2, #0
    3584:	4b60      	ldr	r3, [pc, #384]	; (3708 <__kernel_cos+0x218>)
    3586:	0020      	movs	r0, r4
    3588:	0029      	movs	r1, r5
    358a:	f002 fdf9 	bl	6180 <__aeabi_dmul>
    358e:	9a02      	ldr	r2, [sp, #8]
    3590:	9b03      	ldr	r3, [sp, #12]
    3592:	0006      	movs	r6, r0
    3594:	000f      	movs	r7, r1
    3596:	0020      	movs	r0, r4
    3598:	0029      	movs	r1, r5
    359a:	f002 fdf1 	bl	6180 <__aeabi_dmul>
    359e:	9a00      	ldr	r2, [sp, #0]
    35a0:	9b01      	ldr	r3, [sp, #4]
    35a2:	0004      	movs	r4, r0
    35a4:	000d      	movs	r5, r1
    35a6:	4648      	mov	r0, r9
    35a8:	4641      	mov	r1, r8
    35aa:	f002 fde9 	bl	6180 <__aeabi_dmul>
    35ae:	0002      	movs	r2, r0
    35b0:	000b      	movs	r3, r1
    35b2:	0020      	movs	r0, r4
    35b4:	0029      	movs	r1, r5
    35b6:	f003 f863 	bl	6680 <__aeabi_dsub>
    35ba:	0002      	movs	r2, r0
    35bc:	000b      	movs	r3, r1
    35be:	0030      	movs	r0, r6
    35c0:	0039      	movs	r1, r7
    35c2:	f003 f85d 	bl	6680 <__aeabi_dsub>
    35c6:	0002      	movs	r2, r0
    35c8:	000b      	movs	r3, r1
    35ca:	2000      	movs	r0, #0
    35cc:	494f      	ldr	r1, [pc, #316]	; (370c <__kernel_cos+0x21c>)
    35ce:	f003 f857 	bl	6680 <__aeabi_dsub>
    35d2:	e070      	b.n	36b6 <__kernel_cos+0x1c6>
    35d4:	0002      	movs	r2, r0
    35d6:	000b      	movs	r3, r1
    35d8:	f002 fdd2 	bl	6180 <__aeabi_dmul>
    35dc:	0004      	movs	r4, r0
    35de:	000d      	movs	r5, r1
    35e0:	4a3d      	ldr	r2, [pc, #244]	; (36d8 <__kernel_cos+0x1e8>)
    35e2:	4b3e      	ldr	r3, [pc, #248]	; (36dc <__kernel_cos+0x1ec>)
    35e4:	f002 fdcc 	bl	6180 <__aeabi_dmul>
    35e8:	4a3d      	ldr	r2, [pc, #244]	; (36e0 <__kernel_cos+0x1f0>)
    35ea:	4b3e      	ldr	r3, [pc, #248]	; (36e4 <__kernel_cos+0x1f4>)
    35ec:	f001 fe84 	bl	52f8 <__aeabi_dadd>
    35f0:	0022      	movs	r2, r4
    35f2:	002b      	movs	r3, r5
    35f4:	f002 fdc4 	bl	6180 <__aeabi_dmul>
    35f8:	4a3b      	ldr	r2, [pc, #236]	; (36e8 <__kernel_cos+0x1f8>)
    35fa:	4b3c      	ldr	r3, [pc, #240]	; (36ec <__kernel_cos+0x1fc>)
    35fc:	f003 f840 	bl	6680 <__aeabi_dsub>
    3600:	0022      	movs	r2, r4
    3602:	002b      	movs	r3, r5
    3604:	f002 fdbc 	bl	6180 <__aeabi_dmul>
    3608:	4a39      	ldr	r2, [pc, #228]	; (36f0 <__kernel_cos+0x200>)
    360a:	4b3a      	ldr	r3, [pc, #232]	; (36f4 <__kernel_cos+0x204>)
    360c:	f001 fe74 	bl	52f8 <__aeabi_dadd>
    3610:	0022      	movs	r2, r4
    3612:	002b      	movs	r3, r5
    3614:	f002 fdb4 	bl	6180 <__aeabi_dmul>
    3618:	4a37      	ldr	r2, [pc, #220]	; (36f8 <__kernel_cos+0x208>)
    361a:	4b38      	ldr	r3, [pc, #224]	; (36fc <__kernel_cos+0x20c>)
    361c:	f003 f830 	bl	6680 <__aeabi_dsub>
    3620:	0022      	movs	r2, r4
    3622:	002b      	movs	r3, r5
    3624:	f002 fdac 	bl	6180 <__aeabi_dmul>
    3628:	4a35      	ldr	r2, [pc, #212]	; (3700 <__kernel_cos+0x210>)
    362a:	4b36      	ldr	r3, [pc, #216]	; (3704 <__kernel_cos+0x214>)
    362c:	f001 fe64 	bl	52f8 <__aeabi_dadd>
    3630:	002b      	movs	r3, r5
    3632:	0022      	movs	r2, r4
    3634:	f002 fda4 	bl	6180 <__aeabi_dmul>
    3638:	4b35      	ldr	r3, [pc, #212]	; (3710 <__kernel_cos+0x220>)
    363a:	9002      	str	r0, [sp, #8]
    363c:	9103      	str	r1, [sp, #12]
    363e:	429f      	cmp	r7, r3
    3640:	dd9f      	ble.n	3582 <__kernel_cos+0x92>
    3642:	4b34      	ldr	r3, [pc, #208]	; (3714 <__kernel_cos+0x224>)
    3644:	2200      	movs	r2, #0
    3646:	429f      	cmp	r7, r3
    3648:	dc3a      	bgt.n	36c0 <__kernel_cos+0x1d0>
    364a:	4933      	ldr	r1, [pc, #204]	; (3718 <__kernel_cos+0x228>)
    364c:	2000      	movs	r0, #0
    364e:	187b      	adds	r3, r7, r1
    3650:	492e      	ldr	r1, [pc, #184]	; (370c <__kernel_cos+0x21c>)
    3652:	0016      	movs	r6, r2
    3654:	001f      	movs	r7, r3
    3656:	f003 f813 	bl	6680 <__aeabi_dsub>
    365a:	9004      	str	r0, [sp, #16]
    365c:	9105      	str	r1, [sp, #20]
    365e:	2200      	movs	r2, #0
    3660:	4b29      	ldr	r3, [pc, #164]	; (3708 <__kernel_cos+0x218>)
    3662:	0020      	movs	r0, r4
    3664:	0029      	movs	r1, r5
    3666:	f002 fd8b 	bl	6180 <__aeabi_dmul>
    366a:	0032      	movs	r2, r6
    366c:	003b      	movs	r3, r7
    366e:	f003 f807 	bl	6680 <__aeabi_dsub>
    3672:	9a02      	ldr	r2, [sp, #8]
    3674:	9b03      	ldr	r3, [sp, #12]
    3676:	0006      	movs	r6, r0
    3678:	000f      	movs	r7, r1
    367a:	0020      	movs	r0, r4
    367c:	0029      	movs	r1, r5
    367e:	f002 fd7f 	bl	6180 <__aeabi_dmul>
    3682:	9a00      	ldr	r2, [sp, #0]
    3684:	9b01      	ldr	r3, [sp, #4]
    3686:	0004      	movs	r4, r0
    3688:	000d      	movs	r5, r1
    368a:	4648      	mov	r0, r9
    368c:	4641      	mov	r1, r8
    368e:	f002 fd77 	bl	6180 <__aeabi_dmul>
    3692:	0002      	movs	r2, r0
    3694:	000b      	movs	r3, r1
    3696:	0020      	movs	r0, r4
    3698:	0029      	movs	r1, r5
    369a:	f002 fff1 	bl	6680 <__aeabi_dsub>
    369e:	0002      	movs	r2, r0
    36a0:	000b      	movs	r3, r1
    36a2:	0030      	movs	r0, r6
    36a4:	0039      	movs	r1, r7
    36a6:	f002 ffeb 	bl	6680 <__aeabi_dsub>
    36aa:	0002      	movs	r2, r0
    36ac:	000b      	movs	r3, r1
    36ae:	9804      	ldr	r0, [sp, #16]
    36b0:	9905      	ldr	r1, [sp, #20]
    36b2:	f002 ffe5 	bl	6680 <__aeabi_dsub>
    36b6:	b007      	add	sp, #28
    36b8:	bc0c      	pop	{r2, r3}
    36ba:	4690      	mov	r8, r2
    36bc:	4699      	mov	r9, r3
    36be:	bdf0      	pop	{r4, r5, r6, r7, pc}
    36c0:	4b16      	ldr	r3, [pc, #88]	; (371c <__kernel_cos+0x22c>)
    36c2:	2600      	movs	r6, #0
    36c4:	9204      	str	r2, [sp, #16]
    36c6:	9305      	str	r3, [sp, #20]
    36c8:	4f15      	ldr	r7, [pc, #84]	; (3720 <__kernel_cos+0x230>)
    36ca:	e7c8      	b.n	365e <__kernel_cos+0x16e>
    36cc:	2000      	movs	r0, #0
    36ce:	490f      	ldr	r1, [pc, #60]	; (370c <__kernel_cos+0x21c>)
    36d0:	e7f1      	b.n	36b6 <__kernel_cos+0x1c6>
    36d2:	46c0      	nop			; (mov r8, r8)
    36d4:	3e3fffff 	.word	0x3e3fffff
    36d8:	be8838d4 	.word	0xbe8838d4
    36dc:	bda8fae9 	.word	0xbda8fae9
    36e0:	bdb4b1c4 	.word	0xbdb4b1c4
    36e4:	3e21ee9e 	.word	0x3e21ee9e
    36e8:	809c52ad 	.word	0x809c52ad
    36ec:	3e927e4f 	.word	0x3e927e4f
    36f0:	19cb1590 	.word	0x19cb1590
    36f4:	3efa01a0 	.word	0x3efa01a0
    36f8:	16c15177 	.word	0x16c15177
    36fc:	3f56c16c 	.word	0x3f56c16c
    3700:	5555554c 	.word	0x5555554c
    3704:	3fa55555 	.word	0x3fa55555
    3708:	3fe00000 	.word	0x3fe00000
    370c:	3ff00000 	.word	0x3ff00000
    3710:	3fd33332 	.word	0x3fd33332
    3714:	3fe90000 	.word	0x3fe90000
    3718:	ffe00000 	.word	0xffe00000
    371c:	3fe70000 	.word	0x3fe70000
    3720:	3fd20000 	.word	0x3fd20000

00003724 <__kernel_rem_pio2>:
    3724:	b5f0      	push	{r4, r5, r6, r7, lr}
    3726:	46de      	mov	lr, fp
    3728:	464e      	mov	r6, r9
    372a:	4645      	mov	r5, r8
    372c:	4657      	mov	r7, sl
    372e:	b5e0      	push	{r5, r6, r7, lr}
    3730:	4ca3      	ldr	r4, [pc, #652]	; (39c0 <__kernel_rem_pio2+0x29c>)
    3732:	44a5      	add	sp, r4
    3734:	9107      	str	r1, [sp, #28]
    3736:	0019      	movs	r1, r3
    3738:	0014      	movs	r4, r2
    373a:	9aa4      	ldr	r2, [sp, #656]	; 0x290
    373c:	9309      	str	r3, [sp, #36]	; 0x24
    373e:	4ba1      	ldr	r3, [pc, #644]	; (39c4 <__kernel_rem_pio2+0x2a0>)
    3740:	0092      	lsls	r2, r2, #2
    3742:	58d2      	ldr	r2, [r2, r3]
    3744:	000b      	movs	r3, r1
    3746:	9003      	str	r0, [sp, #12]
    3748:	3b01      	subs	r3, #1
    374a:	1ee0      	subs	r0, r4, #3
    374c:	2118      	movs	r1, #24
    374e:	001d      	movs	r5, r3
    3750:	0016      	movs	r6, r2
    3752:	9206      	str	r2, [sp, #24]
    3754:	9302      	str	r3, [sp, #8]
    3756:	f000 fea7 	bl	44a8 <__divsi3>
    375a:	43c3      	mvns	r3, r0
    375c:	0002      	movs	r2, r0
    375e:	17db      	asrs	r3, r3, #31
    3760:	401a      	ands	r2, r3
    3762:	0013      	movs	r3, r2
    3764:	0011      	movs	r1, r2
    3766:	3301      	adds	r3, #1
    3768:	920b      	str	r2, [sp, #44]	; 0x2c
    376a:	009a      	lsls	r2, r3, #2
    376c:	1a9b      	subs	r3, r3, r2
    376e:	00db      	lsls	r3, r3, #3
    3770:	191b      	adds	r3, r3, r4
    3772:	9304      	str	r3, [sp, #16]
    3774:	1b4c      	subs	r4, r1, r5
    3776:	1976      	adds	r6, r6, r5
    3778:	d418      	bmi.n	37ac <__kernel_rem_pio2+0x88>
    377a:	9ba5      	ldr	r3, [sp, #660]	; 0x294
    377c:	00a5      	lsls	r5, r4, #2
    377e:	469c      	mov	ip, r3
    3780:	1936      	adds	r6, r6, r4
    3782:	af22      	add	r7, sp, #136	; 0x88
    3784:	4465      	add	r5, ip
    3786:	3601      	adds	r6, #1
    3788:	e007      	b.n	379a <__kernel_rem_pio2+0x76>
    378a:	6828      	ldr	r0, [r5, #0]
    378c:	f003 fac2 	bl	6d14 <__aeabi_i2d>
    3790:	3401      	adds	r4, #1
    3792:	c703      	stmia	r7!, {r0, r1}
    3794:	3504      	adds	r5, #4
    3796:	42b4      	cmp	r4, r6
    3798:	d008      	beq.n	37ac <__kernel_rem_pio2+0x88>
    379a:	2c00      	cmp	r4, #0
    379c:	daf5      	bge.n	378a <__kernel_rem_pio2+0x66>
    379e:	2000      	movs	r0, #0
    37a0:	2100      	movs	r1, #0
    37a2:	3401      	adds	r4, #1
    37a4:	c703      	stmia	r7!, {r0, r1}
    37a6:	3504      	adds	r5, #4
    37a8:	42b4      	cmp	r4, r6
    37aa:	d1f6      	bne.n	379a <__kernel_rem_pio2+0x76>
    37ac:	9b06      	ldr	r3, [sp, #24]
    37ae:	2b00      	cmp	r3, #0
    37b0:	da01      	bge.n	37b6 <__kernel_rem_pio2+0x92>
    37b2:	f000 fc01 	bl	3fb8 <__kernel_rem_pio2+0x894>
    37b6:	ab72      	add	r3, sp, #456	; 0x1c8
    37b8:	0019      	movs	r1, r3
    37ba:	468b      	mov	fp, r1
    37bc:	aa22      	add	r2, sp, #136	; 0x88
    37be:	4691      	mov	r9, r2
    37c0:	9a06      	ldr	r2, [sp, #24]
    37c2:	9308      	str	r3, [sp, #32]
    37c4:	3201      	adds	r2, #1
    37c6:	00d2      	lsls	r2, r2, #3
    37c8:	4493      	add	fp, r2
    37ca:	9a03      	ldr	r2, [sp, #12]
    37cc:	469a      	mov	sl, r3
    37ce:	4690      	mov	r8, r2
    37d0:	9b02      	ldr	r3, [sp, #8]
    37d2:	00db      	lsls	r3, r3, #3
    37d4:	4499      	add	r9, r3
    37d6:	3308      	adds	r3, #8
    37d8:	4498      	add	r8, r3
    37da:	9b02      	ldr	r3, [sp, #8]
    37dc:	2b00      	cmp	r3, #0
    37de:	da00      	bge.n	37e2 <__kernel_rem_pio2+0xbe>
    37e0:	e28d      	b.n	3cfe <__kernel_rem_pio2+0x5da>
    37e2:	464c      	mov	r4, r9
    37e4:	2600      	movs	r6, #0
    37e6:	2700      	movs	r7, #0
    37e8:	9d03      	ldr	r5, [sp, #12]
    37ea:	6822      	ldr	r2, [r4, #0]
    37ec:	6863      	ldr	r3, [r4, #4]
    37ee:	cd03      	ldmia	r5!, {r0, r1}
    37f0:	f002 fcc6 	bl	6180 <__aeabi_dmul>
    37f4:	0002      	movs	r2, r0
    37f6:	000b      	movs	r3, r1
    37f8:	0030      	movs	r0, r6
    37fa:	0039      	movs	r1, r7
    37fc:	f001 fd7c 	bl	52f8 <__aeabi_dadd>
    3800:	3c08      	subs	r4, #8
    3802:	0006      	movs	r6, r0
    3804:	000f      	movs	r7, r1
    3806:	4545      	cmp	r5, r8
    3808:	d1ef      	bne.n	37ea <__kernel_rem_pio2+0xc6>
    380a:	4653      	mov	r3, sl
    380c:	c3c0      	stmia	r3!, {r6, r7}
    380e:	469a      	mov	sl, r3
    3810:	2308      	movs	r3, #8
    3812:	469c      	mov	ip, r3
    3814:	44e1      	add	r9, ip
    3816:	45da      	cmp	sl, fp
    3818:	d1df      	bne.n	37da <__kernel_rem_pio2+0xb6>
    381a:	9a06      	ldr	r2, [sp, #24]
    381c:	496a      	ldr	r1, [pc, #424]	; (39c8 <__kernel_rem_pio2+0x2a4>)
    381e:	0013      	movs	r3, r2
    3820:	468c      	mov	ip, r1
    3822:	4463      	add	r3, ip
    3824:	009b      	lsls	r3, r3, #2
    3826:	a80e      	add	r0, sp, #56	; 0x38
    3828:	0019      	movs	r1, r3
    382a:	4684      	mov	ip, r0
    382c:	4461      	add	r1, ip
    382e:	910d      	str	r1, [sp, #52]	; 0x34
    3830:	9903      	ldr	r1, [sp, #12]
    3832:	3b04      	subs	r3, #4
    3834:	468b      	mov	fp, r1
    3836:	4463      	add	r3, ip
    3838:	930c      	str	r3, [sp, #48]	; 0x30
    383a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    383c:	9200      	str	r2, [sp, #0]
    383e:	00db      	lsls	r3, r3, #3
    3840:	449b      	add	fp, r3
    3842:	9a00      	ldr	r2, [sp, #0]
    3844:	9808      	ldr	r0, [sp, #32]
    3846:	00d3      	lsls	r3, r2, #3
    3848:	0019      	movs	r1, r3
    384a:	930a      	str	r3, [sp, #40]	; 0x28
    384c:	468c      	mov	ip, r1
    384e:	0003      	movs	r3, r0
    3850:	4463      	add	r3, ip
    3852:	681e      	ldr	r6, [r3, #0]
    3854:	685f      	ldr	r7, [r3, #4]
    3856:	2a00      	cmp	r2, #0
    3858:	dd34      	ble.n	38c4 <__kernel_rem_pio2+0x1a0>
    385a:	ab0e      	add	r3, sp, #56	; 0x38
    385c:	4699      	mov	r9, r3
    385e:	0013      	movs	r3, r2
    3860:	4a5a      	ldr	r2, [pc, #360]	; (39cc <__kernel_rem_pio2+0x2a8>)
    3862:	4680      	mov	r8, r0
    3864:	4694      	mov	ip, r2
    3866:	4463      	add	r3, ip
    3868:	00db      	lsls	r3, r3, #3
    386a:	4498      	add	r8, r3
    386c:	ab70      	add	r3, sp, #448	; 0x1c0
    386e:	469a      	mov	sl, r3
    3870:	2200      	movs	r2, #0
    3872:	4b57      	ldr	r3, [pc, #348]	; (39d0 <__kernel_rem_pio2+0x2ac>)
    3874:	0030      	movs	r0, r6
    3876:	0039      	movs	r1, r7
    3878:	f002 fc82 	bl	6180 <__aeabi_dmul>
    387c:	f003 fa16 	bl	6cac <__aeabi_d2iz>
    3880:	f003 fa48 	bl	6d14 <__aeabi_i2d>
    3884:	2200      	movs	r2, #0
    3886:	4b53      	ldr	r3, [pc, #332]	; (39d4 <__kernel_rem_pio2+0x2b0>)
    3888:	0004      	movs	r4, r0
    388a:	000d      	movs	r5, r1
    388c:	f002 fc78 	bl	6180 <__aeabi_dmul>
    3890:	0002      	movs	r2, r0
    3892:	000b      	movs	r3, r1
    3894:	0030      	movs	r0, r6
    3896:	0039      	movs	r1, r7
    3898:	f002 fef2 	bl	6680 <__aeabi_dsub>
    389c:	f003 fa06 	bl	6cac <__aeabi_d2iz>
    38a0:	464b      	mov	r3, r9
    38a2:	c301      	stmia	r3!, {r0}
    38a4:	4699      	mov	r9, r3
    38a6:	4643      	mov	r3, r8
    38a8:	0020      	movs	r0, r4
    38aa:	681a      	ldr	r2, [r3, #0]
    38ac:	685b      	ldr	r3, [r3, #4]
    38ae:	0029      	movs	r1, r5
    38b0:	f001 fd22 	bl	52f8 <__aeabi_dadd>
    38b4:	2308      	movs	r3, #8
    38b6:	425b      	negs	r3, r3
    38b8:	469c      	mov	ip, r3
    38ba:	44e0      	add	r8, ip
    38bc:	0006      	movs	r6, r0
    38be:	000f      	movs	r7, r1
    38c0:	45d0      	cmp	r8, sl
    38c2:	d1d5      	bne.n	3870 <__kernel_rem_pio2+0x14c>
    38c4:	9b04      	ldr	r3, [sp, #16]
    38c6:	0030      	movs	r0, r6
    38c8:	001a      	movs	r2, r3
    38ca:	0039      	movs	r1, r7
    38cc:	4699      	mov	r9, r3
    38ce:	f000 fcf1 	bl	42b4 <scalbn>
    38d2:	23ff      	movs	r3, #255	; 0xff
    38d4:	2200      	movs	r2, #0
    38d6:	059b      	lsls	r3, r3, #22
    38d8:	0004      	movs	r4, r0
    38da:	000d      	movs	r5, r1
    38dc:	f002 fc50 	bl	6180 <__aeabi_dmul>
    38e0:	f000 fc50 	bl	4184 <floor>
    38e4:	2200      	movs	r2, #0
    38e6:	4b3c      	ldr	r3, [pc, #240]	; (39d8 <__kernel_rem_pio2+0x2b4>)
    38e8:	f002 fc4a 	bl	6180 <__aeabi_dmul>
    38ec:	0002      	movs	r2, r0
    38ee:	000b      	movs	r3, r1
    38f0:	0020      	movs	r0, r4
    38f2:	0029      	movs	r1, r5
    38f4:	f002 fec4 	bl	6680 <__aeabi_dsub>
    38f8:	000d      	movs	r5, r1
    38fa:	0004      	movs	r4, r0
    38fc:	f003 f9d6 	bl	6cac <__aeabi_d2iz>
    3900:	4680      	mov	r8, r0
    3902:	f003 fa07 	bl	6d14 <__aeabi_i2d>
    3906:	0002      	movs	r2, r0
    3908:	000b      	movs	r3, r1
    390a:	0020      	movs	r0, r4
    390c:	0029      	movs	r1, r5
    390e:	f002 feb7 	bl	6680 <__aeabi_dsub>
    3912:	000f      	movs	r7, r1
    3914:	4649      	mov	r1, r9
    3916:	0006      	movs	r6, r0
    3918:	2900      	cmp	r1, #0
    391a:	dc00      	bgt.n	391e <__kernel_rem_pio2+0x1fa>
    391c:	e110      	b.n	3b40 <__kernel_rem_pio2+0x41c>
    391e:	9b00      	ldr	r3, [sp, #0]
    3920:	2018      	movs	r0, #24
    3922:	1e5a      	subs	r2, r3, #1
    3924:	0092      	lsls	r2, r2, #2
    3926:	ab0e      	add	r3, sp, #56	; 0x38
    3928:	589b      	ldr	r3, [r3, r2]
    392a:	1a40      	subs	r0, r0, r1
    392c:	001d      	movs	r5, r3
    392e:	4105      	asrs	r5, r0
    3930:	44a8      	add	r8, r5
    3932:	4085      	lsls	r5, r0
    3934:	1b5d      	subs	r5, r3, r5
    3936:	ab0e      	add	r3, sp, #56	; 0x38
    3938:	509d      	str	r5, [r3, r2]
    393a:	2217      	movs	r2, #23
    393c:	1a52      	subs	r2, r2, r1
    393e:	4115      	asrs	r5, r2
    3940:	2d00      	cmp	r5, #0
    3942:	dc00      	bgt.n	3946 <__kernel_rem_pio2+0x222>
    3944:	e07d      	b.n	3a42 <__kernel_rem_pio2+0x31e>
    3946:	2301      	movs	r3, #1
    3948:	469c      	mov	ip, r3
    394a:	9b00      	ldr	r3, [sp, #0]
    394c:	44e0      	add	r8, ip
    394e:	2b00      	cmp	r3, #0
    3950:	dd48      	ble.n	39e4 <__kernel_rem_pio2+0x2c0>
    3952:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    3954:	2c00      	cmp	r4, #0
    3956:	d100      	bne.n	395a <__kernel_rem_pio2+0x236>
    3958:	e34b      	b.n	3ff2 <__kernel_rem_pio2+0x8ce>
    395a:	2201      	movs	r2, #1
    395c:	2300      	movs	r3, #0
    395e:	2100      	movs	r1, #0
    3960:	2080      	movs	r0, #128	; 0x80
    3962:	0440      	lsls	r0, r0, #17
    3964:	1b04      	subs	r4, r0, r4
    3966:	a80e      	add	r0, sp, #56	; 0x38
    3968:	5044      	str	r4, [r0, r1]
    396a:	9900      	ldr	r1, [sp, #0]
    396c:	4291      	cmp	r1, r2
    396e:	dd18      	ble.n	39a2 <__kernel_rem_pio2+0x27e>
    3970:	0092      	lsls	r2, r2, #2
    3972:	a90e      	add	r1, sp, #56	; 0x38
    3974:	5889      	ldr	r1, [r1, r2]
    3976:	ac0e      	add	r4, sp, #56	; 0x38
    3978:	9105      	str	r1, [sp, #20]
    397a:	9805      	ldr	r0, [sp, #20]
    397c:	4917      	ldr	r1, [pc, #92]	; (39dc <__kernel_rem_pio2+0x2b8>)
    397e:	3302      	adds	r3, #2
    3980:	1a08      	subs	r0, r1, r0
    3982:	50a0      	str	r0, [r4, r2]
    3984:	9a00      	ldr	r2, [sp, #0]
    3986:	429a      	cmp	r2, r3
    3988:	dd0b      	ble.n	39a2 <__kernel_rem_pio2+0x27e>
    398a:	aa0e      	add	r2, sp, #56	; 0x38
    398c:	4694      	mov	ip, r2
    398e:	9a00      	ldr	r2, [sp, #0]
    3990:	009b      	lsls	r3, r3, #2
    3992:	0090      	lsls	r0, r2, #2
    3994:	4463      	add	r3, ip
    3996:	4460      	add	r0, ip
    3998:	681a      	ldr	r2, [r3, #0]
    399a:	1a8a      	subs	r2, r1, r2
    399c:	c304      	stmia	r3!, {r2}
    399e:	4283      	cmp	r3, r0
    39a0:	d1fa      	bne.n	3998 <__kernel_rem_pio2+0x274>
    39a2:	9b04      	ldr	r3, [sp, #16]
    39a4:	2401      	movs	r4, #1
    39a6:	2b00      	cmp	r3, #0
    39a8:	dc21      	bgt.n	39ee <__kernel_rem_pio2+0x2ca>
    39aa:	2d02      	cmp	r5, #2
    39ac:	d149      	bne.n	3a42 <__kernel_rem_pio2+0x31e>
    39ae:	0032      	movs	r2, r6
    39b0:	003b      	movs	r3, r7
    39b2:	2000      	movs	r0, #0
    39b4:	490a      	ldr	r1, [pc, #40]	; (39e0 <__kernel_rem_pio2+0x2bc>)
    39b6:	f002 fe63 	bl	6680 <__aeabi_dsub>
    39ba:	0006      	movs	r6, r0
    39bc:	000f      	movs	r7, r1
    39be:	e032      	b.n	3a26 <__kernel_rem_pio2+0x302>
    39c0:	fffffd94 	.word	0xfffffd94
    39c4:	000073f0 	.word	0x000073f0
    39c8:	3fffffff 	.word	0x3fffffff
    39cc:	1fffffff 	.word	0x1fffffff
    39d0:	3e700000 	.word	0x3e700000
    39d4:	41700000 	.word	0x41700000
    39d8:	40200000 	.word	0x40200000
    39dc:	00ffffff 	.word	0x00ffffff
    39e0:	3ff00000 	.word	0x3ff00000
    39e4:	9b04      	ldr	r3, [sp, #16]
    39e6:	2400      	movs	r4, #0
    39e8:	2b00      	cmp	r3, #0
    39ea:	dc00      	bgt.n	39ee <__kernel_rem_pio2+0x2ca>
    39ec:	e292      	b.n	3f14 <__kernel_rem_pio2+0x7f0>
    39ee:	9b04      	ldr	r3, [sp, #16]
    39f0:	2b01      	cmp	r3, #1
    39f2:	d100      	bne.n	39f6 <__kernel_rem_pio2+0x2d2>
    39f4:	e27b      	b.n	3eee <__kernel_rem_pio2+0x7ca>
    39f6:	2b02      	cmp	r3, #2
    39f8:	d109      	bne.n	3a0e <__kernel_rem_pio2+0x2ea>
    39fa:	9b00      	ldr	r3, [sp, #0]
    39fc:	a90e      	add	r1, sp, #56	; 0x38
    39fe:	1e5a      	subs	r2, r3, #1
    3a00:	0092      	lsls	r2, r2, #2
    3a02:	ab0e      	add	r3, sp, #56	; 0x38
    3a04:	589b      	ldr	r3, [r3, r2]
    3a06:	9305      	str	r3, [sp, #20]
    3a08:	029b      	lsls	r3, r3, #10
    3a0a:	0a9b      	lsrs	r3, r3, #10
    3a0c:	508b      	str	r3, [r1, r2]
    3a0e:	2d02      	cmp	r5, #2
    3a10:	d117      	bne.n	3a42 <__kernel_rem_pio2+0x31e>
    3a12:	0032      	movs	r2, r6
    3a14:	003b      	movs	r3, r7
    3a16:	2000      	movs	r0, #0
    3a18:	49bf      	ldr	r1, [pc, #764]	; (3d18 <__kernel_rem_pio2+0x5f4>)
    3a1a:	f002 fe31 	bl	6680 <__aeabi_dsub>
    3a1e:	0006      	movs	r6, r0
    3a20:	000f      	movs	r7, r1
    3a22:	2c00      	cmp	r4, #0
    3a24:	d00d      	beq.n	3a42 <__kernel_rem_pio2+0x31e>
    3a26:	9a04      	ldr	r2, [sp, #16]
    3a28:	2000      	movs	r0, #0
    3a2a:	49bb      	ldr	r1, [pc, #748]	; (3d18 <__kernel_rem_pio2+0x5f4>)
    3a2c:	f000 fc42 	bl	42b4 <scalbn>
    3a30:	0002      	movs	r2, r0
    3a32:	000b      	movs	r3, r1
    3a34:	0030      	movs	r0, r6
    3a36:	0039      	movs	r1, r7
    3a38:	f002 fe22 	bl	6680 <__aeabi_dsub>
    3a3c:	2502      	movs	r5, #2
    3a3e:	0006      	movs	r6, r0
    3a40:	000f      	movs	r7, r1
    3a42:	2300      	movs	r3, #0
    3a44:	2200      	movs	r2, #0
    3a46:	0030      	movs	r0, r6
    3a48:	0039      	movs	r1, r7
    3a4a:	f000 fe29 	bl	46a0 <__aeabi_dcmpeq>
    3a4e:	9b00      	ldr	r3, [sp, #0]
    3a50:	2800      	cmp	r0, #0
    3a52:	d100      	bne.n	3a56 <__kernel_rem_pio2+0x332>
    3a54:	e262      	b.n	3f1c <__kernel_rem_pio2+0x7f8>
    3a56:	9906      	ldr	r1, [sp, #24]
    3a58:	1e5a      	subs	r2, r3, #1
    3a5a:	4291      	cmp	r1, r2
    3a5c:	dc10      	bgt.n	3a80 <__kernel_rem_pio2+0x35c>
    3a5e:	49af      	ldr	r1, [pc, #700]	; (3d1c <__kernel_rem_pio2+0x5f8>)
    3a60:	980d      	ldr	r0, [sp, #52]	; 0x34
    3a62:	468c      	mov	ip, r1
    3a64:	a90e      	add	r1, sp, #56	; 0x38
    3a66:	4463      	add	r3, ip
    3a68:	468c      	mov	ip, r1
    3a6a:	2100      	movs	r1, #0
    3a6c:	009b      	lsls	r3, r3, #2
    3a6e:	4463      	add	r3, ip
    3a70:	681c      	ldr	r4, [r3, #0]
    3a72:	3b04      	subs	r3, #4
    3a74:	4321      	orrs	r1, r4
    3a76:	4283      	cmp	r3, r0
    3a78:	d1fa      	bne.n	3a70 <__kernel_rem_pio2+0x34c>
    3a7a:	2900      	cmp	r1, #0
    3a7c:	d000      	beq.n	3a80 <__kernel_rem_pio2+0x35c>
    3a7e:	e084      	b.n	3b8a <__kernel_rem_pio2+0x466>
    3a80:	9b06      	ldr	r3, [sp, #24]
    3a82:	aa0e      	add	r2, sp, #56	; 0x38
    3a84:	3b01      	subs	r3, #1
    3a86:	009b      	lsls	r3, r3, #2
    3a88:	58d3      	ldr	r3, [r2, r3]
    3a8a:	2b00      	cmp	r3, #0
    3a8c:	d000      	beq.n	3a90 <__kernel_rem_pio2+0x36c>
    3a8e:	e27c      	b.n	3f8a <__kernel_rem_pio2+0x866>
    3a90:	2201      	movs	r2, #1
    3a92:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    3a94:	3b04      	subs	r3, #4
    3a96:	6859      	ldr	r1, [r3, #4]
    3a98:	3201      	adds	r2, #1
    3a9a:	2900      	cmp	r1, #0
    3a9c:	d0fa      	beq.n	3a94 <__kernel_rem_pio2+0x370>
    3a9e:	9900      	ldr	r1, [sp, #0]
    3aa0:	000b      	movs	r3, r1
    3aa2:	468c      	mov	ip, r1
    3aa4:	3301      	adds	r3, #1
    3aa6:	4462      	add	r2, ip
    3aa8:	9205      	str	r2, [sp, #20]
    3aaa:	4293      	cmp	r3, r2
    3aac:	dc42      	bgt.n	3b34 <__kernel_rem_pio2+0x410>
    3aae:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    3ab0:	4694      	mov	ip, r2
    3ab2:	9aa5      	ldr	r2, [sp, #660]	; 0x294
    3ab4:	4463      	add	r3, ip
    3ab6:	4692      	mov	sl, r2
    3ab8:	9a09      	ldr	r2, [sp, #36]	; 0x24
    3aba:	009b      	lsls	r3, r3, #2
    3abc:	4694      	mov	ip, r2
    3abe:	aa22      	add	r2, sp, #136	; 0x88
    3ac0:	4690      	mov	r8, r2
    3ac2:	449a      	add	sl, r3
    3ac4:	9b00      	ldr	r3, [sp, #0]
    3ac6:	9a08      	ldr	r2, [sp, #32]
    3ac8:	4463      	add	r3, ip
    3aca:	00db      	lsls	r3, r3, #3
    3acc:	4498      	add	r8, r3
    3ace:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    3ad0:	4694      	mov	ip, r2
    3ad2:	4699      	mov	r9, r3
    3ad4:	9b05      	ldr	r3, [sp, #20]
    3ad6:	44e1      	add	r9, ip
    3ad8:	00db      	lsls	r3, r3, #3
    3ada:	4463      	add	r3, ip
    3adc:	9300      	str	r3, [sp, #0]
    3ade:	4653      	mov	r3, sl
    3ae0:	6818      	ldr	r0, [r3, #0]
    3ae2:	f003 f917 	bl	6d14 <__aeabi_i2d>
    3ae6:	4643      	mov	r3, r8
    3ae8:	6018      	str	r0, [r3, #0]
    3aea:	6059      	str	r1, [r3, #4]
    3aec:	9b02      	ldr	r3, [sp, #8]
    3aee:	2b00      	cmp	r3, #0
    3af0:	db23      	blt.n	3b3a <__kernel_rem_pio2+0x416>
    3af2:	4644      	mov	r4, r8
    3af4:	2600      	movs	r6, #0
    3af6:	2700      	movs	r7, #0
    3af8:	9d03      	ldr	r5, [sp, #12]
    3afa:	6822      	ldr	r2, [r4, #0]
    3afc:	6863      	ldr	r3, [r4, #4]
    3afe:	cd03      	ldmia	r5!, {r0, r1}
    3b00:	f002 fb3e 	bl	6180 <__aeabi_dmul>
    3b04:	0002      	movs	r2, r0
    3b06:	000b      	movs	r3, r1
    3b08:	0030      	movs	r0, r6
    3b0a:	0039      	movs	r1, r7
    3b0c:	f001 fbf4 	bl	52f8 <__aeabi_dadd>
    3b10:	3c08      	subs	r4, #8
    3b12:	0006      	movs	r6, r0
    3b14:	000f      	movs	r7, r1
    3b16:	455d      	cmp	r5, fp
    3b18:	d1ef      	bne.n	3afa <__kernel_rem_pio2+0x3d6>
    3b1a:	464b      	mov	r3, r9
    3b1c:	609e      	str	r6, [r3, #8]
    3b1e:	60df      	str	r7, [r3, #12]
    3b20:	2304      	movs	r3, #4
    3b22:	469c      	mov	ip, r3
    3b24:	3304      	adds	r3, #4
    3b26:	44e2      	add	sl, ip
    3b28:	469c      	mov	ip, r3
    3b2a:	9b00      	ldr	r3, [sp, #0]
    3b2c:	44e1      	add	r9, ip
    3b2e:	44e0      	add	r8, ip
    3b30:	4599      	cmp	r9, r3
    3b32:	d1d4      	bne.n	3ade <__kernel_rem_pio2+0x3ba>
    3b34:	9b05      	ldr	r3, [sp, #20]
    3b36:	9300      	str	r3, [sp, #0]
    3b38:	e683      	b.n	3842 <__kernel_rem_pio2+0x11e>
    3b3a:	2600      	movs	r6, #0
    3b3c:	2700      	movs	r7, #0
    3b3e:	e7ec      	b.n	3b1a <__kernel_rem_pio2+0x3f6>
    3b40:	9b04      	ldr	r3, [sp, #16]
    3b42:	2b00      	cmp	r3, #0
    3b44:	d106      	bne.n	3b54 <__kernel_rem_pio2+0x430>
    3b46:	9b00      	ldr	r3, [sp, #0]
    3b48:	aa0e      	add	r2, sp, #56	; 0x38
    3b4a:	3b01      	subs	r3, #1
    3b4c:	009b      	lsls	r3, r3, #2
    3b4e:	58d5      	ldr	r5, [r2, r3]
    3b50:	15ed      	asrs	r5, r5, #23
    3b52:	e6f5      	b.n	3940 <__kernel_rem_pio2+0x21c>
    3b54:	2200      	movs	r2, #0
    3b56:	4b72      	ldr	r3, [pc, #456]	; (3d20 <__kernel_rem_pio2+0x5fc>)
    3b58:	0030      	movs	r0, r6
    3b5a:	0039      	movs	r1, r7
    3b5c:	f000 fdc4 	bl	46e8 <__aeabi_dcmpge>
    3b60:	2500      	movs	r5, #0
    3b62:	2800      	cmp	r0, #0
    3b64:	d100      	bne.n	3b68 <__kernel_rem_pio2+0x444>
    3b66:	e76c      	b.n	3a42 <__kernel_rem_pio2+0x31e>
    3b68:	2301      	movs	r3, #1
    3b6a:	469c      	mov	ip, r3
    3b6c:	9b00      	ldr	r3, [sp, #0]
    3b6e:	44e0      	add	r8, ip
    3b70:	2502      	movs	r5, #2
    3b72:	2b00      	cmp	r3, #0
    3b74:	dd00      	ble.n	3b78 <__kernel_rem_pio2+0x454>
    3b76:	e6ec      	b.n	3952 <__kernel_rem_pio2+0x22e>
    3b78:	0032      	movs	r2, r6
    3b7a:	003b      	movs	r3, r7
    3b7c:	2000      	movs	r0, #0
    3b7e:	4966      	ldr	r1, [pc, #408]	; (3d18 <__kernel_rem_pio2+0x5f4>)
    3b80:	f002 fd7e 	bl	6680 <__aeabi_dsub>
    3b84:	0006      	movs	r6, r0
    3b86:	000f      	movs	r7, r1
    3b88:	e75b      	b.n	3a42 <__kernel_rem_pio2+0x31e>
    3b8a:	4643      	mov	r3, r8
    3b8c:	9309      	str	r3, [sp, #36]	; 0x24
    3b8e:	9b04      	ldr	r3, [sp, #16]
    3b90:	a80e      	add	r0, sp, #56	; 0x38
    3b92:	3b18      	subs	r3, #24
    3b94:	0019      	movs	r1, r3
    3b96:	9304      	str	r3, [sp, #16]
    3b98:	0093      	lsls	r3, r2, #2
    3b9a:	58c3      	ldr	r3, [r0, r3]
    3b9c:	9503      	str	r5, [sp, #12]
    3b9e:	9202      	str	r2, [sp, #8]
    3ba0:	2b00      	cmp	r3, #0
    3ba2:	d10f      	bne.n	3bc4 <__kernel_rem_pio2+0x4a0>
    3ba4:	485d      	ldr	r0, [pc, #372]	; (3d1c <__kernel_rem_pio2+0x5f8>)
    3ba6:	0013      	movs	r3, r2
    3ba8:	4684      	mov	ip, r0
    3baa:	a80e      	add	r0, sp, #56	; 0x38
    3bac:	4463      	add	r3, ip
    3bae:	4684      	mov	ip, r0
    3bb0:	009b      	lsls	r3, r3, #2
    3bb2:	4463      	add	r3, ip
    3bb4:	3b04      	subs	r3, #4
    3bb6:	6858      	ldr	r0, [r3, #4]
    3bb8:	3a01      	subs	r2, #1
    3bba:	3918      	subs	r1, #24
    3bbc:	2800      	cmp	r0, #0
    3bbe:	d0f9      	beq.n	3bb4 <__kernel_rem_pio2+0x490>
    3bc0:	9202      	str	r2, [sp, #8]
    3bc2:	9104      	str	r1, [sp, #16]
    3bc4:	9a04      	ldr	r2, [sp, #16]
    3bc6:	2000      	movs	r0, #0
    3bc8:	4953      	ldr	r1, [pc, #332]	; (3d18 <__kernel_rem_pio2+0x5f4>)
    3bca:	f000 fb73 	bl	42b4 <scalbn>
    3bce:	9b02      	ldr	r3, [sp, #8]
    3bd0:	0004      	movs	r4, r0
    3bd2:	000d      	movs	r5, r1
    3bd4:	2b00      	cmp	r3, #0
    3bd6:	da00      	bge.n	3bda <__kernel_rem_pio2+0x4b6>
    3bd8:	e1d9      	b.n	3f8e <__kernel_rem_pio2+0x86a>
    3bda:	aa0e      	add	r2, sp, #56	; 0x38
    3bdc:	4694      	mov	ip, r2
    3bde:	009e      	lsls	r6, r3, #2
    3be0:	00db      	lsls	r3, r3, #3
    3be2:	4466      	add	r6, ip
    3be4:	469c      	mov	ip, r3
    3be6:	9a08      	ldr	r2, [sp, #32]
    3be8:	46b0      	mov	r8, r6
    3bea:	4462      	add	r2, ip
    3bec:	0016      	movs	r6, r2
    3bee:	9304      	str	r3, [sp, #16]
    3bf0:	9200      	str	r2, [sp, #0]
    3bf2:	af70      	add	r7, sp, #448	; 0x1c0
    3bf4:	4643      	mov	r3, r8
    3bf6:	6818      	ldr	r0, [r3, #0]
    3bf8:	f003 f88c 	bl	6d14 <__aeabi_i2d>
    3bfc:	0022      	movs	r2, r4
    3bfe:	002b      	movs	r3, r5
    3c00:	f002 fabe 	bl	6180 <__aeabi_dmul>
    3c04:	4b47      	ldr	r3, [pc, #284]	; (3d24 <__kernel_rem_pio2+0x600>)
    3c06:	6030      	str	r0, [r6, #0]
    3c08:	6071      	str	r1, [r6, #4]
    3c0a:	2200      	movs	r2, #0
    3c0c:	0020      	movs	r0, r4
    3c0e:	0029      	movs	r1, r5
    3c10:	f002 fab6 	bl	6180 <__aeabi_dmul>
    3c14:	2304      	movs	r3, #4
    3c16:	425b      	negs	r3, r3
    3c18:	469c      	mov	ip, r3
    3c1a:	3e08      	subs	r6, #8
    3c1c:	0004      	movs	r4, r0
    3c1e:	000d      	movs	r5, r1
    3c20:	44e0      	add	r8, ip
    3c22:	42be      	cmp	r6, r7
    3c24:	d1e6      	bne.n	3bf4 <__kernel_rem_pio2+0x4d0>
    3c26:	2300      	movs	r3, #0
    3c28:	469a      	mov	sl, r3
    3c2a:	ab4a      	add	r3, sp, #296	; 0x128
    3c2c:	4699      	mov	r9, r3
    3c2e:	9b06      	ldr	r3, [sp, #24]
    3c30:	9605      	str	r6, [sp, #20]
    3c32:	469b      	mov	fp, r3
    3c34:	465b      	mov	r3, fp
    3c36:	2600      	movs	r6, #0
    3c38:	2700      	movs	r7, #0
    3c3a:	2b00      	cmp	r3, #0
    3c3c:	db21      	blt.n	3c82 <__kernel_rem_pio2+0x55e>
    3c3e:	2080      	movs	r0, #128	; 0x80
    3c40:	4b39      	ldr	r3, [pc, #228]	; (3d28 <__kernel_rem_pio2+0x604>)
    3c42:	9d00      	ldr	r5, [sp, #0]
    3c44:	4698      	mov	r8, r3
    3c46:	05c0      	lsls	r0, r0, #23
    3c48:	4938      	ldr	r1, [pc, #224]	; (3d2c <__kernel_rem_pio2+0x608>)
    3c4a:	2600      	movs	r6, #0
    3c4c:	2700      	movs	r7, #0
    3c4e:	2400      	movs	r4, #0
    3c50:	e008      	b.n	3c64 <__kernel_rem_pio2+0x540>
    3c52:	2308      	movs	r3, #8
    3c54:	469c      	mov	ip, r3
    3c56:	3508      	adds	r5, #8
    3c58:	44e0      	add	r8, ip
    3c5a:	4554      	cmp	r4, sl
    3c5c:	dc11      	bgt.n	3c82 <__kernel_rem_pio2+0x55e>
    3c5e:	4643      	mov	r3, r8
    3c60:	6818      	ldr	r0, [r3, #0]
    3c62:	6859      	ldr	r1, [r3, #4]
    3c64:	682a      	ldr	r2, [r5, #0]
    3c66:	686b      	ldr	r3, [r5, #4]
    3c68:	f002 fa8a 	bl	6180 <__aeabi_dmul>
    3c6c:	0002      	movs	r2, r0
    3c6e:	000b      	movs	r3, r1
    3c70:	0030      	movs	r0, r6
    3c72:	0039      	movs	r1, r7
    3c74:	f001 fb40 	bl	52f8 <__aeabi_dadd>
    3c78:	3401      	adds	r4, #1
    3c7a:	0006      	movs	r6, r0
    3c7c:	000f      	movs	r7, r1
    3c7e:	45a3      	cmp	fp, r4
    3c80:	dae7      	bge.n	3c52 <__kernel_rem_pio2+0x52e>
    3c82:	4653      	mov	r3, sl
    3c84:	00db      	lsls	r3, r3, #3
    3c86:	444b      	add	r3, r9
    3c88:	601e      	str	r6, [r3, #0]
    3c8a:	605f      	str	r7, [r3, #4]
    3c8c:	2301      	movs	r3, #1
    3c8e:	469c      	mov	ip, r3
    3c90:	9b00      	ldr	r3, [sp, #0]
    3c92:	9a05      	ldr	r2, [sp, #20]
    3c94:	3b08      	subs	r3, #8
    3c96:	44e2      	add	sl, ip
    3c98:	9300      	str	r3, [sp, #0]
    3c9a:	429a      	cmp	r2, r3
    3c9c:	d1ca      	bne.n	3c34 <__kernel_rem_pio2+0x510>
    3c9e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
    3ca0:	2b02      	cmp	r3, #2
    3ca2:	dd00      	ble.n	3ca6 <__kernel_rem_pio2+0x582>
    3ca4:	e07a      	b.n	3d9c <__kernel_rem_pio2+0x678>
    3ca6:	2b00      	cmp	r3, #0
    3ca8:	dc42      	bgt.n	3d30 <__kernel_rem_pio2+0x60c>
    3caa:	d11c      	bne.n	3ce6 <__kernel_rem_pio2+0x5c2>
    3cac:	9b04      	ldr	r3, [sp, #16]
    3cae:	2700      	movs	r7, #0
    3cb0:	444b      	add	r3, r9
    3cb2:	001e      	movs	r6, r3
    3cb4:	2400      	movs	r4, #0
    3cb6:	ad48      	add	r5, sp, #288	; 0x120
    3cb8:	6832      	ldr	r2, [r6, #0]
    3cba:	6873      	ldr	r3, [r6, #4]
    3cbc:	0038      	movs	r0, r7
    3cbe:	0021      	movs	r1, r4
    3cc0:	f001 fb1a 	bl	52f8 <__aeabi_dadd>
    3cc4:	3e08      	subs	r6, #8
    3cc6:	0007      	movs	r7, r0
    3cc8:	000c      	movs	r4, r1
    3cca:	42b5      	cmp	r5, r6
    3ccc:	d1f4      	bne.n	3cb8 <__kernel_rem_pio2+0x594>
    3cce:	9b03      	ldr	r3, [sp, #12]
    3cd0:	2b00      	cmp	r3, #0
    3cd2:	d003      	beq.n	3cdc <__kernel_rem_pio2+0x5b8>
    3cd4:	2380      	movs	r3, #128	; 0x80
    3cd6:	061b      	lsls	r3, r3, #24
    3cd8:	469c      	mov	ip, r3
    3cda:	4464      	add	r4, ip
    3cdc:	003a      	movs	r2, r7
    3cde:	0023      	movs	r3, r4
    3ce0:	9907      	ldr	r1, [sp, #28]
    3ce2:	600a      	str	r2, [r1, #0]
    3ce4:	604b      	str	r3, [r1, #4]
    3ce6:	2007      	movs	r0, #7
    3ce8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3cea:	4018      	ands	r0, r3
    3cec:	239b      	movs	r3, #155	; 0x9b
    3cee:	009b      	lsls	r3, r3, #2
    3cf0:	449d      	add	sp, r3
    3cf2:	bc3c      	pop	{r2, r3, r4, r5}
    3cf4:	4690      	mov	r8, r2
    3cf6:	4699      	mov	r9, r3
    3cf8:	46a2      	mov	sl, r4
    3cfa:	46ab      	mov	fp, r5
    3cfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3cfe:	4653      	mov	r3, sl
    3d00:	2600      	movs	r6, #0
    3d02:	2700      	movs	r7, #0
    3d04:	c3c0      	stmia	r3!, {r6, r7}
    3d06:	469a      	mov	sl, r3
    3d08:	2308      	movs	r3, #8
    3d0a:	469c      	mov	ip, r3
    3d0c:	44e1      	add	r9, ip
    3d0e:	45da      	cmp	sl, fp
    3d10:	d000      	beq.n	3d14 <__kernel_rem_pio2+0x5f0>
    3d12:	e562      	b.n	37da <__kernel_rem_pio2+0xb6>
    3d14:	e581      	b.n	381a <__kernel_rem_pio2+0xf6>
    3d16:	46c0      	nop			; (mov r8, r8)
    3d18:	3ff00000 	.word	0x3ff00000
    3d1c:	3fffffff 	.word	0x3fffffff
    3d20:	3fe00000 	.word	0x3fe00000
    3d24:	3e700000 	.word	0x3e700000
    3d28:	000073b0 	.word	0x000073b0
    3d2c:	3ff921fb 	.word	0x3ff921fb
    3d30:	9b04      	ldr	r3, [sp, #16]
    3d32:	2000      	movs	r0, #0
    3d34:	444b      	add	r3, r9
    3d36:	001e      	movs	r6, r3
    3d38:	2100      	movs	r1, #0
    3d3a:	af48      	add	r7, sp, #288	; 0x120
    3d3c:	6832      	ldr	r2, [r6, #0]
    3d3e:	6873      	ldr	r3, [r6, #4]
    3d40:	3e08      	subs	r6, #8
    3d42:	f001 fad9 	bl	52f8 <__aeabi_dadd>
    3d46:	42be      	cmp	r6, r7
    3d48:	d1f8      	bne.n	3d3c <__kernel_rem_pio2+0x618>
    3d4a:	9b03      	ldr	r3, [sp, #12]
    3d4c:	2b00      	cmp	r3, #0
    3d4e:	d100      	bne.n	3d52 <__kernel_rem_pio2+0x62e>
    3d50:	e0b8      	b.n	3ec4 <__kernel_rem_pio2+0x7a0>
    3d52:	2380      	movs	r3, #128	; 0x80
    3d54:	9a07      	ldr	r2, [sp, #28]
    3d56:	061b      	lsls	r3, r3, #24
    3d58:	18cb      	adds	r3, r1, r3
    3d5a:	6010      	str	r0, [r2, #0]
    3d5c:	6053      	str	r3, [r2, #4]
    3d5e:	000b      	movs	r3, r1
    3d60:	0002      	movs	r2, r0
    3d62:	984a      	ldr	r0, [sp, #296]	; 0x128
    3d64:	994b      	ldr	r1, [sp, #300]	; 0x12c
    3d66:	f002 fc8b 	bl	6680 <__aeabi_dsub>
    3d6a:	9b02      	ldr	r3, [sp, #8]
    3d6c:	2b00      	cmp	r3, #0
    3d6e:	dd0b      	ble.n	3d88 <__kernel_rem_pio2+0x664>
    3d70:	2601      	movs	r6, #1
    3d72:	af4c      	add	r7, sp, #304	; 0x130
    3d74:	cf0c      	ldmia	r7!, {r2, r3}
    3d76:	f001 fabf 	bl	52f8 <__aeabi_dadd>
    3d7a:	9b02      	ldr	r3, [sp, #8]
    3d7c:	3601      	adds	r6, #1
    3d7e:	42b3      	cmp	r3, r6
    3d80:	daf8      	bge.n	3d74 <__kernel_rem_pio2+0x650>
    3d82:	9b03      	ldr	r3, [sp, #12]
    3d84:	2b00      	cmp	r3, #0
    3d86:	d003      	beq.n	3d90 <__kernel_rem_pio2+0x66c>
    3d88:	2380      	movs	r3, #128	; 0x80
    3d8a:	061b      	lsls	r3, r3, #24
    3d8c:	469c      	mov	ip, r3
    3d8e:	4461      	add	r1, ip
    3d90:	000b      	movs	r3, r1
    3d92:	0002      	movs	r2, r0
    3d94:	9907      	ldr	r1, [sp, #28]
    3d96:	608a      	str	r2, [r1, #8]
    3d98:	60cb      	str	r3, [r1, #12]
    3d9a:	e7a4      	b.n	3ce6 <__kernel_rem_pio2+0x5c2>
    3d9c:	9ba4      	ldr	r3, [sp, #656]	; 0x290
    3d9e:	2b03      	cmp	r3, #3
    3da0:	d1a1      	bne.n	3ce6 <__kernel_rem_pio2+0x5c2>
    3da2:	9b02      	ldr	r3, [sp, #8]
    3da4:	2b00      	cmp	r3, #0
    3da6:	dc00      	bgt.n	3daa <__kernel_rem_pio2+0x686>
    3da8:	e120      	b.n	3fec <__kernel_rem_pio2+0x8c8>
    3daa:	4a99      	ldr	r2, [pc, #612]	; (4010 <__kernel_rem_pio2+0x8ec>)
    3dac:	9b04      	ldr	r3, [sp, #16]
    3dae:	4694      	mov	ip, r2
    3db0:	444b      	add	r3, r9
    3db2:	681e      	ldr	r6, [r3, #0]
    3db4:	685f      	ldr	r7, [r3, #4]
    3db6:	9b02      	ldr	r3, [sp, #8]
    3db8:	4463      	add	r3, ip
    3dba:	469b      	mov	fp, r3
    3dbc:	00db      	lsls	r3, r3, #3
    3dbe:	444b      	add	r3, r9
    3dc0:	4698      	mov	r8, r3
    3dc2:	ab48      	add	r3, sp, #288	; 0x120
    3dc4:	469a      	mov	sl, r3
    3dc6:	4643      	mov	r3, r8
    3dc8:	685c      	ldr	r4, [r3, #4]
    3dca:	681b      	ldr	r3, [r3, #0]
    3dcc:	0018      	movs	r0, r3
    3dce:	0021      	movs	r1, r4
    3dd0:	0032      	movs	r2, r6
    3dd2:	003b      	movs	r3, r7
    3dd4:	9000      	str	r0, [sp, #0]
    3dd6:	9101      	str	r1, [sp, #4]
    3dd8:	f001 fa8e 	bl	52f8 <__aeabi_dadd>
    3ddc:	0004      	movs	r4, r0
    3dde:	000d      	movs	r5, r1
    3de0:	0002      	movs	r2, r0
    3de2:	000b      	movs	r3, r1
    3de4:	9800      	ldr	r0, [sp, #0]
    3de6:	9901      	ldr	r1, [sp, #4]
    3de8:	f002 fc4a 	bl	6680 <__aeabi_dsub>
    3dec:	003b      	movs	r3, r7
    3dee:	0032      	movs	r2, r6
    3df0:	f001 fa82 	bl	52f8 <__aeabi_dadd>
    3df4:	4643      	mov	r3, r8
    3df6:	6098      	str	r0, [r3, #8]
    3df8:	60d9      	str	r1, [r3, #12]
    3dfa:	601c      	str	r4, [r3, #0]
    3dfc:	605d      	str	r5, [r3, #4]
    3dfe:	2308      	movs	r3, #8
    3e00:	425b      	negs	r3, r3
    3e02:	469c      	mov	ip, r3
    3e04:	44e0      	add	r8, ip
    3e06:	0026      	movs	r6, r4
    3e08:	002f      	movs	r7, r5
    3e0a:	45c2      	cmp	sl, r8
    3e0c:	d1db      	bne.n	3dc6 <__kernel_rem_pio2+0x6a2>
    3e0e:	9b02      	ldr	r3, [sp, #8]
    3e10:	2b01      	cmp	r3, #1
    3e12:	dc00      	bgt.n	3e16 <__kernel_rem_pio2+0x6f2>
    3e14:	e0ea      	b.n	3fec <__kernel_rem_pio2+0x8c8>
    3e16:	9b04      	ldr	r3, [sp, #16]
    3e18:	46c8      	mov	r8, r9
    3e1a:	444b      	add	r3, r9
    3e1c:	681e      	ldr	r6, [r3, #0]
    3e1e:	685f      	ldr	r7, [r3, #4]
    3e20:	465b      	mov	r3, fp
    3e22:	00db      	lsls	r3, r3, #3
    3e24:	469b      	mov	fp, r3
    3e26:	44d8      	add	r8, fp
    3e28:	4643      	mov	r3, r8
    3e2a:	685c      	ldr	r4, [r3, #4]
    3e2c:	681b      	ldr	r3, [r3, #0]
    3e2e:	0018      	movs	r0, r3
    3e30:	0021      	movs	r1, r4
    3e32:	0032      	movs	r2, r6
    3e34:	003b      	movs	r3, r7
    3e36:	9000      	str	r0, [sp, #0]
    3e38:	9101      	str	r1, [sp, #4]
    3e3a:	f001 fa5d 	bl	52f8 <__aeabi_dadd>
    3e3e:	0004      	movs	r4, r0
    3e40:	000d      	movs	r5, r1
    3e42:	0002      	movs	r2, r0
    3e44:	000b      	movs	r3, r1
    3e46:	9800      	ldr	r0, [sp, #0]
    3e48:	9901      	ldr	r1, [sp, #4]
    3e4a:	f002 fc19 	bl	6680 <__aeabi_dsub>
    3e4e:	003b      	movs	r3, r7
    3e50:	0032      	movs	r2, r6
    3e52:	f001 fa51 	bl	52f8 <__aeabi_dadd>
    3e56:	4643      	mov	r3, r8
    3e58:	6098      	str	r0, [r3, #8]
    3e5a:	60d9      	str	r1, [r3, #12]
    3e5c:	601c      	str	r4, [r3, #0]
    3e5e:	605d      	str	r5, [r3, #4]
    3e60:	2308      	movs	r3, #8
    3e62:	425b      	negs	r3, r3
    3e64:	469c      	mov	ip, r3
    3e66:	44e0      	add	r8, ip
    3e68:	0026      	movs	r6, r4
    3e6a:	002f      	movs	r7, r5
    3e6c:	45c1      	cmp	r9, r8
    3e6e:	d1db      	bne.n	3e28 <__kernel_rem_pio2+0x704>
    3e70:	465d      	mov	r5, fp
    3e72:	2700      	movs	r7, #0
    3e74:	2400      	movs	r4, #0
    3e76:	3508      	adds	r5, #8
    3e78:	444d      	add	r5, r9
    3e7a:	ae4c      	add	r6, sp, #304	; 0x130
    3e7c:	682a      	ldr	r2, [r5, #0]
    3e7e:	686b      	ldr	r3, [r5, #4]
    3e80:	0038      	movs	r0, r7
    3e82:	0021      	movs	r1, r4
    3e84:	f001 fa38 	bl	52f8 <__aeabi_dadd>
    3e88:	3d08      	subs	r5, #8
    3e8a:	0007      	movs	r7, r0
    3e8c:	000c      	movs	r4, r1
    3e8e:	42ae      	cmp	r6, r5
    3e90:	d1f4      	bne.n	3e7c <__kernel_rem_pio2+0x758>
    3e92:	9b03      	ldr	r3, [sp, #12]
    3e94:	2b00      	cmp	r3, #0
    3e96:	d100      	bne.n	3e9a <__kernel_rem_pio2+0x776>
    3e98:	e091      	b.n	3fbe <__kernel_rem_pio2+0x89a>
    3e9a:	2180      	movs	r1, #128	; 0x80
    3e9c:	9a07      	ldr	r2, [sp, #28]
    3e9e:	9b4a      	ldr	r3, [sp, #296]	; 0x128
    3ea0:	0609      	lsls	r1, r1, #24
    3ea2:	6013      	str	r3, [r2, #0]
    3ea4:	464b      	mov	r3, r9
    3ea6:	468c      	mov	ip, r1
    3ea8:	685b      	ldr	r3, [r3, #4]
    3eaa:	4464      	add	r4, ip
    3eac:	4463      	add	r3, ip
    3eae:	6053      	str	r3, [r2, #4]
    3eb0:	464b      	mov	r3, r9
    3eb2:	689b      	ldr	r3, [r3, #8]
    3eb4:	6117      	str	r7, [r2, #16]
    3eb6:	6093      	str	r3, [r2, #8]
    3eb8:	464b      	mov	r3, r9
    3eba:	68db      	ldr	r3, [r3, #12]
    3ebc:	6154      	str	r4, [r2, #20]
    3ebe:	4463      	add	r3, ip
    3ec0:	60d3      	str	r3, [r2, #12]
    3ec2:	e710      	b.n	3ce6 <__kernel_rem_pio2+0x5c2>
    3ec4:	0002      	movs	r2, r0
    3ec6:	000b      	movs	r3, r1
    3ec8:	9c07      	ldr	r4, [sp, #28]
    3eca:	6022      	str	r2, [r4, #0]
    3ecc:	6063      	str	r3, [r4, #4]
    3ece:	000b      	movs	r3, r1
    3ed0:	0002      	movs	r2, r0
    3ed2:	984a      	ldr	r0, [sp, #296]	; 0x128
    3ed4:	994b      	ldr	r1, [sp, #300]	; 0x12c
    3ed6:	f002 fbd3 	bl	6680 <__aeabi_dsub>
    3eda:	9b02      	ldr	r3, [sp, #8]
    3edc:	2b00      	cmp	r3, #0
    3ede:	dd00      	ble.n	3ee2 <__kernel_rem_pio2+0x7be>
    3ee0:	e746      	b.n	3d70 <__kernel_rem_pio2+0x64c>
    3ee2:	000b      	movs	r3, r1
    3ee4:	0002      	movs	r2, r0
    3ee6:	9907      	ldr	r1, [sp, #28]
    3ee8:	608a      	str	r2, [r1, #8]
    3eea:	60cb      	str	r3, [r1, #12]
    3eec:	e6fb      	b.n	3ce6 <__kernel_rem_pio2+0x5c2>
    3eee:	9b00      	ldr	r3, [sp, #0]
    3ef0:	a90e      	add	r1, sp, #56	; 0x38
    3ef2:	1e5a      	subs	r2, r3, #1
    3ef4:	0092      	lsls	r2, r2, #2
    3ef6:	ab0e      	add	r3, sp, #56	; 0x38
    3ef8:	589b      	ldr	r3, [r3, r2]
    3efa:	9305      	str	r3, [sp, #20]
    3efc:	025b      	lsls	r3, r3, #9
    3efe:	0a5b      	lsrs	r3, r3, #9
    3f00:	508b      	str	r3, [r1, r2]
    3f02:	e584      	b.n	3a0e <__kernel_rem_pio2+0x2ea>
    3f04:	9a00      	ldr	r2, [sp, #0]
    3f06:	3301      	adds	r3, #1
    3f08:	429a      	cmp	r2, r3
    3f0a:	d176      	bne.n	3ffa <__kernel_rem_pio2+0x8d6>
    3f0c:	9b04      	ldr	r3, [sp, #16]
    3f0e:	2b00      	cmp	r3, #0
    3f10:	dd00      	ble.n	3f14 <__kernel_rem_pio2+0x7f0>
    3f12:	e56c      	b.n	39ee <__kernel_rem_pio2+0x2ca>
    3f14:	2d02      	cmp	r5, #2
    3f16:	d000      	beq.n	3f1a <__kernel_rem_pio2+0x7f6>
    3f18:	e593      	b.n	3a42 <__kernel_rem_pio2+0x31e>
    3f1a:	e62d      	b.n	3b78 <__kernel_rem_pio2+0x454>
    3f1c:	4699      	mov	r9, r3
    3f1e:	4643      	mov	r3, r8
    3f20:	9309      	str	r3, [sp, #36]	; 0x24
    3f22:	9b04      	ldr	r3, [sp, #16]
    3f24:	0030      	movs	r0, r6
    3f26:	425a      	negs	r2, r3
    3f28:	0039      	movs	r1, r7
    3f2a:	9503      	str	r5, [sp, #12]
    3f2c:	f000 f9c2 	bl	42b4 <scalbn>
    3f30:	2200      	movs	r2, #0
    3f32:	4b38      	ldr	r3, [pc, #224]	; (4014 <__kernel_rem_pio2+0x8f0>)
    3f34:	0004      	movs	r4, r0
    3f36:	000d      	movs	r5, r1
    3f38:	f000 fbd6 	bl	46e8 <__aeabi_dcmpge>
    3f3c:	2800      	cmp	r0, #0
    3f3e:	d030      	beq.n	3fa2 <__kernel_rem_pio2+0x87e>
    3f40:	4b35      	ldr	r3, [pc, #212]	; (4018 <__kernel_rem_pio2+0x8f4>)
    3f42:	2200      	movs	r2, #0
    3f44:	0020      	movs	r0, r4
    3f46:	0029      	movs	r1, r5
    3f48:	f002 f91a 	bl	6180 <__aeabi_dmul>
    3f4c:	f002 feae 	bl	6cac <__aeabi_d2iz>
    3f50:	464a      	mov	r2, r9
    3f52:	0006      	movs	r6, r0
    3f54:	0097      	lsls	r7, r2, #2
    3f56:	f002 fedd 	bl	6d14 <__aeabi_i2d>
    3f5a:	2200      	movs	r2, #0
    3f5c:	4b2d      	ldr	r3, [pc, #180]	; (4014 <__kernel_rem_pio2+0x8f0>)
    3f5e:	f002 f90f 	bl	6180 <__aeabi_dmul>
    3f62:	0002      	movs	r2, r0
    3f64:	000b      	movs	r3, r1
    3f66:	0020      	movs	r0, r4
    3f68:	0029      	movs	r1, r5
    3f6a:	f002 fb89 	bl	6680 <__aeabi_dsub>
    3f6e:	f002 fe9d 	bl	6cac <__aeabi_d2iz>
    3f72:	aa0e      	add	r2, sp, #56	; 0x38
    3f74:	51d0      	str	r0, [r2, r7]
    3f76:	464a      	mov	r2, r9
    3f78:	9b04      	ldr	r3, [sp, #16]
    3f7a:	3201      	adds	r2, #1
    3f7c:	3318      	adds	r3, #24
    3f7e:	9202      	str	r2, [sp, #8]
    3f80:	9304      	str	r3, [sp, #16]
    3f82:	0093      	lsls	r3, r2, #2
    3f84:	aa0e      	add	r2, sp, #56	; 0x38
    3f86:	50d6      	str	r6, [r2, r3]
    3f88:	e61c      	b.n	3bc4 <__kernel_rem_pio2+0x4a0>
    3f8a:	2201      	movs	r2, #1
    3f8c:	e587      	b.n	3a9e <__kernel_rem_pio2+0x37a>
    3f8e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
    3f90:	2b02      	cmp	r3, #2
    3f92:	dc25      	bgt.n	3fe0 <__kernel_rem_pio2+0x8bc>
    3f94:	2b00      	cmp	r3, #0
    3f96:	dc38      	bgt.n	400a <__kernel_rem_pio2+0x8e6>
    3f98:	d000      	beq.n	3f9c <__kernel_rem_pio2+0x878>
    3f9a:	e6a4      	b.n	3ce6 <__kernel_rem_pio2+0x5c2>
    3f9c:	2700      	movs	r7, #0
    3f9e:	2400      	movs	r4, #0
    3fa0:	e695      	b.n	3cce <__kernel_rem_pio2+0x5aa>
    3fa2:	464b      	mov	r3, r9
    3fa4:	0020      	movs	r0, r4
    3fa6:	0029      	movs	r1, r5
    3fa8:	009e      	lsls	r6, r3, #2
    3faa:	f002 fe7f 	bl	6cac <__aeabi_d2iz>
    3fae:	ab0e      	add	r3, sp, #56	; 0x38
    3fb0:	5198      	str	r0, [r3, r6]
    3fb2:	464b      	mov	r3, r9
    3fb4:	9302      	str	r3, [sp, #8]
    3fb6:	e605      	b.n	3bc4 <__kernel_rem_pio2+0x4a0>
    3fb8:	ab72      	add	r3, sp, #456	; 0x1c8
    3fba:	9308      	str	r3, [sp, #32]
    3fbc:	e42d      	b.n	381a <__kernel_rem_pio2+0xf6>
    3fbe:	9907      	ldr	r1, [sp, #28]
    3fc0:	9a4a      	ldr	r2, [sp, #296]	; 0x128
    3fc2:	9b4b      	ldr	r3, [sp, #300]	; 0x12c
    3fc4:	600a      	str	r2, [r1, #0]
    3fc6:	604b      	str	r3, [r1, #4]
    3fc8:	464b      	mov	r3, r9
    3fca:	689a      	ldr	r2, [r3, #8]
    3fcc:	68db      	ldr	r3, [r3, #12]
    3fce:	9200      	str	r2, [sp, #0]
    3fd0:	9301      	str	r3, [sp, #4]
    3fd2:	608a      	str	r2, [r1, #8]
    3fd4:	60cb      	str	r3, [r1, #12]
    3fd6:	003a      	movs	r2, r7
    3fd8:	0023      	movs	r3, r4
    3fda:	610a      	str	r2, [r1, #16]
    3fdc:	614b      	str	r3, [r1, #20]
    3fde:	e682      	b.n	3ce6 <__kernel_rem_pio2+0x5c2>
    3fe0:	ab4a      	add	r3, sp, #296	; 0x128
    3fe2:	4699      	mov	r9, r3
    3fe4:	9ba4      	ldr	r3, [sp, #656]	; 0x290
    3fe6:	2b03      	cmp	r3, #3
    3fe8:	d000      	beq.n	3fec <__kernel_rem_pio2+0x8c8>
    3fea:	e67c      	b.n	3ce6 <__kernel_rem_pio2+0x5c2>
    3fec:	2700      	movs	r7, #0
    3fee:	2400      	movs	r4, #0
    3ff0:	e74f      	b.n	3e92 <__kernel_rem_pio2+0x76e>
    3ff2:	9a00      	ldr	r2, [sp, #0]
    3ff4:	2301      	movs	r3, #1
    3ff6:	2a01      	cmp	r2, #1
    3ff8:	dd88      	ble.n	3f0c <__kernel_rem_pio2+0x7e8>
    3ffa:	0099      	lsls	r1, r3, #2
    3ffc:	aa0e      	add	r2, sp, #56	; 0x38
    3ffe:	5854      	ldr	r4, [r2, r1]
    4000:	2c00      	cmp	r4, #0
    4002:	d100      	bne.n	4006 <__kernel_rem_pio2+0x8e2>
    4004:	e77e      	b.n	3f04 <__kernel_rem_pio2+0x7e0>
    4006:	1c5a      	adds	r2, r3, #1
    4008:	e4aa      	b.n	3960 <__kernel_rem_pio2+0x23c>
    400a:	2000      	movs	r0, #0
    400c:	2100      	movs	r1, #0
    400e:	e69c      	b.n	3d4a <__kernel_rem_pio2+0x626>
    4010:	1fffffff 	.word	0x1fffffff
    4014:	41700000 	.word	0x41700000
    4018:	3e700000 	.word	0x3e700000

0000401c <__kernel_sin>:
    401c:	b5f0      	push	{r4, r5, r6, r7, lr}
    401e:	46ce      	mov	lr, r9
    4020:	4647      	mov	r7, r8
    4022:	b580      	push	{r7, lr}
    4024:	b087      	sub	sp, #28
    4026:	9200      	str	r2, [sp, #0]
    4028:	9301      	str	r3, [sp, #4]
    402a:	4a46      	ldr	r2, [pc, #280]	; (4144 <__kernel_sin+0x128>)
    402c:	004b      	lsls	r3, r1, #1
    402e:	4681      	mov	r9, r0
    4030:	4688      	mov	r8, r1
    4032:	085b      	lsrs	r3, r3, #1
    4034:	4293      	cmp	r3, r2
    4036:	dc05      	bgt.n	4044 <__kernel_sin+0x28>
    4038:	f002 fe38 	bl	6cac <__aeabi_d2iz>
    403c:	4641      	mov	r1, r8
    403e:	1e03      	subs	r3, r0, #0
    4040:	4648      	mov	r0, r9
    4042:	d066      	beq.n	4112 <__kernel_sin+0xf6>
    4044:	464a      	mov	r2, r9
    4046:	4643      	mov	r3, r8
    4048:	4648      	mov	r0, r9
    404a:	4641      	mov	r1, r8
    404c:	f002 f898 	bl	6180 <__aeabi_dmul>
    4050:	0004      	movs	r4, r0
    4052:	000d      	movs	r5, r1
    4054:	0002      	movs	r2, r0
    4056:	000b      	movs	r3, r1
    4058:	4648      	mov	r0, r9
    405a:	4641      	mov	r1, r8
    405c:	f002 f890 	bl	6180 <__aeabi_dmul>
    4060:	4a39      	ldr	r2, [pc, #228]	; (4148 <__kernel_sin+0x12c>)
    4062:	4b3a      	ldr	r3, [pc, #232]	; (414c <__kernel_sin+0x130>)
    4064:	0006      	movs	r6, r0
    4066:	000f      	movs	r7, r1
    4068:	0020      	movs	r0, r4
    406a:	0029      	movs	r1, r5
    406c:	f002 f888 	bl	6180 <__aeabi_dmul>
    4070:	4a37      	ldr	r2, [pc, #220]	; (4150 <__kernel_sin+0x134>)
    4072:	4b38      	ldr	r3, [pc, #224]	; (4154 <__kernel_sin+0x138>)
    4074:	f002 fb04 	bl	6680 <__aeabi_dsub>
    4078:	0022      	movs	r2, r4
    407a:	002b      	movs	r3, r5
    407c:	f002 f880 	bl	6180 <__aeabi_dmul>
    4080:	4a35      	ldr	r2, [pc, #212]	; (4158 <__kernel_sin+0x13c>)
    4082:	4b36      	ldr	r3, [pc, #216]	; (415c <__kernel_sin+0x140>)
    4084:	f001 f938 	bl	52f8 <__aeabi_dadd>
    4088:	0022      	movs	r2, r4
    408a:	002b      	movs	r3, r5
    408c:	f002 f878 	bl	6180 <__aeabi_dmul>
    4090:	4a33      	ldr	r2, [pc, #204]	; (4160 <__kernel_sin+0x144>)
    4092:	4b34      	ldr	r3, [pc, #208]	; (4164 <__kernel_sin+0x148>)
    4094:	f002 faf4 	bl	6680 <__aeabi_dsub>
    4098:	0022      	movs	r2, r4
    409a:	002b      	movs	r3, r5
    409c:	f002 f870 	bl	6180 <__aeabi_dmul>
    40a0:	4b31      	ldr	r3, [pc, #196]	; (4168 <__kernel_sin+0x14c>)
    40a2:	4a32      	ldr	r2, [pc, #200]	; (416c <__kernel_sin+0x150>)
    40a4:	f001 f928 	bl	52f8 <__aeabi_dadd>
    40a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    40aa:	9002      	str	r0, [sp, #8]
    40ac:	9103      	str	r1, [sp, #12]
    40ae:	2b00      	cmp	r3, #0
    40b0:	d034      	beq.n	411c <__kernel_sin+0x100>
    40b2:	9800      	ldr	r0, [sp, #0]
    40b4:	9901      	ldr	r1, [sp, #4]
    40b6:	2200      	movs	r2, #0
    40b8:	4b2d      	ldr	r3, [pc, #180]	; (4170 <__kernel_sin+0x154>)
    40ba:	f002 f861 	bl	6180 <__aeabi_dmul>
    40be:	9a02      	ldr	r2, [sp, #8]
    40c0:	9b03      	ldr	r3, [sp, #12]
    40c2:	9004      	str	r0, [sp, #16]
    40c4:	9105      	str	r1, [sp, #20]
    40c6:	0030      	movs	r0, r6
    40c8:	0039      	movs	r1, r7
    40ca:	f002 f859 	bl	6180 <__aeabi_dmul>
    40ce:	0002      	movs	r2, r0
    40d0:	000b      	movs	r3, r1
    40d2:	9804      	ldr	r0, [sp, #16]
    40d4:	9905      	ldr	r1, [sp, #20]
    40d6:	f002 fad3 	bl	6680 <__aeabi_dsub>
    40da:	0022      	movs	r2, r4
    40dc:	002b      	movs	r3, r5
    40de:	f002 f84f 	bl	6180 <__aeabi_dmul>
    40e2:	9a00      	ldr	r2, [sp, #0]
    40e4:	9b01      	ldr	r3, [sp, #4]
    40e6:	f002 facb 	bl	6680 <__aeabi_dsub>
    40ea:	4a22      	ldr	r2, [pc, #136]	; (4174 <__kernel_sin+0x158>)
    40ec:	0004      	movs	r4, r0
    40ee:	000d      	movs	r5, r1
    40f0:	4b21      	ldr	r3, [pc, #132]	; (4178 <__kernel_sin+0x15c>)
    40f2:	0030      	movs	r0, r6
    40f4:	0039      	movs	r1, r7
    40f6:	f002 f843 	bl	6180 <__aeabi_dmul>
    40fa:	0002      	movs	r2, r0
    40fc:	000b      	movs	r3, r1
    40fe:	0020      	movs	r0, r4
    4100:	0029      	movs	r1, r5
    4102:	f001 f8f9 	bl	52f8 <__aeabi_dadd>
    4106:	0002      	movs	r2, r0
    4108:	000b      	movs	r3, r1
    410a:	4648      	mov	r0, r9
    410c:	4641      	mov	r1, r8
    410e:	f002 fab7 	bl	6680 <__aeabi_dsub>
    4112:	b007      	add	sp, #28
    4114:	bc0c      	pop	{r2, r3}
    4116:	4690      	mov	r8, r2
    4118:	4699      	mov	r9, r3
    411a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    411c:	0002      	movs	r2, r0
    411e:	000b      	movs	r3, r1
    4120:	0020      	movs	r0, r4
    4122:	0029      	movs	r1, r5
    4124:	f002 f82c 	bl	6180 <__aeabi_dmul>
    4128:	4a12      	ldr	r2, [pc, #72]	; (4174 <__kernel_sin+0x158>)
    412a:	4b13      	ldr	r3, [pc, #76]	; (4178 <__kernel_sin+0x15c>)
    412c:	f002 faa8 	bl	6680 <__aeabi_dsub>
    4130:	0032      	movs	r2, r6
    4132:	003b      	movs	r3, r7
    4134:	f002 f824 	bl	6180 <__aeabi_dmul>
    4138:	464a      	mov	r2, r9
    413a:	4643      	mov	r3, r8
    413c:	f001 f8dc 	bl	52f8 <__aeabi_dadd>
    4140:	e7e7      	b.n	4112 <__kernel_sin+0xf6>
    4142:	46c0      	nop			; (mov r8, r8)
    4144:	3e3fffff 	.word	0x3e3fffff
    4148:	5acfd57c 	.word	0x5acfd57c
    414c:	3de5d93a 	.word	0x3de5d93a
    4150:	8a2b9ceb 	.word	0x8a2b9ceb
    4154:	3e5ae5e6 	.word	0x3e5ae5e6
    4158:	57b1fe7d 	.word	0x57b1fe7d
    415c:	3ec71de3 	.word	0x3ec71de3
    4160:	19c161d5 	.word	0x19c161d5
    4164:	3f2a01a0 	.word	0x3f2a01a0
    4168:	3f811111 	.word	0x3f811111
    416c:	1110f8a6 	.word	0x1110f8a6
    4170:	3fe00000 	.word	0x3fe00000
    4174:	55555549 	.word	0x55555549
    4178:	3fc55555 	.word	0x3fc55555

0000417c <fabs>:
    417c:	0049      	lsls	r1, r1, #1
    417e:	084b      	lsrs	r3, r1, #1
    4180:	0019      	movs	r1, r3
    4182:	4770      	bx	lr

00004184 <floor>:
    4184:	4a45      	ldr	r2, [pc, #276]	; (429c <floor+0x118>)
    4186:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4188:	4657      	mov	r7, sl
    418a:	4692      	mov	sl, r2
    418c:	004b      	lsls	r3, r1, #1
    418e:	0d5b      	lsrs	r3, r3, #21
    4190:	449a      	add	sl, r3
    4192:	464e      	mov	r6, r9
    4194:	4645      	mov	r5, r8
    4196:	46de      	mov	lr, fp
    4198:	4652      	mov	r2, sl
    419a:	b5e0      	push	{r5, r6, r7, lr}
    419c:	000c      	movs	r4, r1
    419e:	0005      	movs	r5, r0
    41a0:	000e      	movs	r6, r1
    41a2:	4689      	mov	r9, r1
    41a4:	0007      	movs	r7, r0
    41a6:	2a13      	cmp	r2, #19
    41a8:	dc22      	bgt.n	41f0 <floor+0x6c>
    41aa:	2a00      	cmp	r2, #0
    41ac:	db47      	blt.n	423e <floor+0xba>
    41ae:	4652      	mov	r2, sl
    41b0:	4b3b      	ldr	r3, [pc, #236]	; (42a0 <floor+0x11c>)
    41b2:	4113      	asrs	r3, r2
    41b4:	4698      	mov	r8, r3
    41b6:	000b      	movs	r3, r1
    41b8:	4642      	mov	r2, r8
    41ba:	4013      	ands	r3, r2
    41bc:	4303      	orrs	r3, r0
    41be:	d011      	beq.n	41e4 <floor+0x60>
    41c0:	4a38      	ldr	r2, [pc, #224]	; (42a4 <floor+0x120>)
    41c2:	4b39      	ldr	r3, [pc, #228]	; (42a8 <floor+0x124>)
    41c4:	f001 f898 	bl	52f8 <__aeabi_dadd>
    41c8:	2200      	movs	r2, #0
    41ca:	2300      	movs	r3, #0
    41cc:	f000 fa82 	bl	46d4 <__aeabi_dcmpgt>
    41d0:	2800      	cmp	r0, #0
    41d2:	d005      	beq.n	41e0 <floor+0x5c>
    41d4:	2c00      	cmp	r4, #0
    41d6:	db41      	blt.n	425c <floor+0xd8>
    41d8:	464e      	mov	r6, r9
    41da:	4643      	mov	r3, r8
    41dc:	2700      	movs	r7, #0
    41de:	439e      	bics	r6, r3
    41e0:	0038      	movs	r0, r7
    41e2:	0031      	movs	r1, r6
    41e4:	bc3c      	pop	{r2, r3, r4, r5}
    41e6:	4690      	mov	r8, r2
    41e8:	4699      	mov	r9, r3
    41ea:	46a2      	mov	sl, r4
    41ec:	46ab      	mov	fp, r5
    41ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    41f0:	4652      	mov	r2, sl
    41f2:	2a33      	cmp	r2, #51	; 0x33
    41f4:	dd08      	ble.n	4208 <floor+0x84>
    41f6:	2380      	movs	r3, #128	; 0x80
    41f8:	00db      	lsls	r3, r3, #3
    41fa:	459a      	cmp	sl, r3
    41fc:	d1f2      	bne.n	41e4 <floor+0x60>
    41fe:	0002      	movs	r2, r0
    4200:	000b      	movs	r3, r1
    4202:	f001 f879 	bl	52f8 <__aeabi_dadd>
    4206:	e7ed      	b.n	41e4 <floor+0x60>
    4208:	4a28      	ldr	r2, [pc, #160]	; (42ac <floor+0x128>)
    420a:	4694      	mov	ip, r2
    420c:	2201      	movs	r2, #1
    420e:	4463      	add	r3, ip
    4210:	4252      	negs	r2, r2
    4212:	40da      	lsrs	r2, r3
    4214:	4693      	mov	fp, r2
    4216:	4202      	tst	r2, r0
    4218:	d0e4      	beq.n	41e4 <floor+0x60>
    421a:	4a22      	ldr	r2, [pc, #136]	; (42a4 <floor+0x120>)
    421c:	4b22      	ldr	r3, [pc, #136]	; (42a8 <floor+0x124>)
    421e:	f001 f86b 	bl	52f8 <__aeabi_dadd>
    4222:	2200      	movs	r2, #0
    4224:	2300      	movs	r3, #0
    4226:	f000 fa55 	bl	46d4 <__aeabi_dcmpgt>
    422a:	2800      	cmp	r0, #0
    422c:	d0d8      	beq.n	41e0 <floor+0x5c>
    422e:	2c00      	cmp	r4, #0
    4230:	db1a      	blt.n	4268 <floor+0xe4>
    4232:	465b      	mov	r3, fp
    4234:	464e      	mov	r6, r9
    4236:	439f      	bics	r7, r3
    4238:	0038      	movs	r0, r7
    423a:	0031      	movs	r1, r6
    423c:	e7d2      	b.n	41e4 <floor+0x60>
    423e:	4a19      	ldr	r2, [pc, #100]	; (42a4 <floor+0x120>)
    4240:	4b19      	ldr	r3, [pc, #100]	; (42a8 <floor+0x124>)
    4242:	f001 f859 	bl	52f8 <__aeabi_dadd>
    4246:	2200      	movs	r2, #0
    4248:	2300      	movs	r3, #0
    424a:	f000 fa43 	bl	46d4 <__aeabi_dcmpgt>
    424e:	2800      	cmp	r0, #0
    4250:	d0c6      	beq.n	41e0 <floor+0x5c>
    4252:	2c00      	cmp	r4, #0
    4254:	db16      	blt.n	4284 <floor+0x100>
    4256:	2700      	movs	r7, #0
    4258:	2600      	movs	r6, #0
    425a:	e7c1      	b.n	41e0 <floor+0x5c>
    425c:	2380      	movs	r3, #128	; 0x80
    425e:	4652      	mov	r2, sl
    4260:	035b      	lsls	r3, r3, #13
    4262:	4113      	asrs	r3, r2
    4264:	4499      	add	r9, r3
    4266:	e7b7      	b.n	41d8 <floor+0x54>
    4268:	4653      	mov	r3, sl
    426a:	2b14      	cmp	r3, #20
    426c:	d012      	beq.n	4294 <floor+0x110>
    426e:	2334      	movs	r3, #52	; 0x34
    4270:	4652      	mov	r2, sl
    4272:	2701      	movs	r7, #1
    4274:	1a9b      	subs	r3, r3, r2
    4276:	409f      	lsls	r7, r3
    4278:	197f      	adds	r7, r7, r5
    427a:	42af      	cmp	r7, r5
    427c:	419b      	sbcs	r3, r3
    427e:	425b      	negs	r3, r3
    4280:	4499      	add	r9, r3
    4282:	e7d6      	b.n	4232 <floor+0xae>
    4284:	0064      	lsls	r4, r4, #1
    4286:	0864      	lsrs	r4, r4, #1
    4288:	4325      	orrs	r5, r4
    428a:	2700      	movs	r7, #0
    428c:	2d00      	cmp	r5, #0
    428e:	d0a7      	beq.n	41e0 <floor+0x5c>
    4290:	4e07      	ldr	r6, [pc, #28]	; (42b0 <floor+0x12c>)
    4292:	e7a5      	b.n	41e0 <floor+0x5c>
    4294:	3b13      	subs	r3, #19
    4296:	469c      	mov	ip, r3
    4298:	44e1      	add	r9, ip
    429a:	e7ca      	b.n	4232 <floor+0xae>
    429c:	fffffc01 	.word	0xfffffc01
    42a0:	000fffff 	.word	0x000fffff
    42a4:	8800759c 	.word	0x8800759c
    42a8:	7e37e43c 	.word	0x7e37e43c
    42ac:	fffffbed 	.word	0xfffffbed
    42b0:	bff00000 	.word	0xbff00000

000042b4 <scalbn>:
    42b4:	004b      	lsls	r3, r1, #1
    42b6:	b570      	push	{r4, r5, r6, lr}
    42b8:	0d5b      	lsrs	r3, r3, #21
    42ba:	0014      	movs	r4, r2
    42bc:	000a      	movs	r2, r1
    42be:	2b00      	cmp	r3, #0
    42c0:	d11a      	bne.n	42f8 <scalbn+0x44>
    42c2:	004b      	lsls	r3, r1, #1
    42c4:	085b      	lsrs	r3, r3, #1
    42c6:	4303      	orrs	r3, r0
    42c8:	d015      	beq.n	42f6 <scalbn+0x42>
    42ca:	2200      	movs	r2, #0
    42cc:	4b22      	ldr	r3, [pc, #136]	; (4358 <scalbn+0xa4>)
    42ce:	f001 ff57 	bl	6180 <__aeabi_dmul>
    42d2:	4b22      	ldr	r3, [pc, #136]	; (435c <scalbn+0xa8>)
    42d4:	000a      	movs	r2, r1
    42d6:	429c      	cmp	r4, r3
    42d8:	db22      	blt.n	4320 <scalbn+0x6c>
    42da:	004b      	lsls	r3, r1, #1
    42dc:	0d5b      	lsrs	r3, r3, #21
    42de:	3b36      	subs	r3, #54	; 0x36
    42e0:	4d1f      	ldr	r5, [pc, #124]	; (4360 <scalbn+0xac>)
    42e2:	18e3      	adds	r3, r4, r3
    42e4:	42ab      	cmp	r3, r5
    42e6:	dc20      	bgt.n	432a <scalbn+0x76>
    42e8:	2b00      	cmp	r3, #0
    42ea:	dd0d      	ble.n	4308 <scalbn+0x54>
    42ec:	4c1d      	ldr	r4, [pc, #116]	; (4364 <scalbn+0xb0>)
    42ee:	051b      	lsls	r3, r3, #20
    42f0:	4022      	ands	r2, r4
    42f2:	431a      	orrs	r2, r3
    42f4:	0011      	movs	r1, r2
    42f6:	bd70      	pop	{r4, r5, r6, pc}
    42f8:	4d1b      	ldr	r5, [pc, #108]	; (4368 <scalbn+0xb4>)
    42fa:	42ab      	cmp	r3, r5
    42fc:	d1f0      	bne.n	42e0 <scalbn+0x2c>
    42fe:	0002      	movs	r2, r0
    4300:	000b      	movs	r3, r1
    4302:	f000 fff9 	bl	52f8 <__aeabi_dadd>
    4306:	e7f6      	b.n	42f6 <scalbn+0x42>
    4308:	001d      	movs	r5, r3
    430a:	3535      	adds	r5, #53	; 0x35
    430c:	da18      	bge.n	4340 <scalbn+0x8c>
    430e:	4b17      	ldr	r3, [pc, #92]	; (436c <scalbn+0xb8>)
    4310:	0002      	movs	r2, r0
    4312:	429c      	cmp	r4, r3
    4314:	dc0a      	bgt.n	432c <scalbn+0x78>
    4316:	000b      	movs	r3, r1
    4318:	4815      	ldr	r0, [pc, #84]	; (4370 <scalbn+0xbc>)
    431a:	4916      	ldr	r1, [pc, #88]	; (4374 <scalbn+0xc0>)
    431c:	f000 f832 	bl	4384 <copysign>
    4320:	4a13      	ldr	r2, [pc, #76]	; (4370 <scalbn+0xbc>)
    4322:	4b14      	ldr	r3, [pc, #80]	; (4374 <scalbn+0xc0>)
    4324:	f001 ff2c 	bl	6180 <__aeabi_dmul>
    4328:	e7e5      	b.n	42f6 <scalbn+0x42>
    432a:	0002      	movs	r2, r0
    432c:	000b      	movs	r3, r1
    432e:	4812      	ldr	r0, [pc, #72]	; (4378 <scalbn+0xc4>)
    4330:	4912      	ldr	r1, [pc, #72]	; (437c <scalbn+0xc8>)
    4332:	f000 f827 	bl	4384 <copysign>
    4336:	4a10      	ldr	r2, [pc, #64]	; (4378 <scalbn+0xc4>)
    4338:	4b10      	ldr	r3, [pc, #64]	; (437c <scalbn+0xc8>)
    433a:	f001 ff21 	bl	6180 <__aeabi_dmul>
    433e:	e7da      	b.n	42f6 <scalbn+0x42>
    4340:	4c08      	ldr	r4, [pc, #32]	; (4364 <scalbn+0xb0>)
    4342:	3336      	adds	r3, #54	; 0x36
    4344:	4022      	ands	r2, r4
    4346:	051b      	lsls	r3, r3, #20
    4348:	4313      	orrs	r3, r2
    434a:	0019      	movs	r1, r3
    434c:	2200      	movs	r2, #0
    434e:	4b0c      	ldr	r3, [pc, #48]	; (4380 <scalbn+0xcc>)
    4350:	f001 ff16 	bl	6180 <__aeabi_dmul>
    4354:	e7cf      	b.n	42f6 <scalbn+0x42>
    4356:	46c0      	nop			; (mov r8, r8)
    4358:	43500000 	.word	0x43500000
    435c:	ffff3cb0 	.word	0xffff3cb0
    4360:	000007fe 	.word	0x000007fe
    4364:	800fffff 	.word	0x800fffff
    4368:	000007ff 	.word	0x000007ff
    436c:	0000c350 	.word	0x0000c350
    4370:	c2f8f359 	.word	0xc2f8f359
    4374:	01a56e1f 	.word	0x01a56e1f
    4378:	8800759c 	.word	0x8800759c
    437c:	7e37e43c 	.word	0x7e37e43c
    4380:	3c900000 	.word	0x3c900000

00004384 <copysign>:
    4384:	b530      	push	{r4, r5, lr}
    4386:	004a      	lsls	r2, r1, #1
    4388:	0fdb      	lsrs	r3, r3, #31
    438a:	07db      	lsls	r3, r3, #31
    438c:	0852      	lsrs	r2, r2, #1
    438e:	431a      	orrs	r2, r3
    4390:	0011      	movs	r1, r2
    4392:	bd30      	pop	{r4, r5, pc}

00004394 <__udivsi3>:
    4394:	2200      	movs	r2, #0
    4396:	0843      	lsrs	r3, r0, #1
    4398:	428b      	cmp	r3, r1
    439a:	d374      	bcc.n	4486 <__udivsi3+0xf2>
    439c:	0903      	lsrs	r3, r0, #4
    439e:	428b      	cmp	r3, r1
    43a0:	d35f      	bcc.n	4462 <__udivsi3+0xce>
    43a2:	0a03      	lsrs	r3, r0, #8
    43a4:	428b      	cmp	r3, r1
    43a6:	d344      	bcc.n	4432 <__udivsi3+0x9e>
    43a8:	0b03      	lsrs	r3, r0, #12
    43aa:	428b      	cmp	r3, r1
    43ac:	d328      	bcc.n	4400 <__udivsi3+0x6c>
    43ae:	0c03      	lsrs	r3, r0, #16
    43b0:	428b      	cmp	r3, r1
    43b2:	d30d      	bcc.n	43d0 <__udivsi3+0x3c>
    43b4:	22ff      	movs	r2, #255	; 0xff
    43b6:	0209      	lsls	r1, r1, #8
    43b8:	ba12      	rev	r2, r2
    43ba:	0c03      	lsrs	r3, r0, #16
    43bc:	428b      	cmp	r3, r1
    43be:	d302      	bcc.n	43c6 <__udivsi3+0x32>
    43c0:	1212      	asrs	r2, r2, #8
    43c2:	0209      	lsls	r1, r1, #8
    43c4:	d065      	beq.n	4492 <__udivsi3+0xfe>
    43c6:	0b03      	lsrs	r3, r0, #12
    43c8:	428b      	cmp	r3, r1
    43ca:	d319      	bcc.n	4400 <__udivsi3+0x6c>
    43cc:	e000      	b.n	43d0 <__udivsi3+0x3c>
    43ce:	0a09      	lsrs	r1, r1, #8
    43d0:	0bc3      	lsrs	r3, r0, #15
    43d2:	428b      	cmp	r3, r1
    43d4:	d301      	bcc.n	43da <__udivsi3+0x46>
    43d6:	03cb      	lsls	r3, r1, #15
    43d8:	1ac0      	subs	r0, r0, r3
    43da:	4152      	adcs	r2, r2
    43dc:	0b83      	lsrs	r3, r0, #14
    43de:	428b      	cmp	r3, r1
    43e0:	d301      	bcc.n	43e6 <__udivsi3+0x52>
    43e2:	038b      	lsls	r3, r1, #14
    43e4:	1ac0      	subs	r0, r0, r3
    43e6:	4152      	adcs	r2, r2
    43e8:	0b43      	lsrs	r3, r0, #13
    43ea:	428b      	cmp	r3, r1
    43ec:	d301      	bcc.n	43f2 <__udivsi3+0x5e>
    43ee:	034b      	lsls	r3, r1, #13
    43f0:	1ac0      	subs	r0, r0, r3
    43f2:	4152      	adcs	r2, r2
    43f4:	0b03      	lsrs	r3, r0, #12
    43f6:	428b      	cmp	r3, r1
    43f8:	d301      	bcc.n	43fe <__udivsi3+0x6a>
    43fa:	030b      	lsls	r3, r1, #12
    43fc:	1ac0      	subs	r0, r0, r3
    43fe:	4152      	adcs	r2, r2
    4400:	0ac3      	lsrs	r3, r0, #11
    4402:	428b      	cmp	r3, r1
    4404:	d301      	bcc.n	440a <__udivsi3+0x76>
    4406:	02cb      	lsls	r3, r1, #11
    4408:	1ac0      	subs	r0, r0, r3
    440a:	4152      	adcs	r2, r2
    440c:	0a83      	lsrs	r3, r0, #10
    440e:	428b      	cmp	r3, r1
    4410:	d301      	bcc.n	4416 <__udivsi3+0x82>
    4412:	028b      	lsls	r3, r1, #10
    4414:	1ac0      	subs	r0, r0, r3
    4416:	4152      	adcs	r2, r2
    4418:	0a43      	lsrs	r3, r0, #9
    441a:	428b      	cmp	r3, r1
    441c:	d301      	bcc.n	4422 <__udivsi3+0x8e>
    441e:	024b      	lsls	r3, r1, #9
    4420:	1ac0      	subs	r0, r0, r3
    4422:	4152      	adcs	r2, r2
    4424:	0a03      	lsrs	r3, r0, #8
    4426:	428b      	cmp	r3, r1
    4428:	d301      	bcc.n	442e <__udivsi3+0x9a>
    442a:	020b      	lsls	r3, r1, #8
    442c:	1ac0      	subs	r0, r0, r3
    442e:	4152      	adcs	r2, r2
    4430:	d2cd      	bcs.n	43ce <__udivsi3+0x3a>
    4432:	09c3      	lsrs	r3, r0, #7
    4434:	428b      	cmp	r3, r1
    4436:	d301      	bcc.n	443c <__udivsi3+0xa8>
    4438:	01cb      	lsls	r3, r1, #7
    443a:	1ac0      	subs	r0, r0, r3
    443c:	4152      	adcs	r2, r2
    443e:	0983      	lsrs	r3, r0, #6
    4440:	428b      	cmp	r3, r1
    4442:	d301      	bcc.n	4448 <__udivsi3+0xb4>
    4444:	018b      	lsls	r3, r1, #6
    4446:	1ac0      	subs	r0, r0, r3
    4448:	4152      	adcs	r2, r2
    444a:	0943      	lsrs	r3, r0, #5
    444c:	428b      	cmp	r3, r1
    444e:	d301      	bcc.n	4454 <__udivsi3+0xc0>
    4450:	014b      	lsls	r3, r1, #5
    4452:	1ac0      	subs	r0, r0, r3
    4454:	4152      	adcs	r2, r2
    4456:	0903      	lsrs	r3, r0, #4
    4458:	428b      	cmp	r3, r1
    445a:	d301      	bcc.n	4460 <__udivsi3+0xcc>
    445c:	010b      	lsls	r3, r1, #4
    445e:	1ac0      	subs	r0, r0, r3
    4460:	4152      	adcs	r2, r2
    4462:	08c3      	lsrs	r3, r0, #3
    4464:	428b      	cmp	r3, r1
    4466:	d301      	bcc.n	446c <__udivsi3+0xd8>
    4468:	00cb      	lsls	r3, r1, #3
    446a:	1ac0      	subs	r0, r0, r3
    446c:	4152      	adcs	r2, r2
    446e:	0883      	lsrs	r3, r0, #2
    4470:	428b      	cmp	r3, r1
    4472:	d301      	bcc.n	4478 <__udivsi3+0xe4>
    4474:	008b      	lsls	r3, r1, #2
    4476:	1ac0      	subs	r0, r0, r3
    4478:	4152      	adcs	r2, r2
    447a:	0843      	lsrs	r3, r0, #1
    447c:	428b      	cmp	r3, r1
    447e:	d301      	bcc.n	4484 <__udivsi3+0xf0>
    4480:	004b      	lsls	r3, r1, #1
    4482:	1ac0      	subs	r0, r0, r3
    4484:	4152      	adcs	r2, r2
    4486:	1a41      	subs	r1, r0, r1
    4488:	d200      	bcs.n	448c <__udivsi3+0xf8>
    448a:	4601      	mov	r1, r0
    448c:	4152      	adcs	r2, r2
    448e:	4610      	mov	r0, r2
    4490:	4770      	bx	lr
    4492:	e7ff      	b.n	4494 <__udivsi3+0x100>
    4494:	b501      	push	{r0, lr}
    4496:	2000      	movs	r0, #0
    4498:	f000 f8f0 	bl	467c <__aeabi_idiv0>
    449c:	bd02      	pop	{r1, pc}
    449e:	46c0      	nop			; (mov r8, r8)

000044a0 <__aeabi_uidivmod>:
    44a0:	2900      	cmp	r1, #0
    44a2:	d0f7      	beq.n	4494 <__udivsi3+0x100>
    44a4:	e776      	b.n	4394 <__udivsi3>
    44a6:	4770      	bx	lr

000044a8 <__divsi3>:
    44a8:	4603      	mov	r3, r0
    44aa:	430b      	orrs	r3, r1
    44ac:	d47f      	bmi.n	45ae <__divsi3+0x106>
    44ae:	2200      	movs	r2, #0
    44b0:	0843      	lsrs	r3, r0, #1
    44b2:	428b      	cmp	r3, r1
    44b4:	d374      	bcc.n	45a0 <__divsi3+0xf8>
    44b6:	0903      	lsrs	r3, r0, #4
    44b8:	428b      	cmp	r3, r1
    44ba:	d35f      	bcc.n	457c <__divsi3+0xd4>
    44bc:	0a03      	lsrs	r3, r0, #8
    44be:	428b      	cmp	r3, r1
    44c0:	d344      	bcc.n	454c <__divsi3+0xa4>
    44c2:	0b03      	lsrs	r3, r0, #12
    44c4:	428b      	cmp	r3, r1
    44c6:	d328      	bcc.n	451a <__divsi3+0x72>
    44c8:	0c03      	lsrs	r3, r0, #16
    44ca:	428b      	cmp	r3, r1
    44cc:	d30d      	bcc.n	44ea <__divsi3+0x42>
    44ce:	22ff      	movs	r2, #255	; 0xff
    44d0:	0209      	lsls	r1, r1, #8
    44d2:	ba12      	rev	r2, r2
    44d4:	0c03      	lsrs	r3, r0, #16
    44d6:	428b      	cmp	r3, r1
    44d8:	d302      	bcc.n	44e0 <__divsi3+0x38>
    44da:	1212      	asrs	r2, r2, #8
    44dc:	0209      	lsls	r1, r1, #8
    44de:	d065      	beq.n	45ac <__divsi3+0x104>
    44e0:	0b03      	lsrs	r3, r0, #12
    44e2:	428b      	cmp	r3, r1
    44e4:	d319      	bcc.n	451a <__divsi3+0x72>
    44e6:	e000      	b.n	44ea <__divsi3+0x42>
    44e8:	0a09      	lsrs	r1, r1, #8
    44ea:	0bc3      	lsrs	r3, r0, #15
    44ec:	428b      	cmp	r3, r1
    44ee:	d301      	bcc.n	44f4 <__divsi3+0x4c>
    44f0:	03cb      	lsls	r3, r1, #15
    44f2:	1ac0      	subs	r0, r0, r3
    44f4:	4152      	adcs	r2, r2
    44f6:	0b83      	lsrs	r3, r0, #14
    44f8:	428b      	cmp	r3, r1
    44fa:	d301      	bcc.n	4500 <__divsi3+0x58>
    44fc:	038b      	lsls	r3, r1, #14
    44fe:	1ac0      	subs	r0, r0, r3
    4500:	4152      	adcs	r2, r2
    4502:	0b43      	lsrs	r3, r0, #13
    4504:	428b      	cmp	r3, r1
    4506:	d301      	bcc.n	450c <__divsi3+0x64>
    4508:	034b      	lsls	r3, r1, #13
    450a:	1ac0      	subs	r0, r0, r3
    450c:	4152      	adcs	r2, r2
    450e:	0b03      	lsrs	r3, r0, #12
    4510:	428b      	cmp	r3, r1
    4512:	d301      	bcc.n	4518 <__divsi3+0x70>
    4514:	030b      	lsls	r3, r1, #12
    4516:	1ac0      	subs	r0, r0, r3
    4518:	4152      	adcs	r2, r2
    451a:	0ac3      	lsrs	r3, r0, #11
    451c:	428b      	cmp	r3, r1
    451e:	d301      	bcc.n	4524 <__divsi3+0x7c>
    4520:	02cb      	lsls	r3, r1, #11
    4522:	1ac0      	subs	r0, r0, r3
    4524:	4152      	adcs	r2, r2
    4526:	0a83      	lsrs	r3, r0, #10
    4528:	428b      	cmp	r3, r1
    452a:	d301      	bcc.n	4530 <__divsi3+0x88>
    452c:	028b      	lsls	r3, r1, #10
    452e:	1ac0      	subs	r0, r0, r3
    4530:	4152      	adcs	r2, r2
    4532:	0a43      	lsrs	r3, r0, #9
    4534:	428b      	cmp	r3, r1
    4536:	d301      	bcc.n	453c <__divsi3+0x94>
    4538:	024b      	lsls	r3, r1, #9
    453a:	1ac0      	subs	r0, r0, r3
    453c:	4152      	adcs	r2, r2
    453e:	0a03      	lsrs	r3, r0, #8
    4540:	428b      	cmp	r3, r1
    4542:	d301      	bcc.n	4548 <__divsi3+0xa0>
    4544:	020b      	lsls	r3, r1, #8
    4546:	1ac0      	subs	r0, r0, r3
    4548:	4152      	adcs	r2, r2
    454a:	d2cd      	bcs.n	44e8 <__divsi3+0x40>
    454c:	09c3      	lsrs	r3, r0, #7
    454e:	428b      	cmp	r3, r1
    4550:	d301      	bcc.n	4556 <__divsi3+0xae>
    4552:	01cb      	lsls	r3, r1, #7
    4554:	1ac0      	subs	r0, r0, r3
    4556:	4152      	adcs	r2, r2
    4558:	0983      	lsrs	r3, r0, #6
    455a:	428b      	cmp	r3, r1
    455c:	d301      	bcc.n	4562 <__divsi3+0xba>
    455e:	018b      	lsls	r3, r1, #6
    4560:	1ac0      	subs	r0, r0, r3
    4562:	4152      	adcs	r2, r2
    4564:	0943      	lsrs	r3, r0, #5
    4566:	428b      	cmp	r3, r1
    4568:	d301      	bcc.n	456e <__divsi3+0xc6>
    456a:	014b      	lsls	r3, r1, #5
    456c:	1ac0      	subs	r0, r0, r3
    456e:	4152      	adcs	r2, r2
    4570:	0903      	lsrs	r3, r0, #4
    4572:	428b      	cmp	r3, r1
    4574:	d301      	bcc.n	457a <__divsi3+0xd2>
    4576:	010b      	lsls	r3, r1, #4
    4578:	1ac0      	subs	r0, r0, r3
    457a:	4152      	adcs	r2, r2
    457c:	08c3      	lsrs	r3, r0, #3
    457e:	428b      	cmp	r3, r1
    4580:	d301      	bcc.n	4586 <__divsi3+0xde>
    4582:	00cb      	lsls	r3, r1, #3
    4584:	1ac0      	subs	r0, r0, r3
    4586:	4152      	adcs	r2, r2
    4588:	0883      	lsrs	r3, r0, #2
    458a:	428b      	cmp	r3, r1
    458c:	d301      	bcc.n	4592 <__divsi3+0xea>
    458e:	008b      	lsls	r3, r1, #2
    4590:	1ac0      	subs	r0, r0, r3
    4592:	4152      	adcs	r2, r2
    4594:	0843      	lsrs	r3, r0, #1
    4596:	428b      	cmp	r3, r1
    4598:	d301      	bcc.n	459e <__divsi3+0xf6>
    459a:	004b      	lsls	r3, r1, #1
    459c:	1ac0      	subs	r0, r0, r3
    459e:	4152      	adcs	r2, r2
    45a0:	1a41      	subs	r1, r0, r1
    45a2:	d200      	bcs.n	45a6 <__divsi3+0xfe>
    45a4:	4601      	mov	r1, r0
    45a6:	4152      	adcs	r2, r2
    45a8:	4610      	mov	r0, r2
    45aa:	4770      	bx	lr
    45ac:	e05d      	b.n	466a <__divsi3+0x1c2>
    45ae:	0fca      	lsrs	r2, r1, #31
    45b0:	d000      	beq.n	45b4 <__divsi3+0x10c>
    45b2:	4249      	negs	r1, r1
    45b4:	1003      	asrs	r3, r0, #32
    45b6:	d300      	bcc.n	45ba <__divsi3+0x112>
    45b8:	4240      	negs	r0, r0
    45ba:	4053      	eors	r3, r2
    45bc:	2200      	movs	r2, #0
    45be:	469c      	mov	ip, r3
    45c0:	0903      	lsrs	r3, r0, #4
    45c2:	428b      	cmp	r3, r1
    45c4:	d32d      	bcc.n	4622 <__divsi3+0x17a>
    45c6:	0a03      	lsrs	r3, r0, #8
    45c8:	428b      	cmp	r3, r1
    45ca:	d312      	bcc.n	45f2 <__divsi3+0x14a>
    45cc:	22fc      	movs	r2, #252	; 0xfc
    45ce:	0189      	lsls	r1, r1, #6
    45d0:	ba12      	rev	r2, r2
    45d2:	0a03      	lsrs	r3, r0, #8
    45d4:	428b      	cmp	r3, r1
    45d6:	d30c      	bcc.n	45f2 <__divsi3+0x14a>
    45d8:	0189      	lsls	r1, r1, #6
    45da:	1192      	asrs	r2, r2, #6
    45dc:	428b      	cmp	r3, r1
    45de:	d308      	bcc.n	45f2 <__divsi3+0x14a>
    45e0:	0189      	lsls	r1, r1, #6
    45e2:	1192      	asrs	r2, r2, #6
    45e4:	428b      	cmp	r3, r1
    45e6:	d304      	bcc.n	45f2 <__divsi3+0x14a>
    45e8:	0189      	lsls	r1, r1, #6
    45ea:	d03a      	beq.n	4662 <__divsi3+0x1ba>
    45ec:	1192      	asrs	r2, r2, #6
    45ee:	e000      	b.n	45f2 <__divsi3+0x14a>
    45f0:	0989      	lsrs	r1, r1, #6
    45f2:	09c3      	lsrs	r3, r0, #7
    45f4:	428b      	cmp	r3, r1
    45f6:	d301      	bcc.n	45fc <__divsi3+0x154>
    45f8:	01cb      	lsls	r3, r1, #7
    45fa:	1ac0      	subs	r0, r0, r3
    45fc:	4152      	adcs	r2, r2
    45fe:	0983      	lsrs	r3, r0, #6
    4600:	428b      	cmp	r3, r1
    4602:	d301      	bcc.n	4608 <__divsi3+0x160>
    4604:	018b      	lsls	r3, r1, #6
    4606:	1ac0      	subs	r0, r0, r3
    4608:	4152      	adcs	r2, r2
    460a:	0943      	lsrs	r3, r0, #5
    460c:	428b      	cmp	r3, r1
    460e:	d301      	bcc.n	4614 <__divsi3+0x16c>
    4610:	014b      	lsls	r3, r1, #5
    4612:	1ac0      	subs	r0, r0, r3
    4614:	4152      	adcs	r2, r2
    4616:	0903      	lsrs	r3, r0, #4
    4618:	428b      	cmp	r3, r1
    461a:	d301      	bcc.n	4620 <__divsi3+0x178>
    461c:	010b      	lsls	r3, r1, #4
    461e:	1ac0      	subs	r0, r0, r3
    4620:	4152      	adcs	r2, r2
    4622:	08c3      	lsrs	r3, r0, #3
    4624:	428b      	cmp	r3, r1
    4626:	d301      	bcc.n	462c <__divsi3+0x184>
    4628:	00cb      	lsls	r3, r1, #3
    462a:	1ac0      	subs	r0, r0, r3
    462c:	4152      	adcs	r2, r2
    462e:	0883      	lsrs	r3, r0, #2
    4630:	428b      	cmp	r3, r1
    4632:	d301      	bcc.n	4638 <__divsi3+0x190>
    4634:	008b      	lsls	r3, r1, #2
    4636:	1ac0      	subs	r0, r0, r3
    4638:	4152      	adcs	r2, r2
    463a:	d2d9      	bcs.n	45f0 <__divsi3+0x148>
    463c:	0843      	lsrs	r3, r0, #1
    463e:	428b      	cmp	r3, r1
    4640:	d301      	bcc.n	4646 <__divsi3+0x19e>
    4642:	004b      	lsls	r3, r1, #1
    4644:	1ac0      	subs	r0, r0, r3
    4646:	4152      	adcs	r2, r2
    4648:	1a41      	subs	r1, r0, r1
    464a:	d200      	bcs.n	464e <__divsi3+0x1a6>
    464c:	4601      	mov	r1, r0
    464e:	4663      	mov	r3, ip
    4650:	4152      	adcs	r2, r2
    4652:	105b      	asrs	r3, r3, #1
    4654:	4610      	mov	r0, r2
    4656:	d301      	bcc.n	465c <__divsi3+0x1b4>
    4658:	4240      	negs	r0, r0
    465a:	2b00      	cmp	r3, #0
    465c:	d500      	bpl.n	4660 <__divsi3+0x1b8>
    465e:	4249      	negs	r1, r1
    4660:	4770      	bx	lr
    4662:	4663      	mov	r3, ip
    4664:	105b      	asrs	r3, r3, #1
    4666:	d300      	bcc.n	466a <__divsi3+0x1c2>
    4668:	4240      	negs	r0, r0
    466a:	b501      	push	{r0, lr}
    466c:	2000      	movs	r0, #0
    466e:	f000 f805 	bl	467c <__aeabi_idiv0>
    4672:	bd02      	pop	{r1, pc}

00004674 <__aeabi_idivmod>:
    4674:	2900      	cmp	r1, #0
    4676:	d0f8      	beq.n	466a <__divsi3+0x1c2>
    4678:	e716      	b.n	44a8 <__divsi3>
    467a:	4770      	bx	lr

0000467c <__aeabi_idiv0>:
    467c:	4770      	bx	lr
    467e:	46c0      	nop			; (mov r8, r8)

00004680 <__aeabi_cdrcmple>:
    4680:	4684      	mov	ip, r0
    4682:	1c10      	adds	r0, r2, #0
    4684:	4662      	mov	r2, ip
    4686:	468c      	mov	ip, r1
    4688:	1c19      	adds	r1, r3, #0
    468a:	4663      	mov	r3, ip
    468c:	e000      	b.n	4690 <__aeabi_cdcmpeq>
    468e:	46c0      	nop			; (mov r8, r8)

00004690 <__aeabi_cdcmpeq>:
    4690:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    4692:	f001 fd13 	bl	60bc <__ledf2>
    4696:	2800      	cmp	r0, #0
    4698:	d401      	bmi.n	469e <__aeabi_cdcmpeq+0xe>
    469a:	2100      	movs	r1, #0
    469c:	42c8      	cmn	r0, r1
    469e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

000046a0 <__aeabi_dcmpeq>:
    46a0:	b510      	push	{r4, lr}
    46a2:	f001 fc6d 	bl	5f80 <__eqdf2>
    46a6:	4240      	negs	r0, r0
    46a8:	3001      	adds	r0, #1
    46aa:	bd10      	pop	{r4, pc}

000046ac <__aeabi_dcmplt>:
    46ac:	b510      	push	{r4, lr}
    46ae:	f001 fd05 	bl	60bc <__ledf2>
    46b2:	2800      	cmp	r0, #0
    46b4:	db01      	blt.n	46ba <__aeabi_dcmplt+0xe>
    46b6:	2000      	movs	r0, #0
    46b8:	bd10      	pop	{r4, pc}
    46ba:	2001      	movs	r0, #1
    46bc:	bd10      	pop	{r4, pc}
    46be:	46c0      	nop			; (mov r8, r8)

000046c0 <__aeabi_dcmple>:
    46c0:	b510      	push	{r4, lr}
    46c2:	f001 fcfb 	bl	60bc <__ledf2>
    46c6:	2800      	cmp	r0, #0
    46c8:	dd01      	ble.n	46ce <__aeabi_dcmple+0xe>
    46ca:	2000      	movs	r0, #0
    46cc:	bd10      	pop	{r4, pc}
    46ce:	2001      	movs	r0, #1
    46d0:	bd10      	pop	{r4, pc}
    46d2:	46c0      	nop			; (mov r8, r8)

000046d4 <__aeabi_dcmpgt>:
    46d4:	b510      	push	{r4, lr}
    46d6:	f001 fc8d 	bl	5ff4 <__gedf2>
    46da:	2800      	cmp	r0, #0
    46dc:	dc01      	bgt.n	46e2 <__aeabi_dcmpgt+0xe>
    46de:	2000      	movs	r0, #0
    46e0:	bd10      	pop	{r4, pc}
    46e2:	2001      	movs	r0, #1
    46e4:	bd10      	pop	{r4, pc}
    46e6:	46c0      	nop			; (mov r8, r8)

000046e8 <__aeabi_dcmpge>:
    46e8:	b510      	push	{r4, lr}
    46ea:	f001 fc83 	bl	5ff4 <__gedf2>
    46ee:	2800      	cmp	r0, #0
    46f0:	da01      	bge.n	46f6 <__aeabi_dcmpge+0xe>
    46f2:	2000      	movs	r0, #0
    46f4:	bd10      	pop	{r4, pc}
    46f6:	2001      	movs	r0, #1
    46f8:	bd10      	pop	{r4, pc}
    46fa:	46c0      	nop			; (mov r8, r8)

000046fc <__aeabi_cfrcmple>:
    46fc:	4684      	mov	ip, r0
    46fe:	1c08      	adds	r0, r1, #0
    4700:	4661      	mov	r1, ip
    4702:	e7ff      	b.n	4704 <__aeabi_cfcmpeq>

00004704 <__aeabi_cfcmpeq>:
    4704:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    4706:	f000 fa43 	bl	4b90 <__lesf2>
    470a:	2800      	cmp	r0, #0
    470c:	d401      	bmi.n	4712 <__aeabi_cfcmpeq+0xe>
    470e:	2100      	movs	r1, #0
    4710:	42c8      	cmn	r0, r1
    4712:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00004714 <__aeabi_fcmpeq>:
    4714:	b510      	push	{r4, lr}
    4716:	f000 f9d5 	bl	4ac4 <__eqsf2>
    471a:	4240      	negs	r0, r0
    471c:	3001      	adds	r0, #1
    471e:	bd10      	pop	{r4, pc}

00004720 <__aeabi_fcmplt>:
    4720:	b510      	push	{r4, lr}
    4722:	f000 fa35 	bl	4b90 <__lesf2>
    4726:	2800      	cmp	r0, #0
    4728:	db01      	blt.n	472e <__aeabi_fcmplt+0xe>
    472a:	2000      	movs	r0, #0
    472c:	bd10      	pop	{r4, pc}
    472e:	2001      	movs	r0, #1
    4730:	bd10      	pop	{r4, pc}
    4732:	46c0      	nop			; (mov r8, r8)

00004734 <__aeabi_fcmple>:
    4734:	b510      	push	{r4, lr}
    4736:	f000 fa2b 	bl	4b90 <__lesf2>
    473a:	2800      	cmp	r0, #0
    473c:	dd01      	ble.n	4742 <__aeabi_fcmple+0xe>
    473e:	2000      	movs	r0, #0
    4740:	bd10      	pop	{r4, pc}
    4742:	2001      	movs	r0, #1
    4744:	bd10      	pop	{r4, pc}
    4746:	46c0      	nop			; (mov r8, r8)

00004748 <__aeabi_fcmpgt>:
    4748:	b510      	push	{r4, lr}
    474a:	f000 f9e1 	bl	4b10 <__gesf2>
    474e:	2800      	cmp	r0, #0
    4750:	dc01      	bgt.n	4756 <__aeabi_fcmpgt+0xe>
    4752:	2000      	movs	r0, #0
    4754:	bd10      	pop	{r4, pc}
    4756:	2001      	movs	r0, #1
    4758:	bd10      	pop	{r4, pc}
    475a:	46c0      	nop			; (mov r8, r8)

0000475c <__aeabi_fcmpge>:
    475c:	b510      	push	{r4, lr}
    475e:	f000 f9d7 	bl	4b10 <__gesf2>
    4762:	2800      	cmp	r0, #0
    4764:	da01      	bge.n	476a <__aeabi_fcmpge+0xe>
    4766:	2000      	movs	r0, #0
    4768:	bd10      	pop	{r4, pc}
    476a:	2001      	movs	r0, #1
    476c:	bd10      	pop	{r4, pc}
    476e:	46c0      	nop			; (mov r8, r8)

00004770 <__aeabi_f2uiz>:
    4770:	219e      	movs	r1, #158	; 0x9e
    4772:	b510      	push	{r4, lr}
    4774:	05c9      	lsls	r1, r1, #23
    4776:	1c04      	adds	r4, r0, #0
    4778:	f7ff fff0 	bl	475c <__aeabi_fcmpge>
    477c:	2800      	cmp	r0, #0
    477e:	d103      	bne.n	4788 <__aeabi_f2uiz+0x18>
    4780:	1c20      	adds	r0, r4, #0
    4782:	f000 fd03 	bl	518c <__aeabi_f2iz>
    4786:	bd10      	pop	{r4, pc}
    4788:	219e      	movs	r1, #158	; 0x9e
    478a:	1c20      	adds	r0, r4, #0
    478c:	05c9      	lsls	r1, r1, #23
    478e:	f000 fb61 	bl	4e54 <__aeabi_fsub>
    4792:	f000 fcfb 	bl	518c <__aeabi_f2iz>
    4796:	2380      	movs	r3, #128	; 0x80
    4798:	061b      	lsls	r3, r3, #24
    479a:	469c      	mov	ip, r3
    479c:	4460      	add	r0, ip
    479e:	e7f2      	b.n	4786 <__aeabi_f2uiz+0x16>

000047a0 <__aeabi_fadd>:
    47a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    47a2:	46c6      	mov	lr, r8
    47a4:	024e      	lsls	r6, r1, #9
    47a6:	0247      	lsls	r7, r0, #9
    47a8:	0a76      	lsrs	r6, r6, #9
    47aa:	0a7b      	lsrs	r3, r7, #9
    47ac:	0044      	lsls	r4, r0, #1
    47ae:	0fc5      	lsrs	r5, r0, #31
    47b0:	00f7      	lsls	r7, r6, #3
    47b2:	0048      	lsls	r0, r1, #1
    47b4:	4698      	mov	r8, r3
    47b6:	b500      	push	{lr}
    47b8:	0e24      	lsrs	r4, r4, #24
    47ba:	002a      	movs	r2, r5
    47bc:	00db      	lsls	r3, r3, #3
    47be:	0e00      	lsrs	r0, r0, #24
    47c0:	0fc9      	lsrs	r1, r1, #31
    47c2:	46bc      	mov	ip, r7
    47c4:	428d      	cmp	r5, r1
    47c6:	d067      	beq.n	4898 <__aeabi_fadd+0xf8>
    47c8:	1a22      	subs	r2, r4, r0
    47ca:	2a00      	cmp	r2, #0
    47cc:	dc00      	bgt.n	47d0 <__aeabi_fadd+0x30>
    47ce:	e0a5      	b.n	491c <__aeabi_fadd+0x17c>
    47d0:	2800      	cmp	r0, #0
    47d2:	d13a      	bne.n	484a <__aeabi_fadd+0xaa>
    47d4:	2f00      	cmp	r7, #0
    47d6:	d100      	bne.n	47da <__aeabi_fadd+0x3a>
    47d8:	e093      	b.n	4902 <__aeabi_fadd+0x162>
    47da:	1e51      	subs	r1, r2, #1
    47dc:	2900      	cmp	r1, #0
    47de:	d000      	beq.n	47e2 <__aeabi_fadd+0x42>
    47e0:	e0bc      	b.n	495c <__aeabi_fadd+0x1bc>
    47e2:	2401      	movs	r4, #1
    47e4:	1bdb      	subs	r3, r3, r7
    47e6:	015a      	lsls	r2, r3, #5
    47e8:	d546      	bpl.n	4878 <__aeabi_fadd+0xd8>
    47ea:	019b      	lsls	r3, r3, #6
    47ec:	099e      	lsrs	r6, r3, #6
    47ee:	0030      	movs	r0, r6
    47f0:	f002 fbe6 	bl	6fc0 <__clzsi2>
    47f4:	3805      	subs	r0, #5
    47f6:	4086      	lsls	r6, r0
    47f8:	4284      	cmp	r4, r0
    47fa:	dd00      	ble.n	47fe <__aeabi_fadd+0x5e>
    47fc:	e09d      	b.n	493a <__aeabi_fadd+0x19a>
    47fe:	1b04      	subs	r4, r0, r4
    4800:	0032      	movs	r2, r6
    4802:	2020      	movs	r0, #32
    4804:	3401      	adds	r4, #1
    4806:	40e2      	lsrs	r2, r4
    4808:	1b04      	subs	r4, r0, r4
    480a:	40a6      	lsls	r6, r4
    480c:	0033      	movs	r3, r6
    480e:	1e5e      	subs	r6, r3, #1
    4810:	41b3      	sbcs	r3, r6
    4812:	2400      	movs	r4, #0
    4814:	4313      	orrs	r3, r2
    4816:	075a      	lsls	r2, r3, #29
    4818:	d004      	beq.n	4824 <__aeabi_fadd+0x84>
    481a:	220f      	movs	r2, #15
    481c:	401a      	ands	r2, r3
    481e:	2a04      	cmp	r2, #4
    4820:	d000      	beq.n	4824 <__aeabi_fadd+0x84>
    4822:	3304      	adds	r3, #4
    4824:	015a      	lsls	r2, r3, #5
    4826:	d529      	bpl.n	487c <__aeabi_fadd+0xdc>
    4828:	3401      	adds	r4, #1
    482a:	2cff      	cmp	r4, #255	; 0xff
    482c:	d100      	bne.n	4830 <__aeabi_fadd+0x90>
    482e:	e081      	b.n	4934 <__aeabi_fadd+0x194>
    4830:	002a      	movs	r2, r5
    4832:	019b      	lsls	r3, r3, #6
    4834:	0a5b      	lsrs	r3, r3, #9
    4836:	b2e4      	uxtb	r4, r4
    4838:	025b      	lsls	r3, r3, #9
    483a:	05e4      	lsls	r4, r4, #23
    483c:	0a58      	lsrs	r0, r3, #9
    483e:	07d2      	lsls	r2, r2, #31
    4840:	4320      	orrs	r0, r4
    4842:	4310      	orrs	r0, r2
    4844:	bc04      	pop	{r2}
    4846:	4690      	mov	r8, r2
    4848:	bdf0      	pop	{r4, r5, r6, r7, pc}
    484a:	2cff      	cmp	r4, #255	; 0xff
    484c:	d0e3      	beq.n	4816 <__aeabi_fadd+0x76>
    484e:	2180      	movs	r1, #128	; 0x80
    4850:	0038      	movs	r0, r7
    4852:	04c9      	lsls	r1, r1, #19
    4854:	4308      	orrs	r0, r1
    4856:	4684      	mov	ip, r0
    4858:	2a1b      	cmp	r2, #27
    485a:	dd00      	ble.n	485e <__aeabi_fadd+0xbe>
    485c:	e082      	b.n	4964 <__aeabi_fadd+0x1c4>
    485e:	2020      	movs	r0, #32
    4860:	4661      	mov	r1, ip
    4862:	40d1      	lsrs	r1, r2
    4864:	1a82      	subs	r2, r0, r2
    4866:	4660      	mov	r0, ip
    4868:	4090      	lsls	r0, r2
    486a:	0002      	movs	r2, r0
    486c:	1e50      	subs	r0, r2, #1
    486e:	4182      	sbcs	r2, r0
    4870:	430a      	orrs	r2, r1
    4872:	1a9b      	subs	r3, r3, r2
    4874:	015a      	lsls	r2, r3, #5
    4876:	d4b8      	bmi.n	47ea <__aeabi_fadd+0x4a>
    4878:	075a      	lsls	r2, r3, #29
    487a:	d1ce      	bne.n	481a <__aeabi_fadd+0x7a>
    487c:	08de      	lsrs	r6, r3, #3
    487e:	002a      	movs	r2, r5
    4880:	2cff      	cmp	r4, #255	; 0xff
    4882:	d13a      	bne.n	48fa <__aeabi_fadd+0x15a>
    4884:	2e00      	cmp	r6, #0
    4886:	d100      	bne.n	488a <__aeabi_fadd+0xea>
    4888:	e0ae      	b.n	49e8 <__aeabi_fadd+0x248>
    488a:	2380      	movs	r3, #128	; 0x80
    488c:	03db      	lsls	r3, r3, #15
    488e:	4333      	orrs	r3, r6
    4890:	025b      	lsls	r3, r3, #9
    4892:	0a5b      	lsrs	r3, r3, #9
    4894:	24ff      	movs	r4, #255	; 0xff
    4896:	e7cf      	b.n	4838 <__aeabi_fadd+0x98>
    4898:	1a21      	subs	r1, r4, r0
    489a:	2900      	cmp	r1, #0
    489c:	dd52      	ble.n	4944 <__aeabi_fadd+0x1a4>
    489e:	2800      	cmp	r0, #0
    48a0:	d031      	beq.n	4906 <__aeabi_fadd+0x166>
    48a2:	2cff      	cmp	r4, #255	; 0xff
    48a4:	d0b7      	beq.n	4816 <__aeabi_fadd+0x76>
    48a6:	2080      	movs	r0, #128	; 0x80
    48a8:	003e      	movs	r6, r7
    48aa:	04c0      	lsls	r0, r0, #19
    48ac:	4306      	orrs	r6, r0
    48ae:	46b4      	mov	ip, r6
    48b0:	291b      	cmp	r1, #27
    48b2:	dd00      	ble.n	48b6 <__aeabi_fadd+0x116>
    48b4:	e0aa      	b.n	4a0c <__aeabi_fadd+0x26c>
    48b6:	2620      	movs	r6, #32
    48b8:	4660      	mov	r0, ip
    48ba:	40c8      	lsrs	r0, r1
    48bc:	1a71      	subs	r1, r6, r1
    48be:	4666      	mov	r6, ip
    48c0:	408e      	lsls	r6, r1
    48c2:	0031      	movs	r1, r6
    48c4:	1e4e      	subs	r6, r1, #1
    48c6:	41b1      	sbcs	r1, r6
    48c8:	4301      	orrs	r1, r0
    48ca:	185b      	adds	r3, r3, r1
    48cc:	0159      	lsls	r1, r3, #5
    48ce:	d5d3      	bpl.n	4878 <__aeabi_fadd+0xd8>
    48d0:	3401      	adds	r4, #1
    48d2:	2cff      	cmp	r4, #255	; 0xff
    48d4:	d100      	bne.n	48d8 <__aeabi_fadd+0x138>
    48d6:	e087      	b.n	49e8 <__aeabi_fadd+0x248>
    48d8:	2201      	movs	r2, #1
    48da:	4978      	ldr	r1, [pc, #480]	; (4abc <__aeabi_fadd+0x31c>)
    48dc:	401a      	ands	r2, r3
    48de:	085b      	lsrs	r3, r3, #1
    48e0:	400b      	ands	r3, r1
    48e2:	4313      	orrs	r3, r2
    48e4:	e797      	b.n	4816 <__aeabi_fadd+0x76>
    48e6:	2c00      	cmp	r4, #0
    48e8:	d000      	beq.n	48ec <__aeabi_fadd+0x14c>
    48ea:	e0a7      	b.n	4a3c <__aeabi_fadd+0x29c>
    48ec:	2b00      	cmp	r3, #0
    48ee:	d000      	beq.n	48f2 <__aeabi_fadd+0x152>
    48f0:	e0b6      	b.n	4a60 <__aeabi_fadd+0x2c0>
    48f2:	1e3b      	subs	r3, r7, #0
    48f4:	d162      	bne.n	49bc <__aeabi_fadd+0x21c>
    48f6:	2600      	movs	r6, #0
    48f8:	2200      	movs	r2, #0
    48fa:	0273      	lsls	r3, r6, #9
    48fc:	0a5b      	lsrs	r3, r3, #9
    48fe:	b2e4      	uxtb	r4, r4
    4900:	e79a      	b.n	4838 <__aeabi_fadd+0x98>
    4902:	0014      	movs	r4, r2
    4904:	e787      	b.n	4816 <__aeabi_fadd+0x76>
    4906:	2f00      	cmp	r7, #0
    4908:	d04d      	beq.n	49a6 <__aeabi_fadd+0x206>
    490a:	1e48      	subs	r0, r1, #1
    490c:	2800      	cmp	r0, #0
    490e:	d157      	bne.n	49c0 <__aeabi_fadd+0x220>
    4910:	4463      	add	r3, ip
    4912:	2401      	movs	r4, #1
    4914:	015a      	lsls	r2, r3, #5
    4916:	d5af      	bpl.n	4878 <__aeabi_fadd+0xd8>
    4918:	2402      	movs	r4, #2
    491a:	e7dd      	b.n	48d8 <__aeabi_fadd+0x138>
    491c:	2a00      	cmp	r2, #0
    491e:	d124      	bne.n	496a <__aeabi_fadd+0x1ca>
    4920:	1c62      	adds	r2, r4, #1
    4922:	b2d2      	uxtb	r2, r2
    4924:	2a01      	cmp	r2, #1
    4926:	ddde      	ble.n	48e6 <__aeabi_fadd+0x146>
    4928:	1bde      	subs	r6, r3, r7
    492a:	0172      	lsls	r2, r6, #5
    492c:	d535      	bpl.n	499a <__aeabi_fadd+0x1fa>
    492e:	1afe      	subs	r6, r7, r3
    4930:	000d      	movs	r5, r1
    4932:	e75c      	b.n	47ee <__aeabi_fadd+0x4e>
    4934:	002a      	movs	r2, r5
    4936:	2300      	movs	r3, #0
    4938:	e77e      	b.n	4838 <__aeabi_fadd+0x98>
    493a:	0033      	movs	r3, r6
    493c:	4a60      	ldr	r2, [pc, #384]	; (4ac0 <__aeabi_fadd+0x320>)
    493e:	1a24      	subs	r4, r4, r0
    4940:	4013      	ands	r3, r2
    4942:	e768      	b.n	4816 <__aeabi_fadd+0x76>
    4944:	2900      	cmp	r1, #0
    4946:	d163      	bne.n	4a10 <__aeabi_fadd+0x270>
    4948:	1c61      	adds	r1, r4, #1
    494a:	b2c8      	uxtb	r0, r1
    494c:	2801      	cmp	r0, #1
    494e:	dd4e      	ble.n	49ee <__aeabi_fadd+0x24e>
    4950:	29ff      	cmp	r1, #255	; 0xff
    4952:	d049      	beq.n	49e8 <__aeabi_fadd+0x248>
    4954:	4463      	add	r3, ip
    4956:	085b      	lsrs	r3, r3, #1
    4958:	000c      	movs	r4, r1
    495a:	e75c      	b.n	4816 <__aeabi_fadd+0x76>
    495c:	2aff      	cmp	r2, #255	; 0xff
    495e:	d041      	beq.n	49e4 <__aeabi_fadd+0x244>
    4960:	000a      	movs	r2, r1
    4962:	e779      	b.n	4858 <__aeabi_fadd+0xb8>
    4964:	2201      	movs	r2, #1
    4966:	1a9b      	subs	r3, r3, r2
    4968:	e784      	b.n	4874 <__aeabi_fadd+0xd4>
    496a:	2c00      	cmp	r4, #0
    496c:	d01d      	beq.n	49aa <__aeabi_fadd+0x20a>
    496e:	28ff      	cmp	r0, #255	; 0xff
    4970:	d022      	beq.n	49b8 <__aeabi_fadd+0x218>
    4972:	2480      	movs	r4, #128	; 0x80
    4974:	04e4      	lsls	r4, r4, #19
    4976:	4252      	negs	r2, r2
    4978:	4323      	orrs	r3, r4
    497a:	2a1b      	cmp	r2, #27
    497c:	dd00      	ble.n	4980 <__aeabi_fadd+0x1e0>
    497e:	e08a      	b.n	4a96 <__aeabi_fadd+0x2f6>
    4980:	001c      	movs	r4, r3
    4982:	2520      	movs	r5, #32
    4984:	40d4      	lsrs	r4, r2
    4986:	1aaa      	subs	r2, r5, r2
    4988:	4093      	lsls	r3, r2
    498a:	1e5a      	subs	r2, r3, #1
    498c:	4193      	sbcs	r3, r2
    498e:	4323      	orrs	r3, r4
    4990:	4662      	mov	r2, ip
    4992:	0004      	movs	r4, r0
    4994:	1ad3      	subs	r3, r2, r3
    4996:	000d      	movs	r5, r1
    4998:	e725      	b.n	47e6 <__aeabi_fadd+0x46>
    499a:	2e00      	cmp	r6, #0
    499c:	d000      	beq.n	49a0 <__aeabi_fadd+0x200>
    499e:	e726      	b.n	47ee <__aeabi_fadd+0x4e>
    49a0:	2200      	movs	r2, #0
    49a2:	2400      	movs	r4, #0
    49a4:	e7a9      	b.n	48fa <__aeabi_fadd+0x15a>
    49a6:	000c      	movs	r4, r1
    49a8:	e735      	b.n	4816 <__aeabi_fadd+0x76>
    49aa:	2b00      	cmp	r3, #0
    49ac:	d04d      	beq.n	4a4a <__aeabi_fadd+0x2aa>
    49ae:	43d2      	mvns	r2, r2
    49b0:	2a00      	cmp	r2, #0
    49b2:	d0ed      	beq.n	4990 <__aeabi_fadd+0x1f0>
    49b4:	28ff      	cmp	r0, #255	; 0xff
    49b6:	d1e0      	bne.n	497a <__aeabi_fadd+0x1da>
    49b8:	4663      	mov	r3, ip
    49ba:	24ff      	movs	r4, #255	; 0xff
    49bc:	000d      	movs	r5, r1
    49be:	e72a      	b.n	4816 <__aeabi_fadd+0x76>
    49c0:	29ff      	cmp	r1, #255	; 0xff
    49c2:	d00f      	beq.n	49e4 <__aeabi_fadd+0x244>
    49c4:	0001      	movs	r1, r0
    49c6:	e773      	b.n	48b0 <__aeabi_fadd+0x110>
    49c8:	2b00      	cmp	r3, #0
    49ca:	d061      	beq.n	4a90 <__aeabi_fadd+0x2f0>
    49cc:	24ff      	movs	r4, #255	; 0xff
    49ce:	2f00      	cmp	r7, #0
    49d0:	d100      	bne.n	49d4 <__aeabi_fadd+0x234>
    49d2:	e720      	b.n	4816 <__aeabi_fadd+0x76>
    49d4:	2280      	movs	r2, #128	; 0x80
    49d6:	4641      	mov	r1, r8
    49d8:	03d2      	lsls	r2, r2, #15
    49da:	4211      	tst	r1, r2
    49dc:	d002      	beq.n	49e4 <__aeabi_fadd+0x244>
    49de:	4216      	tst	r6, r2
    49e0:	d100      	bne.n	49e4 <__aeabi_fadd+0x244>
    49e2:	003b      	movs	r3, r7
    49e4:	24ff      	movs	r4, #255	; 0xff
    49e6:	e716      	b.n	4816 <__aeabi_fadd+0x76>
    49e8:	24ff      	movs	r4, #255	; 0xff
    49ea:	2300      	movs	r3, #0
    49ec:	e724      	b.n	4838 <__aeabi_fadd+0x98>
    49ee:	2c00      	cmp	r4, #0
    49f0:	d1ea      	bne.n	49c8 <__aeabi_fadd+0x228>
    49f2:	2b00      	cmp	r3, #0
    49f4:	d058      	beq.n	4aa8 <__aeabi_fadd+0x308>
    49f6:	2f00      	cmp	r7, #0
    49f8:	d100      	bne.n	49fc <__aeabi_fadd+0x25c>
    49fa:	e70c      	b.n	4816 <__aeabi_fadd+0x76>
    49fc:	4463      	add	r3, ip
    49fe:	015a      	lsls	r2, r3, #5
    4a00:	d400      	bmi.n	4a04 <__aeabi_fadd+0x264>
    4a02:	e739      	b.n	4878 <__aeabi_fadd+0xd8>
    4a04:	4a2e      	ldr	r2, [pc, #184]	; (4ac0 <__aeabi_fadd+0x320>)
    4a06:	000c      	movs	r4, r1
    4a08:	4013      	ands	r3, r2
    4a0a:	e704      	b.n	4816 <__aeabi_fadd+0x76>
    4a0c:	2101      	movs	r1, #1
    4a0e:	e75c      	b.n	48ca <__aeabi_fadd+0x12a>
    4a10:	2c00      	cmp	r4, #0
    4a12:	d11e      	bne.n	4a52 <__aeabi_fadd+0x2b2>
    4a14:	2b00      	cmp	r3, #0
    4a16:	d040      	beq.n	4a9a <__aeabi_fadd+0x2fa>
    4a18:	43c9      	mvns	r1, r1
    4a1a:	2900      	cmp	r1, #0
    4a1c:	d00b      	beq.n	4a36 <__aeabi_fadd+0x296>
    4a1e:	28ff      	cmp	r0, #255	; 0xff
    4a20:	d036      	beq.n	4a90 <__aeabi_fadd+0x2f0>
    4a22:	291b      	cmp	r1, #27
    4a24:	dc47      	bgt.n	4ab6 <__aeabi_fadd+0x316>
    4a26:	001c      	movs	r4, r3
    4a28:	2620      	movs	r6, #32
    4a2a:	40cc      	lsrs	r4, r1
    4a2c:	1a71      	subs	r1, r6, r1
    4a2e:	408b      	lsls	r3, r1
    4a30:	1e59      	subs	r1, r3, #1
    4a32:	418b      	sbcs	r3, r1
    4a34:	4323      	orrs	r3, r4
    4a36:	4463      	add	r3, ip
    4a38:	0004      	movs	r4, r0
    4a3a:	e747      	b.n	48cc <__aeabi_fadd+0x12c>
    4a3c:	2b00      	cmp	r3, #0
    4a3e:	d118      	bne.n	4a72 <__aeabi_fadd+0x2d2>
    4a40:	1e3b      	subs	r3, r7, #0
    4a42:	d02d      	beq.n	4aa0 <__aeabi_fadd+0x300>
    4a44:	000d      	movs	r5, r1
    4a46:	24ff      	movs	r4, #255	; 0xff
    4a48:	e6e5      	b.n	4816 <__aeabi_fadd+0x76>
    4a4a:	003b      	movs	r3, r7
    4a4c:	0004      	movs	r4, r0
    4a4e:	000d      	movs	r5, r1
    4a50:	e6e1      	b.n	4816 <__aeabi_fadd+0x76>
    4a52:	28ff      	cmp	r0, #255	; 0xff
    4a54:	d01c      	beq.n	4a90 <__aeabi_fadd+0x2f0>
    4a56:	2480      	movs	r4, #128	; 0x80
    4a58:	04e4      	lsls	r4, r4, #19
    4a5a:	4249      	negs	r1, r1
    4a5c:	4323      	orrs	r3, r4
    4a5e:	e7e0      	b.n	4a22 <__aeabi_fadd+0x282>
    4a60:	2f00      	cmp	r7, #0
    4a62:	d100      	bne.n	4a66 <__aeabi_fadd+0x2c6>
    4a64:	e6d7      	b.n	4816 <__aeabi_fadd+0x76>
    4a66:	1bde      	subs	r6, r3, r7
    4a68:	0172      	lsls	r2, r6, #5
    4a6a:	d51f      	bpl.n	4aac <__aeabi_fadd+0x30c>
    4a6c:	1afb      	subs	r3, r7, r3
    4a6e:	000d      	movs	r5, r1
    4a70:	e6d1      	b.n	4816 <__aeabi_fadd+0x76>
    4a72:	24ff      	movs	r4, #255	; 0xff
    4a74:	2f00      	cmp	r7, #0
    4a76:	d100      	bne.n	4a7a <__aeabi_fadd+0x2da>
    4a78:	e6cd      	b.n	4816 <__aeabi_fadd+0x76>
    4a7a:	2280      	movs	r2, #128	; 0x80
    4a7c:	4640      	mov	r0, r8
    4a7e:	03d2      	lsls	r2, r2, #15
    4a80:	4210      	tst	r0, r2
    4a82:	d0af      	beq.n	49e4 <__aeabi_fadd+0x244>
    4a84:	4216      	tst	r6, r2
    4a86:	d1ad      	bne.n	49e4 <__aeabi_fadd+0x244>
    4a88:	003b      	movs	r3, r7
    4a8a:	000d      	movs	r5, r1
    4a8c:	24ff      	movs	r4, #255	; 0xff
    4a8e:	e6c2      	b.n	4816 <__aeabi_fadd+0x76>
    4a90:	4663      	mov	r3, ip
    4a92:	24ff      	movs	r4, #255	; 0xff
    4a94:	e6bf      	b.n	4816 <__aeabi_fadd+0x76>
    4a96:	2301      	movs	r3, #1
    4a98:	e77a      	b.n	4990 <__aeabi_fadd+0x1f0>
    4a9a:	003b      	movs	r3, r7
    4a9c:	0004      	movs	r4, r0
    4a9e:	e6ba      	b.n	4816 <__aeabi_fadd+0x76>
    4aa0:	2680      	movs	r6, #128	; 0x80
    4aa2:	2200      	movs	r2, #0
    4aa4:	03f6      	lsls	r6, r6, #15
    4aa6:	e6f0      	b.n	488a <__aeabi_fadd+0xea>
    4aa8:	003b      	movs	r3, r7
    4aaa:	e6b4      	b.n	4816 <__aeabi_fadd+0x76>
    4aac:	1e33      	subs	r3, r6, #0
    4aae:	d000      	beq.n	4ab2 <__aeabi_fadd+0x312>
    4ab0:	e6e2      	b.n	4878 <__aeabi_fadd+0xd8>
    4ab2:	2200      	movs	r2, #0
    4ab4:	e721      	b.n	48fa <__aeabi_fadd+0x15a>
    4ab6:	2301      	movs	r3, #1
    4ab8:	e7bd      	b.n	4a36 <__aeabi_fadd+0x296>
    4aba:	46c0      	nop			; (mov r8, r8)
    4abc:	7dffffff 	.word	0x7dffffff
    4ac0:	fbffffff 	.word	0xfbffffff

00004ac4 <__eqsf2>:
    4ac4:	b570      	push	{r4, r5, r6, lr}
    4ac6:	0042      	lsls	r2, r0, #1
    4ac8:	0245      	lsls	r5, r0, #9
    4aca:	024e      	lsls	r6, r1, #9
    4acc:	004c      	lsls	r4, r1, #1
    4ace:	0fc3      	lsrs	r3, r0, #31
    4ad0:	0a6d      	lsrs	r5, r5, #9
    4ad2:	0e12      	lsrs	r2, r2, #24
    4ad4:	0a76      	lsrs	r6, r6, #9
    4ad6:	0e24      	lsrs	r4, r4, #24
    4ad8:	0fc9      	lsrs	r1, r1, #31
    4ada:	2001      	movs	r0, #1
    4adc:	2aff      	cmp	r2, #255	; 0xff
    4ade:	d006      	beq.n	4aee <__eqsf2+0x2a>
    4ae0:	2cff      	cmp	r4, #255	; 0xff
    4ae2:	d003      	beq.n	4aec <__eqsf2+0x28>
    4ae4:	42a2      	cmp	r2, r4
    4ae6:	d101      	bne.n	4aec <__eqsf2+0x28>
    4ae8:	42b5      	cmp	r5, r6
    4aea:	d006      	beq.n	4afa <__eqsf2+0x36>
    4aec:	bd70      	pop	{r4, r5, r6, pc}
    4aee:	2d00      	cmp	r5, #0
    4af0:	d1fc      	bne.n	4aec <__eqsf2+0x28>
    4af2:	2cff      	cmp	r4, #255	; 0xff
    4af4:	d1fa      	bne.n	4aec <__eqsf2+0x28>
    4af6:	2e00      	cmp	r6, #0
    4af8:	d1f8      	bne.n	4aec <__eqsf2+0x28>
    4afa:	428b      	cmp	r3, r1
    4afc:	d006      	beq.n	4b0c <__eqsf2+0x48>
    4afe:	2001      	movs	r0, #1
    4b00:	2a00      	cmp	r2, #0
    4b02:	d1f3      	bne.n	4aec <__eqsf2+0x28>
    4b04:	0028      	movs	r0, r5
    4b06:	1e45      	subs	r5, r0, #1
    4b08:	41a8      	sbcs	r0, r5
    4b0a:	e7ef      	b.n	4aec <__eqsf2+0x28>
    4b0c:	2000      	movs	r0, #0
    4b0e:	e7ed      	b.n	4aec <__eqsf2+0x28>

00004b10 <__gesf2>:
    4b10:	b5f0      	push	{r4, r5, r6, r7, lr}
    4b12:	0042      	lsls	r2, r0, #1
    4b14:	0245      	lsls	r5, r0, #9
    4b16:	024c      	lsls	r4, r1, #9
    4b18:	0fc3      	lsrs	r3, r0, #31
    4b1a:	0048      	lsls	r0, r1, #1
    4b1c:	0a6d      	lsrs	r5, r5, #9
    4b1e:	0e12      	lsrs	r2, r2, #24
    4b20:	0a64      	lsrs	r4, r4, #9
    4b22:	0e00      	lsrs	r0, r0, #24
    4b24:	0fc9      	lsrs	r1, r1, #31
    4b26:	2aff      	cmp	r2, #255	; 0xff
    4b28:	d01e      	beq.n	4b68 <__gesf2+0x58>
    4b2a:	28ff      	cmp	r0, #255	; 0xff
    4b2c:	d021      	beq.n	4b72 <__gesf2+0x62>
    4b2e:	2a00      	cmp	r2, #0
    4b30:	d10a      	bne.n	4b48 <__gesf2+0x38>
    4b32:	426e      	negs	r6, r5
    4b34:	416e      	adcs	r6, r5
    4b36:	b2f6      	uxtb	r6, r6
    4b38:	2800      	cmp	r0, #0
    4b3a:	d10f      	bne.n	4b5c <__gesf2+0x4c>
    4b3c:	2c00      	cmp	r4, #0
    4b3e:	d10d      	bne.n	4b5c <__gesf2+0x4c>
    4b40:	2000      	movs	r0, #0
    4b42:	2d00      	cmp	r5, #0
    4b44:	d009      	beq.n	4b5a <__gesf2+0x4a>
    4b46:	e005      	b.n	4b54 <__gesf2+0x44>
    4b48:	2800      	cmp	r0, #0
    4b4a:	d101      	bne.n	4b50 <__gesf2+0x40>
    4b4c:	2c00      	cmp	r4, #0
    4b4e:	d001      	beq.n	4b54 <__gesf2+0x44>
    4b50:	428b      	cmp	r3, r1
    4b52:	d011      	beq.n	4b78 <__gesf2+0x68>
    4b54:	2101      	movs	r1, #1
    4b56:	4258      	negs	r0, r3
    4b58:	4308      	orrs	r0, r1
    4b5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4b5c:	2e00      	cmp	r6, #0
    4b5e:	d0f7      	beq.n	4b50 <__gesf2+0x40>
    4b60:	2001      	movs	r0, #1
    4b62:	3901      	subs	r1, #1
    4b64:	4308      	orrs	r0, r1
    4b66:	e7f8      	b.n	4b5a <__gesf2+0x4a>
    4b68:	2d00      	cmp	r5, #0
    4b6a:	d0de      	beq.n	4b2a <__gesf2+0x1a>
    4b6c:	2002      	movs	r0, #2
    4b6e:	4240      	negs	r0, r0
    4b70:	e7f3      	b.n	4b5a <__gesf2+0x4a>
    4b72:	2c00      	cmp	r4, #0
    4b74:	d0db      	beq.n	4b2e <__gesf2+0x1e>
    4b76:	e7f9      	b.n	4b6c <__gesf2+0x5c>
    4b78:	4282      	cmp	r2, r0
    4b7a:	dceb      	bgt.n	4b54 <__gesf2+0x44>
    4b7c:	db04      	blt.n	4b88 <__gesf2+0x78>
    4b7e:	42a5      	cmp	r5, r4
    4b80:	d8e8      	bhi.n	4b54 <__gesf2+0x44>
    4b82:	2000      	movs	r0, #0
    4b84:	42a5      	cmp	r5, r4
    4b86:	d2e8      	bcs.n	4b5a <__gesf2+0x4a>
    4b88:	2101      	movs	r1, #1
    4b8a:	1e58      	subs	r0, r3, #1
    4b8c:	4308      	orrs	r0, r1
    4b8e:	e7e4      	b.n	4b5a <__gesf2+0x4a>

00004b90 <__lesf2>:
    4b90:	b5f0      	push	{r4, r5, r6, r7, lr}
    4b92:	0042      	lsls	r2, r0, #1
    4b94:	024d      	lsls	r5, r1, #9
    4b96:	004c      	lsls	r4, r1, #1
    4b98:	0246      	lsls	r6, r0, #9
    4b9a:	0a76      	lsrs	r6, r6, #9
    4b9c:	0e12      	lsrs	r2, r2, #24
    4b9e:	0fc3      	lsrs	r3, r0, #31
    4ba0:	0a6d      	lsrs	r5, r5, #9
    4ba2:	0e24      	lsrs	r4, r4, #24
    4ba4:	0fc9      	lsrs	r1, r1, #31
    4ba6:	2aff      	cmp	r2, #255	; 0xff
    4ba8:	d016      	beq.n	4bd8 <__lesf2+0x48>
    4baa:	2cff      	cmp	r4, #255	; 0xff
    4bac:	d018      	beq.n	4be0 <__lesf2+0x50>
    4bae:	2a00      	cmp	r2, #0
    4bb0:	d10a      	bne.n	4bc8 <__lesf2+0x38>
    4bb2:	4270      	negs	r0, r6
    4bb4:	4170      	adcs	r0, r6
    4bb6:	b2c0      	uxtb	r0, r0
    4bb8:	2c00      	cmp	r4, #0
    4bba:	d015      	beq.n	4be8 <__lesf2+0x58>
    4bbc:	2800      	cmp	r0, #0
    4bbe:	d005      	beq.n	4bcc <__lesf2+0x3c>
    4bc0:	2001      	movs	r0, #1
    4bc2:	3901      	subs	r1, #1
    4bc4:	4308      	orrs	r0, r1
    4bc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4bc8:	2c00      	cmp	r4, #0
    4bca:	d013      	beq.n	4bf4 <__lesf2+0x64>
    4bcc:	4299      	cmp	r1, r3
    4bce:	d014      	beq.n	4bfa <__lesf2+0x6a>
    4bd0:	2001      	movs	r0, #1
    4bd2:	425b      	negs	r3, r3
    4bd4:	4318      	orrs	r0, r3
    4bd6:	e7f6      	b.n	4bc6 <__lesf2+0x36>
    4bd8:	2002      	movs	r0, #2
    4bda:	2e00      	cmp	r6, #0
    4bdc:	d1f3      	bne.n	4bc6 <__lesf2+0x36>
    4bde:	e7e4      	b.n	4baa <__lesf2+0x1a>
    4be0:	2002      	movs	r0, #2
    4be2:	2d00      	cmp	r5, #0
    4be4:	d1ef      	bne.n	4bc6 <__lesf2+0x36>
    4be6:	e7e2      	b.n	4bae <__lesf2+0x1e>
    4be8:	2d00      	cmp	r5, #0
    4bea:	d1e7      	bne.n	4bbc <__lesf2+0x2c>
    4bec:	2000      	movs	r0, #0
    4bee:	2e00      	cmp	r6, #0
    4bf0:	d0e9      	beq.n	4bc6 <__lesf2+0x36>
    4bf2:	e7ed      	b.n	4bd0 <__lesf2+0x40>
    4bf4:	2d00      	cmp	r5, #0
    4bf6:	d1e9      	bne.n	4bcc <__lesf2+0x3c>
    4bf8:	e7ea      	b.n	4bd0 <__lesf2+0x40>
    4bfa:	42a2      	cmp	r2, r4
    4bfc:	dc06      	bgt.n	4c0c <__lesf2+0x7c>
    4bfe:	dbdf      	blt.n	4bc0 <__lesf2+0x30>
    4c00:	42ae      	cmp	r6, r5
    4c02:	d803      	bhi.n	4c0c <__lesf2+0x7c>
    4c04:	2000      	movs	r0, #0
    4c06:	42ae      	cmp	r6, r5
    4c08:	d3da      	bcc.n	4bc0 <__lesf2+0x30>
    4c0a:	e7dc      	b.n	4bc6 <__lesf2+0x36>
    4c0c:	2001      	movs	r0, #1
    4c0e:	4249      	negs	r1, r1
    4c10:	4308      	orrs	r0, r1
    4c12:	e7d8      	b.n	4bc6 <__lesf2+0x36>

00004c14 <__aeabi_fmul>:
    4c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4c16:	4657      	mov	r7, sl
    4c18:	464e      	mov	r6, r9
    4c1a:	4645      	mov	r5, r8
    4c1c:	46de      	mov	lr, fp
    4c1e:	b5e0      	push	{r5, r6, r7, lr}
    4c20:	0247      	lsls	r7, r0, #9
    4c22:	0046      	lsls	r6, r0, #1
    4c24:	4688      	mov	r8, r1
    4c26:	0a7f      	lsrs	r7, r7, #9
    4c28:	0e36      	lsrs	r6, r6, #24
    4c2a:	0fc4      	lsrs	r4, r0, #31
    4c2c:	2e00      	cmp	r6, #0
    4c2e:	d047      	beq.n	4cc0 <__aeabi_fmul+0xac>
    4c30:	2eff      	cmp	r6, #255	; 0xff
    4c32:	d024      	beq.n	4c7e <__aeabi_fmul+0x6a>
    4c34:	00fb      	lsls	r3, r7, #3
    4c36:	2780      	movs	r7, #128	; 0x80
    4c38:	04ff      	lsls	r7, r7, #19
    4c3a:	431f      	orrs	r7, r3
    4c3c:	2300      	movs	r3, #0
    4c3e:	4699      	mov	r9, r3
    4c40:	469a      	mov	sl, r3
    4c42:	3e7f      	subs	r6, #127	; 0x7f
    4c44:	4643      	mov	r3, r8
    4c46:	025d      	lsls	r5, r3, #9
    4c48:	0058      	lsls	r0, r3, #1
    4c4a:	0fdb      	lsrs	r3, r3, #31
    4c4c:	0a6d      	lsrs	r5, r5, #9
    4c4e:	0e00      	lsrs	r0, r0, #24
    4c50:	4698      	mov	r8, r3
    4c52:	d043      	beq.n	4cdc <__aeabi_fmul+0xc8>
    4c54:	28ff      	cmp	r0, #255	; 0xff
    4c56:	d03b      	beq.n	4cd0 <__aeabi_fmul+0xbc>
    4c58:	00eb      	lsls	r3, r5, #3
    4c5a:	2580      	movs	r5, #128	; 0x80
    4c5c:	2200      	movs	r2, #0
    4c5e:	04ed      	lsls	r5, r5, #19
    4c60:	431d      	orrs	r5, r3
    4c62:	387f      	subs	r0, #127	; 0x7f
    4c64:	1836      	adds	r6, r6, r0
    4c66:	1c73      	adds	r3, r6, #1
    4c68:	4641      	mov	r1, r8
    4c6a:	469b      	mov	fp, r3
    4c6c:	464b      	mov	r3, r9
    4c6e:	4061      	eors	r1, r4
    4c70:	4313      	orrs	r3, r2
    4c72:	2b0f      	cmp	r3, #15
    4c74:	d864      	bhi.n	4d40 <__aeabi_fmul+0x12c>
    4c76:	4875      	ldr	r0, [pc, #468]	; (4e4c <__aeabi_fmul+0x238>)
    4c78:	009b      	lsls	r3, r3, #2
    4c7a:	58c3      	ldr	r3, [r0, r3]
    4c7c:	469f      	mov	pc, r3
    4c7e:	2f00      	cmp	r7, #0
    4c80:	d142      	bne.n	4d08 <__aeabi_fmul+0xf4>
    4c82:	2308      	movs	r3, #8
    4c84:	4699      	mov	r9, r3
    4c86:	3b06      	subs	r3, #6
    4c88:	26ff      	movs	r6, #255	; 0xff
    4c8a:	469a      	mov	sl, r3
    4c8c:	e7da      	b.n	4c44 <__aeabi_fmul+0x30>
    4c8e:	4641      	mov	r1, r8
    4c90:	2a02      	cmp	r2, #2
    4c92:	d028      	beq.n	4ce6 <__aeabi_fmul+0xd2>
    4c94:	2a03      	cmp	r2, #3
    4c96:	d100      	bne.n	4c9a <__aeabi_fmul+0x86>
    4c98:	e0ce      	b.n	4e38 <__aeabi_fmul+0x224>
    4c9a:	2a01      	cmp	r2, #1
    4c9c:	d000      	beq.n	4ca0 <__aeabi_fmul+0x8c>
    4c9e:	e0ac      	b.n	4dfa <__aeabi_fmul+0x1e6>
    4ca0:	4011      	ands	r1, r2
    4ca2:	2000      	movs	r0, #0
    4ca4:	2200      	movs	r2, #0
    4ca6:	b2cc      	uxtb	r4, r1
    4ca8:	0240      	lsls	r0, r0, #9
    4caa:	05d2      	lsls	r2, r2, #23
    4cac:	0a40      	lsrs	r0, r0, #9
    4cae:	07e4      	lsls	r4, r4, #31
    4cb0:	4310      	orrs	r0, r2
    4cb2:	4320      	orrs	r0, r4
    4cb4:	bc3c      	pop	{r2, r3, r4, r5}
    4cb6:	4690      	mov	r8, r2
    4cb8:	4699      	mov	r9, r3
    4cba:	46a2      	mov	sl, r4
    4cbc:	46ab      	mov	fp, r5
    4cbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4cc0:	2f00      	cmp	r7, #0
    4cc2:	d115      	bne.n	4cf0 <__aeabi_fmul+0xdc>
    4cc4:	2304      	movs	r3, #4
    4cc6:	4699      	mov	r9, r3
    4cc8:	3b03      	subs	r3, #3
    4cca:	2600      	movs	r6, #0
    4ccc:	469a      	mov	sl, r3
    4cce:	e7b9      	b.n	4c44 <__aeabi_fmul+0x30>
    4cd0:	20ff      	movs	r0, #255	; 0xff
    4cd2:	2202      	movs	r2, #2
    4cd4:	2d00      	cmp	r5, #0
    4cd6:	d0c5      	beq.n	4c64 <__aeabi_fmul+0x50>
    4cd8:	2203      	movs	r2, #3
    4cda:	e7c3      	b.n	4c64 <__aeabi_fmul+0x50>
    4cdc:	2d00      	cmp	r5, #0
    4cde:	d119      	bne.n	4d14 <__aeabi_fmul+0x100>
    4ce0:	2000      	movs	r0, #0
    4ce2:	2201      	movs	r2, #1
    4ce4:	e7be      	b.n	4c64 <__aeabi_fmul+0x50>
    4ce6:	2401      	movs	r4, #1
    4ce8:	22ff      	movs	r2, #255	; 0xff
    4cea:	400c      	ands	r4, r1
    4cec:	2000      	movs	r0, #0
    4cee:	e7db      	b.n	4ca8 <__aeabi_fmul+0x94>
    4cf0:	0038      	movs	r0, r7
    4cf2:	f002 f965 	bl	6fc0 <__clzsi2>
    4cf6:	2676      	movs	r6, #118	; 0x76
    4cf8:	1f43      	subs	r3, r0, #5
    4cfa:	409f      	lsls	r7, r3
    4cfc:	2300      	movs	r3, #0
    4cfe:	4276      	negs	r6, r6
    4d00:	1a36      	subs	r6, r6, r0
    4d02:	4699      	mov	r9, r3
    4d04:	469a      	mov	sl, r3
    4d06:	e79d      	b.n	4c44 <__aeabi_fmul+0x30>
    4d08:	230c      	movs	r3, #12
    4d0a:	4699      	mov	r9, r3
    4d0c:	3b09      	subs	r3, #9
    4d0e:	26ff      	movs	r6, #255	; 0xff
    4d10:	469a      	mov	sl, r3
    4d12:	e797      	b.n	4c44 <__aeabi_fmul+0x30>
    4d14:	0028      	movs	r0, r5
    4d16:	f002 f953 	bl	6fc0 <__clzsi2>
    4d1a:	1f43      	subs	r3, r0, #5
    4d1c:	409d      	lsls	r5, r3
    4d1e:	2376      	movs	r3, #118	; 0x76
    4d20:	425b      	negs	r3, r3
    4d22:	1a18      	subs	r0, r3, r0
    4d24:	2200      	movs	r2, #0
    4d26:	e79d      	b.n	4c64 <__aeabi_fmul+0x50>
    4d28:	2080      	movs	r0, #128	; 0x80
    4d2a:	2400      	movs	r4, #0
    4d2c:	03c0      	lsls	r0, r0, #15
    4d2e:	22ff      	movs	r2, #255	; 0xff
    4d30:	e7ba      	b.n	4ca8 <__aeabi_fmul+0x94>
    4d32:	003d      	movs	r5, r7
    4d34:	4652      	mov	r2, sl
    4d36:	e7ab      	b.n	4c90 <__aeabi_fmul+0x7c>
    4d38:	003d      	movs	r5, r7
    4d3a:	0021      	movs	r1, r4
    4d3c:	4652      	mov	r2, sl
    4d3e:	e7a7      	b.n	4c90 <__aeabi_fmul+0x7c>
    4d40:	0c3b      	lsrs	r3, r7, #16
    4d42:	469c      	mov	ip, r3
    4d44:	042a      	lsls	r2, r5, #16
    4d46:	0c12      	lsrs	r2, r2, #16
    4d48:	0c2b      	lsrs	r3, r5, #16
    4d4a:	0014      	movs	r4, r2
    4d4c:	4660      	mov	r0, ip
    4d4e:	4665      	mov	r5, ip
    4d50:	043f      	lsls	r7, r7, #16
    4d52:	0c3f      	lsrs	r7, r7, #16
    4d54:	437c      	muls	r4, r7
    4d56:	4342      	muls	r2, r0
    4d58:	435d      	muls	r5, r3
    4d5a:	437b      	muls	r3, r7
    4d5c:	0c27      	lsrs	r7, r4, #16
    4d5e:	189b      	adds	r3, r3, r2
    4d60:	18ff      	adds	r7, r7, r3
    4d62:	42ba      	cmp	r2, r7
    4d64:	d903      	bls.n	4d6e <__aeabi_fmul+0x15a>
    4d66:	2380      	movs	r3, #128	; 0x80
    4d68:	025b      	lsls	r3, r3, #9
    4d6a:	469c      	mov	ip, r3
    4d6c:	4465      	add	r5, ip
    4d6e:	0424      	lsls	r4, r4, #16
    4d70:	043a      	lsls	r2, r7, #16
    4d72:	0c24      	lsrs	r4, r4, #16
    4d74:	1912      	adds	r2, r2, r4
    4d76:	0193      	lsls	r3, r2, #6
    4d78:	1e5c      	subs	r4, r3, #1
    4d7a:	41a3      	sbcs	r3, r4
    4d7c:	0c3f      	lsrs	r7, r7, #16
    4d7e:	0e92      	lsrs	r2, r2, #26
    4d80:	197d      	adds	r5, r7, r5
    4d82:	431a      	orrs	r2, r3
    4d84:	01ad      	lsls	r5, r5, #6
    4d86:	4315      	orrs	r5, r2
    4d88:	012b      	lsls	r3, r5, #4
    4d8a:	d504      	bpl.n	4d96 <__aeabi_fmul+0x182>
    4d8c:	2301      	movs	r3, #1
    4d8e:	465e      	mov	r6, fp
    4d90:	086a      	lsrs	r2, r5, #1
    4d92:	401d      	ands	r5, r3
    4d94:	4315      	orrs	r5, r2
    4d96:	0032      	movs	r2, r6
    4d98:	327f      	adds	r2, #127	; 0x7f
    4d9a:	2a00      	cmp	r2, #0
    4d9c:	dd25      	ble.n	4dea <__aeabi_fmul+0x1d6>
    4d9e:	076b      	lsls	r3, r5, #29
    4da0:	d004      	beq.n	4dac <__aeabi_fmul+0x198>
    4da2:	230f      	movs	r3, #15
    4da4:	402b      	ands	r3, r5
    4da6:	2b04      	cmp	r3, #4
    4da8:	d000      	beq.n	4dac <__aeabi_fmul+0x198>
    4daa:	3504      	adds	r5, #4
    4dac:	012b      	lsls	r3, r5, #4
    4dae:	d503      	bpl.n	4db8 <__aeabi_fmul+0x1a4>
    4db0:	0032      	movs	r2, r6
    4db2:	4b27      	ldr	r3, [pc, #156]	; (4e50 <__aeabi_fmul+0x23c>)
    4db4:	3280      	adds	r2, #128	; 0x80
    4db6:	401d      	ands	r5, r3
    4db8:	2afe      	cmp	r2, #254	; 0xfe
    4dba:	dc94      	bgt.n	4ce6 <__aeabi_fmul+0xd2>
    4dbc:	2401      	movs	r4, #1
    4dbe:	01a8      	lsls	r0, r5, #6
    4dc0:	0a40      	lsrs	r0, r0, #9
    4dc2:	b2d2      	uxtb	r2, r2
    4dc4:	400c      	ands	r4, r1
    4dc6:	e76f      	b.n	4ca8 <__aeabi_fmul+0x94>
    4dc8:	2080      	movs	r0, #128	; 0x80
    4dca:	03c0      	lsls	r0, r0, #15
    4dcc:	4207      	tst	r7, r0
    4dce:	d007      	beq.n	4de0 <__aeabi_fmul+0x1cc>
    4dd0:	4205      	tst	r5, r0
    4dd2:	d105      	bne.n	4de0 <__aeabi_fmul+0x1cc>
    4dd4:	4328      	orrs	r0, r5
    4dd6:	0240      	lsls	r0, r0, #9
    4dd8:	0a40      	lsrs	r0, r0, #9
    4dda:	4644      	mov	r4, r8
    4ddc:	22ff      	movs	r2, #255	; 0xff
    4dde:	e763      	b.n	4ca8 <__aeabi_fmul+0x94>
    4de0:	4338      	orrs	r0, r7
    4de2:	0240      	lsls	r0, r0, #9
    4de4:	0a40      	lsrs	r0, r0, #9
    4de6:	22ff      	movs	r2, #255	; 0xff
    4de8:	e75e      	b.n	4ca8 <__aeabi_fmul+0x94>
    4dea:	2401      	movs	r4, #1
    4dec:	1aa3      	subs	r3, r4, r2
    4dee:	2b1b      	cmp	r3, #27
    4df0:	dd05      	ble.n	4dfe <__aeabi_fmul+0x1ea>
    4df2:	400c      	ands	r4, r1
    4df4:	2200      	movs	r2, #0
    4df6:	2000      	movs	r0, #0
    4df8:	e756      	b.n	4ca8 <__aeabi_fmul+0x94>
    4dfa:	465e      	mov	r6, fp
    4dfc:	e7cb      	b.n	4d96 <__aeabi_fmul+0x182>
    4dfe:	002a      	movs	r2, r5
    4e00:	2020      	movs	r0, #32
    4e02:	40da      	lsrs	r2, r3
    4e04:	1ac3      	subs	r3, r0, r3
    4e06:	409d      	lsls	r5, r3
    4e08:	002b      	movs	r3, r5
    4e0a:	1e5d      	subs	r5, r3, #1
    4e0c:	41ab      	sbcs	r3, r5
    4e0e:	4313      	orrs	r3, r2
    4e10:	075a      	lsls	r2, r3, #29
    4e12:	d004      	beq.n	4e1e <__aeabi_fmul+0x20a>
    4e14:	220f      	movs	r2, #15
    4e16:	401a      	ands	r2, r3
    4e18:	2a04      	cmp	r2, #4
    4e1a:	d000      	beq.n	4e1e <__aeabi_fmul+0x20a>
    4e1c:	3304      	adds	r3, #4
    4e1e:	015a      	lsls	r2, r3, #5
    4e20:	d504      	bpl.n	4e2c <__aeabi_fmul+0x218>
    4e22:	2401      	movs	r4, #1
    4e24:	2201      	movs	r2, #1
    4e26:	400c      	ands	r4, r1
    4e28:	2000      	movs	r0, #0
    4e2a:	e73d      	b.n	4ca8 <__aeabi_fmul+0x94>
    4e2c:	2401      	movs	r4, #1
    4e2e:	019b      	lsls	r3, r3, #6
    4e30:	0a58      	lsrs	r0, r3, #9
    4e32:	400c      	ands	r4, r1
    4e34:	2200      	movs	r2, #0
    4e36:	e737      	b.n	4ca8 <__aeabi_fmul+0x94>
    4e38:	2080      	movs	r0, #128	; 0x80
    4e3a:	2401      	movs	r4, #1
    4e3c:	03c0      	lsls	r0, r0, #15
    4e3e:	4328      	orrs	r0, r5
    4e40:	0240      	lsls	r0, r0, #9
    4e42:	0a40      	lsrs	r0, r0, #9
    4e44:	400c      	ands	r4, r1
    4e46:	22ff      	movs	r2, #255	; 0xff
    4e48:	e72e      	b.n	4ca8 <__aeabi_fmul+0x94>
    4e4a:	46c0      	nop			; (mov r8, r8)
    4e4c:	00007400 	.word	0x00007400
    4e50:	f7ffffff 	.word	0xf7ffffff

00004e54 <__aeabi_fsub>:
    4e54:	b5f0      	push	{r4, r5, r6, r7, lr}
    4e56:	464f      	mov	r7, r9
    4e58:	46d6      	mov	lr, sl
    4e5a:	4646      	mov	r6, r8
    4e5c:	0044      	lsls	r4, r0, #1
    4e5e:	b5c0      	push	{r6, r7, lr}
    4e60:	0fc2      	lsrs	r2, r0, #31
    4e62:	0247      	lsls	r7, r0, #9
    4e64:	0248      	lsls	r0, r1, #9
    4e66:	0a40      	lsrs	r0, r0, #9
    4e68:	4684      	mov	ip, r0
    4e6a:	4666      	mov	r6, ip
    4e6c:	0a7b      	lsrs	r3, r7, #9
    4e6e:	0048      	lsls	r0, r1, #1
    4e70:	0fc9      	lsrs	r1, r1, #31
    4e72:	469a      	mov	sl, r3
    4e74:	0e24      	lsrs	r4, r4, #24
    4e76:	0015      	movs	r5, r2
    4e78:	00db      	lsls	r3, r3, #3
    4e7a:	0e00      	lsrs	r0, r0, #24
    4e7c:	4689      	mov	r9, r1
    4e7e:	00f6      	lsls	r6, r6, #3
    4e80:	28ff      	cmp	r0, #255	; 0xff
    4e82:	d100      	bne.n	4e86 <__aeabi_fsub+0x32>
    4e84:	e08f      	b.n	4fa6 <__aeabi_fsub+0x152>
    4e86:	2101      	movs	r1, #1
    4e88:	464f      	mov	r7, r9
    4e8a:	404f      	eors	r7, r1
    4e8c:	0039      	movs	r1, r7
    4e8e:	4291      	cmp	r1, r2
    4e90:	d066      	beq.n	4f60 <__aeabi_fsub+0x10c>
    4e92:	1a22      	subs	r2, r4, r0
    4e94:	2a00      	cmp	r2, #0
    4e96:	dc00      	bgt.n	4e9a <__aeabi_fsub+0x46>
    4e98:	e09d      	b.n	4fd6 <__aeabi_fsub+0x182>
    4e9a:	2800      	cmp	r0, #0
    4e9c:	d13d      	bne.n	4f1a <__aeabi_fsub+0xc6>
    4e9e:	2e00      	cmp	r6, #0
    4ea0:	d100      	bne.n	4ea4 <__aeabi_fsub+0x50>
    4ea2:	e08b      	b.n	4fbc <__aeabi_fsub+0x168>
    4ea4:	1e51      	subs	r1, r2, #1
    4ea6:	2900      	cmp	r1, #0
    4ea8:	d000      	beq.n	4eac <__aeabi_fsub+0x58>
    4eaa:	e0b5      	b.n	5018 <__aeabi_fsub+0x1c4>
    4eac:	2401      	movs	r4, #1
    4eae:	1b9b      	subs	r3, r3, r6
    4eb0:	015a      	lsls	r2, r3, #5
    4eb2:	d544      	bpl.n	4f3e <__aeabi_fsub+0xea>
    4eb4:	019b      	lsls	r3, r3, #6
    4eb6:	099f      	lsrs	r7, r3, #6
    4eb8:	0038      	movs	r0, r7
    4eba:	f002 f881 	bl	6fc0 <__clzsi2>
    4ebe:	3805      	subs	r0, #5
    4ec0:	4087      	lsls	r7, r0
    4ec2:	4284      	cmp	r4, r0
    4ec4:	dd00      	ble.n	4ec8 <__aeabi_fsub+0x74>
    4ec6:	e096      	b.n	4ff6 <__aeabi_fsub+0x1a2>
    4ec8:	1b04      	subs	r4, r0, r4
    4eca:	003a      	movs	r2, r7
    4ecc:	2020      	movs	r0, #32
    4ece:	3401      	adds	r4, #1
    4ed0:	40e2      	lsrs	r2, r4
    4ed2:	1b04      	subs	r4, r0, r4
    4ed4:	40a7      	lsls	r7, r4
    4ed6:	003b      	movs	r3, r7
    4ed8:	1e5f      	subs	r7, r3, #1
    4eda:	41bb      	sbcs	r3, r7
    4edc:	2400      	movs	r4, #0
    4ede:	4313      	orrs	r3, r2
    4ee0:	075a      	lsls	r2, r3, #29
    4ee2:	d004      	beq.n	4eee <__aeabi_fsub+0x9a>
    4ee4:	220f      	movs	r2, #15
    4ee6:	401a      	ands	r2, r3
    4ee8:	2a04      	cmp	r2, #4
    4eea:	d000      	beq.n	4eee <__aeabi_fsub+0x9a>
    4eec:	3304      	adds	r3, #4
    4eee:	015a      	lsls	r2, r3, #5
    4ef0:	d527      	bpl.n	4f42 <__aeabi_fsub+0xee>
    4ef2:	3401      	adds	r4, #1
    4ef4:	2cff      	cmp	r4, #255	; 0xff
    4ef6:	d100      	bne.n	4efa <__aeabi_fsub+0xa6>
    4ef8:	e079      	b.n	4fee <__aeabi_fsub+0x19a>
    4efa:	2201      	movs	r2, #1
    4efc:	019b      	lsls	r3, r3, #6
    4efe:	0a5b      	lsrs	r3, r3, #9
    4f00:	b2e4      	uxtb	r4, r4
    4f02:	402a      	ands	r2, r5
    4f04:	025b      	lsls	r3, r3, #9
    4f06:	05e4      	lsls	r4, r4, #23
    4f08:	0a58      	lsrs	r0, r3, #9
    4f0a:	07d2      	lsls	r2, r2, #31
    4f0c:	4320      	orrs	r0, r4
    4f0e:	4310      	orrs	r0, r2
    4f10:	bc1c      	pop	{r2, r3, r4}
    4f12:	4690      	mov	r8, r2
    4f14:	4699      	mov	r9, r3
    4f16:	46a2      	mov	sl, r4
    4f18:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4f1a:	2cff      	cmp	r4, #255	; 0xff
    4f1c:	d0e0      	beq.n	4ee0 <__aeabi_fsub+0x8c>
    4f1e:	2180      	movs	r1, #128	; 0x80
    4f20:	04c9      	lsls	r1, r1, #19
    4f22:	430e      	orrs	r6, r1
    4f24:	2a1b      	cmp	r2, #27
    4f26:	dc7b      	bgt.n	5020 <__aeabi_fsub+0x1cc>
    4f28:	0031      	movs	r1, r6
    4f2a:	2020      	movs	r0, #32
    4f2c:	40d1      	lsrs	r1, r2
    4f2e:	1a82      	subs	r2, r0, r2
    4f30:	4096      	lsls	r6, r2
    4f32:	1e72      	subs	r2, r6, #1
    4f34:	4196      	sbcs	r6, r2
    4f36:	430e      	orrs	r6, r1
    4f38:	1b9b      	subs	r3, r3, r6
    4f3a:	015a      	lsls	r2, r3, #5
    4f3c:	d4ba      	bmi.n	4eb4 <__aeabi_fsub+0x60>
    4f3e:	075a      	lsls	r2, r3, #29
    4f40:	d1d0      	bne.n	4ee4 <__aeabi_fsub+0x90>
    4f42:	2201      	movs	r2, #1
    4f44:	08df      	lsrs	r7, r3, #3
    4f46:	402a      	ands	r2, r5
    4f48:	2cff      	cmp	r4, #255	; 0xff
    4f4a:	d133      	bne.n	4fb4 <__aeabi_fsub+0x160>
    4f4c:	2f00      	cmp	r7, #0
    4f4e:	d100      	bne.n	4f52 <__aeabi_fsub+0xfe>
    4f50:	e0a8      	b.n	50a4 <__aeabi_fsub+0x250>
    4f52:	2380      	movs	r3, #128	; 0x80
    4f54:	03db      	lsls	r3, r3, #15
    4f56:	433b      	orrs	r3, r7
    4f58:	025b      	lsls	r3, r3, #9
    4f5a:	0a5b      	lsrs	r3, r3, #9
    4f5c:	24ff      	movs	r4, #255	; 0xff
    4f5e:	e7d1      	b.n	4f04 <__aeabi_fsub+0xb0>
    4f60:	1a21      	subs	r1, r4, r0
    4f62:	2900      	cmp	r1, #0
    4f64:	dd4c      	ble.n	5000 <__aeabi_fsub+0x1ac>
    4f66:	2800      	cmp	r0, #0
    4f68:	d02a      	beq.n	4fc0 <__aeabi_fsub+0x16c>
    4f6a:	2cff      	cmp	r4, #255	; 0xff
    4f6c:	d0b8      	beq.n	4ee0 <__aeabi_fsub+0x8c>
    4f6e:	2080      	movs	r0, #128	; 0x80
    4f70:	04c0      	lsls	r0, r0, #19
    4f72:	4306      	orrs	r6, r0
    4f74:	291b      	cmp	r1, #27
    4f76:	dd00      	ble.n	4f7a <__aeabi_fsub+0x126>
    4f78:	e0af      	b.n	50da <__aeabi_fsub+0x286>
    4f7a:	0030      	movs	r0, r6
    4f7c:	2720      	movs	r7, #32
    4f7e:	40c8      	lsrs	r0, r1
    4f80:	1a79      	subs	r1, r7, r1
    4f82:	408e      	lsls	r6, r1
    4f84:	1e71      	subs	r1, r6, #1
    4f86:	418e      	sbcs	r6, r1
    4f88:	4306      	orrs	r6, r0
    4f8a:	199b      	adds	r3, r3, r6
    4f8c:	0159      	lsls	r1, r3, #5
    4f8e:	d5d6      	bpl.n	4f3e <__aeabi_fsub+0xea>
    4f90:	3401      	adds	r4, #1
    4f92:	2cff      	cmp	r4, #255	; 0xff
    4f94:	d100      	bne.n	4f98 <__aeabi_fsub+0x144>
    4f96:	e085      	b.n	50a4 <__aeabi_fsub+0x250>
    4f98:	2201      	movs	r2, #1
    4f9a:	497a      	ldr	r1, [pc, #488]	; (5184 <__aeabi_fsub+0x330>)
    4f9c:	401a      	ands	r2, r3
    4f9e:	085b      	lsrs	r3, r3, #1
    4fa0:	400b      	ands	r3, r1
    4fa2:	4313      	orrs	r3, r2
    4fa4:	e79c      	b.n	4ee0 <__aeabi_fsub+0x8c>
    4fa6:	2e00      	cmp	r6, #0
    4fa8:	d000      	beq.n	4fac <__aeabi_fsub+0x158>
    4faa:	e770      	b.n	4e8e <__aeabi_fsub+0x3a>
    4fac:	e76b      	b.n	4e86 <__aeabi_fsub+0x32>
    4fae:	1e3b      	subs	r3, r7, #0
    4fb0:	d1c5      	bne.n	4f3e <__aeabi_fsub+0xea>
    4fb2:	2200      	movs	r2, #0
    4fb4:	027b      	lsls	r3, r7, #9
    4fb6:	0a5b      	lsrs	r3, r3, #9
    4fb8:	b2e4      	uxtb	r4, r4
    4fba:	e7a3      	b.n	4f04 <__aeabi_fsub+0xb0>
    4fbc:	0014      	movs	r4, r2
    4fbe:	e78f      	b.n	4ee0 <__aeabi_fsub+0x8c>
    4fc0:	2e00      	cmp	r6, #0
    4fc2:	d04d      	beq.n	5060 <__aeabi_fsub+0x20c>
    4fc4:	1e48      	subs	r0, r1, #1
    4fc6:	2800      	cmp	r0, #0
    4fc8:	d157      	bne.n	507a <__aeabi_fsub+0x226>
    4fca:	199b      	adds	r3, r3, r6
    4fcc:	2401      	movs	r4, #1
    4fce:	015a      	lsls	r2, r3, #5
    4fd0:	d5b5      	bpl.n	4f3e <__aeabi_fsub+0xea>
    4fd2:	2402      	movs	r4, #2
    4fd4:	e7e0      	b.n	4f98 <__aeabi_fsub+0x144>
    4fd6:	2a00      	cmp	r2, #0
    4fd8:	d125      	bne.n	5026 <__aeabi_fsub+0x1d2>
    4fda:	1c62      	adds	r2, r4, #1
    4fdc:	b2d2      	uxtb	r2, r2
    4fde:	2a01      	cmp	r2, #1
    4fe0:	dd72      	ble.n	50c8 <__aeabi_fsub+0x274>
    4fe2:	1b9f      	subs	r7, r3, r6
    4fe4:	017a      	lsls	r2, r7, #5
    4fe6:	d535      	bpl.n	5054 <__aeabi_fsub+0x200>
    4fe8:	1af7      	subs	r7, r6, r3
    4fea:	000d      	movs	r5, r1
    4fec:	e764      	b.n	4eb8 <__aeabi_fsub+0x64>
    4fee:	2201      	movs	r2, #1
    4ff0:	2300      	movs	r3, #0
    4ff2:	402a      	ands	r2, r5
    4ff4:	e786      	b.n	4f04 <__aeabi_fsub+0xb0>
    4ff6:	003b      	movs	r3, r7
    4ff8:	4a63      	ldr	r2, [pc, #396]	; (5188 <__aeabi_fsub+0x334>)
    4ffa:	1a24      	subs	r4, r4, r0
    4ffc:	4013      	ands	r3, r2
    4ffe:	e76f      	b.n	4ee0 <__aeabi_fsub+0x8c>
    5000:	2900      	cmp	r1, #0
    5002:	d16c      	bne.n	50de <__aeabi_fsub+0x28a>
    5004:	1c61      	adds	r1, r4, #1
    5006:	b2c8      	uxtb	r0, r1
    5008:	2801      	cmp	r0, #1
    500a:	dd4e      	ble.n	50aa <__aeabi_fsub+0x256>
    500c:	29ff      	cmp	r1, #255	; 0xff
    500e:	d049      	beq.n	50a4 <__aeabi_fsub+0x250>
    5010:	199b      	adds	r3, r3, r6
    5012:	085b      	lsrs	r3, r3, #1
    5014:	000c      	movs	r4, r1
    5016:	e763      	b.n	4ee0 <__aeabi_fsub+0x8c>
    5018:	2aff      	cmp	r2, #255	; 0xff
    501a:	d041      	beq.n	50a0 <__aeabi_fsub+0x24c>
    501c:	000a      	movs	r2, r1
    501e:	e781      	b.n	4f24 <__aeabi_fsub+0xd0>
    5020:	2601      	movs	r6, #1
    5022:	1b9b      	subs	r3, r3, r6
    5024:	e789      	b.n	4f3a <__aeabi_fsub+0xe6>
    5026:	2c00      	cmp	r4, #0
    5028:	d01c      	beq.n	5064 <__aeabi_fsub+0x210>
    502a:	28ff      	cmp	r0, #255	; 0xff
    502c:	d021      	beq.n	5072 <__aeabi_fsub+0x21e>
    502e:	2480      	movs	r4, #128	; 0x80
    5030:	04e4      	lsls	r4, r4, #19
    5032:	4252      	negs	r2, r2
    5034:	4323      	orrs	r3, r4
    5036:	2a1b      	cmp	r2, #27
    5038:	dd00      	ble.n	503c <__aeabi_fsub+0x1e8>
    503a:	e096      	b.n	516a <__aeabi_fsub+0x316>
    503c:	001c      	movs	r4, r3
    503e:	2520      	movs	r5, #32
    5040:	40d4      	lsrs	r4, r2
    5042:	1aaa      	subs	r2, r5, r2
    5044:	4093      	lsls	r3, r2
    5046:	1e5a      	subs	r2, r3, #1
    5048:	4193      	sbcs	r3, r2
    504a:	4323      	orrs	r3, r4
    504c:	1af3      	subs	r3, r6, r3
    504e:	0004      	movs	r4, r0
    5050:	000d      	movs	r5, r1
    5052:	e72d      	b.n	4eb0 <__aeabi_fsub+0x5c>
    5054:	2f00      	cmp	r7, #0
    5056:	d000      	beq.n	505a <__aeabi_fsub+0x206>
    5058:	e72e      	b.n	4eb8 <__aeabi_fsub+0x64>
    505a:	2200      	movs	r2, #0
    505c:	2400      	movs	r4, #0
    505e:	e7a9      	b.n	4fb4 <__aeabi_fsub+0x160>
    5060:	000c      	movs	r4, r1
    5062:	e73d      	b.n	4ee0 <__aeabi_fsub+0x8c>
    5064:	2b00      	cmp	r3, #0
    5066:	d058      	beq.n	511a <__aeabi_fsub+0x2c6>
    5068:	43d2      	mvns	r2, r2
    506a:	2a00      	cmp	r2, #0
    506c:	d0ee      	beq.n	504c <__aeabi_fsub+0x1f8>
    506e:	28ff      	cmp	r0, #255	; 0xff
    5070:	d1e1      	bne.n	5036 <__aeabi_fsub+0x1e2>
    5072:	0033      	movs	r3, r6
    5074:	24ff      	movs	r4, #255	; 0xff
    5076:	000d      	movs	r5, r1
    5078:	e732      	b.n	4ee0 <__aeabi_fsub+0x8c>
    507a:	29ff      	cmp	r1, #255	; 0xff
    507c:	d010      	beq.n	50a0 <__aeabi_fsub+0x24c>
    507e:	0001      	movs	r1, r0
    5080:	e778      	b.n	4f74 <__aeabi_fsub+0x120>
    5082:	2b00      	cmp	r3, #0
    5084:	d06e      	beq.n	5164 <__aeabi_fsub+0x310>
    5086:	24ff      	movs	r4, #255	; 0xff
    5088:	2e00      	cmp	r6, #0
    508a:	d100      	bne.n	508e <__aeabi_fsub+0x23a>
    508c:	e728      	b.n	4ee0 <__aeabi_fsub+0x8c>
    508e:	2280      	movs	r2, #128	; 0x80
    5090:	4651      	mov	r1, sl
    5092:	03d2      	lsls	r2, r2, #15
    5094:	4211      	tst	r1, r2
    5096:	d003      	beq.n	50a0 <__aeabi_fsub+0x24c>
    5098:	4661      	mov	r1, ip
    509a:	4211      	tst	r1, r2
    509c:	d100      	bne.n	50a0 <__aeabi_fsub+0x24c>
    509e:	0033      	movs	r3, r6
    50a0:	24ff      	movs	r4, #255	; 0xff
    50a2:	e71d      	b.n	4ee0 <__aeabi_fsub+0x8c>
    50a4:	24ff      	movs	r4, #255	; 0xff
    50a6:	2300      	movs	r3, #0
    50a8:	e72c      	b.n	4f04 <__aeabi_fsub+0xb0>
    50aa:	2c00      	cmp	r4, #0
    50ac:	d1e9      	bne.n	5082 <__aeabi_fsub+0x22e>
    50ae:	2b00      	cmp	r3, #0
    50b0:	d063      	beq.n	517a <__aeabi_fsub+0x326>
    50b2:	2e00      	cmp	r6, #0
    50b4:	d100      	bne.n	50b8 <__aeabi_fsub+0x264>
    50b6:	e713      	b.n	4ee0 <__aeabi_fsub+0x8c>
    50b8:	199b      	adds	r3, r3, r6
    50ba:	015a      	lsls	r2, r3, #5
    50bc:	d400      	bmi.n	50c0 <__aeabi_fsub+0x26c>
    50be:	e73e      	b.n	4f3e <__aeabi_fsub+0xea>
    50c0:	4a31      	ldr	r2, [pc, #196]	; (5188 <__aeabi_fsub+0x334>)
    50c2:	000c      	movs	r4, r1
    50c4:	4013      	ands	r3, r2
    50c6:	e70b      	b.n	4ee0 <__aeabi_fsub+0x8c>
    50c8:	2c00      	cmp	r4, #0
    50ca:	d11e      	bne.n	510a <__aeabi_fsub+0x2b6>
    50cc:	2b00      	cmp	r3, #0
    50ce:	d12f      	bne.n	5130 <__aeabi_fsub+0x2dc>
    50d0:	2e00      	cmp	r6, #0
    50d2:	d04f      	beq.n	5174 <__aeabi_fsub+0x320>
    50d4:	0033      	movs	r3, r6
    50d6:	000d      	movs	r5, r1
    50d8:	e702      	b.n	4ee0 <__aeabi_fsub+0x8c>
    50da:	2601      	movs	r6, #1
    50dc:	e755      	b.n	4f8a <__aeabi_fsub+0x136>
    50de:	2c00      	cmp	r4, #0
    50e0:	d11f      	bne.n	5122 <__aeabi_fsub+0x2ce>
    50e2:	2b00      	cmp	r3, #0
    50e4:	d043      	beq.n	516e <__aeabi_fsub+0x31a>
    50e6:	43c9      	mvns	r1, r1
    50e8:	2900      	cmp	r1, #0
    50ea:	d00b      	beq.n	5104 <__aeabi_fsub+0x2b0>
    50ec:	28ff      	cmp	r0, #255	; 0xff
    50ee:	d039      	beq.n	5164 <__aeabi_fsub+0x310>
    50f0:	291b      	cmp	r1, #27
    50f2:	dc44      	bgt.n	517e <__aeabi_fsub+0x32a>
    50f4:	001c      	movs	r4, r3
    50f6:	2720      	movs	r7, #32
    50f8:	40cc      	lsrs	r4, r1
    50fa:	1a79      	subs	r1, r7, r1
    50fc:	408b      	lsls	r3, r1
    50fe:	1e59      	subs	r1, r3, #1
    5100:	418b      	sbcs	r3, r1
    5102:	4323      	orrs	r3, r4
    5104:	199b      	adds	r3, r3, r6
    5106:	0004      	movs	r4, r0
    5108:	e740      	b.n	4f8c <__aeabi_fsub+0x138>
    510a:	2b00      	cmp	r3, #0
    510c:	d11a      	bne.n	5144 <__aeabi_fsub+0x2f0>
    510e:	2e00      	cmp	r6, #0
    5110:	d124      	bne.n	515c <__aeabi_fsub+0x308>
    5112:	2780      	movs	r7, #128	; 0x80
    5114:	2200      	movs	r2, #0
    5116:	03ff      	lsls	r7, r7, #15
    5118:	e71b      	b.n	4f52 <__aeabi_fsub+0xfe>
    511a:	0033      	movs	r3, r6
    511c:	0004      	movs	r4, r0
    511e:	000d      	movs	r5, r1
    5120:	e6de      	b.n	4ee0 <__aeabi_fsub+0x8c>
    5122:	28ff      	cmp	r0, #255	; 0xff
    5124:	d01e      	beq.n	5164 <__aeabi_fsub+0x310>
    5126:	2480      	movs	r4, #128	; 0x80
    5128:	04e4      	lsls	r4, r4, #19
    512a:	4249      	negs	r1, r1
    512c:	4323      	orrs	r3, r4
    512e:	e7df      	b.n	50f0 <__aeabi_fsub+0x29c>
    5130:	2e00      	cmp	r6, #0
    5132:	d100      	bne.n	5136 <__aeabi_fsub+0x2e2>
    5134:	e6d4      	b.n	4ee0 <__aeabi_fsub+0x8c>
    5136:	1b9f      	subs	r7, r3, r6
    5138:	017a      	lsls	r2, r7, #5
    513a:	d400      	bmi.n	513e <__aeabi_fsub+0x2ea>
    513c:	e737      	b.n	4fae <__aeabi_fsub+0x15a>
    513e:	1af3      	subs	r3, r6, r3
    5140:	000d      	movs	r5, r1
    5142:	e6cd      	b.n	4ee0 <__aeabi_fsub+0x8c>
    5144:	24ff      	movs	r4, #255	; 0xff
    5146:	2e00      	cmp	r6, #0
    5148:	d100      	bne.n	514c <__aeabi_fsub+0x2f8>
    514a:	e6c9      	b.n	4ee0 <__aeabi_fsub+0x8c>
    514c:	2280      	movs	r2, #128	; 0x80
    514e:	4650      	mov	r0, sl
    5150:	03d2      	lsls	r2, r2, #15
    5152:	4210      	tst	r0, r2
    5154:	d0a4      	beq.n	50a0 <__aeabi_fsub+0x24c>
    5156:	4660      	mov	r0, ip
    5158:	4210      	tst	r0, r2
    515a:	d1a1      	bne.n	50a0 <__aeabi_fsub+0x24c>
    515c:	0033      	movs	r3, r6
    515e:	000d      	movs	r5, r1
    5160:	24ff      	movs	r4, #255	; 0xff
    5162:	e6bd      	b.n	4ee0 <__aeabi_fsub+0x8c>
    5164:	0033      	movs	r3, r6
    5166:	24ff      	movs	r4, #255	; 0xff
    5168:	e6ba      	b.n	4ee0 <__aeabi_fsub+0x8c>
    516a:	2301      	movs	r3, #1
    516c:	e76e      	b.n	504c <__aeabi_fsub+0x1f8>
    516e:	0033      	movs	r3, r6
    5170:	0004      	movs	r4, r0
    5172:	e6b5      	b.n	4ee0 <__aeabi_fsub+0x8c>
    5174:	2700      	movs	r7, #0
    5176:	2200      	movs	r2, #0
    5178:	e71c      	b.n	4fb4 <__aeabi_fsub+0x160>
    517a:	0033      	movs	r3, r6
    517c:	e6b0      	b.n	4ee0 <__aeabi_fsub+0x8c>
    517e:	2301      	movs	r3, #1
    5180:	e7c0      	b.n	5104 <__aeabi_fsub+0x2b0>
    5182:	46c0      	nop			; (mov r8, r8)
    5184:	7dffffff 	.word	0x7dffffff
    5188:	fbffffff 	.word	0xfbffffff

0000518c <__aeabi_f2iz>:
    518c:	0241      	lsls	r1, r0, #9
    518e:	0043      	lsls	r3, r0, #1
    5190:	0fc2      	lsrs	r2, r0, #31
    5192:	0a49      	lsrs	r1, r1, #9
    5194:	0e1b      	lsrs	r3, r3, #24
    5196:	2000      	movs	r0, #0
    5198:	2b7e      	cmp	r3, #126	; 0x7e
    519a:	dd0d      	ble.n	51b8 <__aeabi_f2iz+0x2c>
    519c:	2b9d      	cmp	r3, #157	; 0x9d
    519e:	dc0c      	bgt.n	51ba <__aeabi_f2iz+0x2e>
    51a0:	2080      	movs	r0, #128	; 0x80
    51a2:	0400      	lsls	r0, r0, #16
    51a4:	4301      	orrs	r1, r0
    51a6:	2b95      	cmp	r3, #149	; 0x95
    51a8:	dc0a      	bgt.n	51c0 <__aeabi_f2iz+0x34>
    51aa:	2096      	movs	r0, #150	; 0x96
    51ac:	1ac3      	subs	r3, r0, r3
    51ae:	40d9      	lsrs	r1, r3
    51b0:	4248      	negs	r0, r1
    51b2:	2a00      	cmp	r2, #0
    51b4:	d100      	bne.n	51b8 <__aeabi_f2iz+0x2c>
    51b6:	0008      	movs	r0, r1
    51b8:	4770      	bx	lr
    51ba:	4b03      	ldr	r3, [pc, #12]	; (51c8 <__aeabi_f2iz+0x3c>)
    51bc:	18d0      	adds	r0, r2, r3
    51be:	e7fb      	b.n	51b8 <__aeabi_f2iz+0x2c>
    51c0:	3b96      	subs	r3, #150	; 0x96
    51c2:	4099      	lsls	r1, r3
    51c4:	e7f4      	b.n	51b0 <__aeabi_f2iz+0x24>
    51c6:	46c0      	nop			; (mov r8, r8)
    51c8:	7fffffff 	.word	0x7fffffff

000051cc <__aeabi_i2f>:
    51cc:	b570      	push	{r4, r5, r6, lr}
    51ce:	2800      	cmp	r0, #0
    51d0:	d030      	beq.n	5234 <__aeabi_i2f+0x68>
    51d2:	17c3      	asrs	r3, r0, #31
    51d4:	18c4      	adds	r4, r0, r3
    51d6:	405c      	eors	r4, r3
    51d8:	0fc5      	lsrs	r5, r0, #31
    51da:	0020      	movs	r0, r4
    51dc:	f001 fef0 	bl	6fc0 <__clzsi2>
    51e0:	239e      	movs	r3, #158	; 0x9e
    51e2:	1a1b      	subs	r3, r3, r0
    51e4:	2b96      	cmp	r3, #150	; 0x96
    51e6:	dc0d      	bgt.n	5204 <__aeabi_i2f+0x38>
    51e8:	2296      	movs	r2, #150	; 0x96
    51ea:	1ad2      	subs	r2, r2, r3
    51ec:	4094      	lsls	r4, r2
    51ee:	002a      	movs	r2, r5
    51f0:	0264      	lsls	r4, r4, #9
    51f2:	0a64      	lsrs	r4, r4, #9
    51f4:	b2db      	uxtb	r3, r3
    51f6:	0264      	lsls	r4, r4, #9
    51f8:	05db      	lsls	r3, r3, #23
    51fa:	0a60      	lsrs	r0, r4, #9
    51fc:	07d2      	lsls	r2, r2, #31
    51fe:	4318      	orrs	r0, r3
    5200:	4310      	orrs	r0, r2
    5202:	bd70      	pop	{r4, r5, r6, pc}
    5204:	2b99      	cmp	r3, #153	; 0x99
    5206:	dc19      	bgt.n	523c <__aeabi_i2f+0x70>
    5208:	2299      	movs	r2, #153	; 0x99
    520a:	1ad2      	subs	r2, r2, r3
    520c:	2a00      	cmp	r2, #0
    520e:	dd29      	ble.n	5264 <__aeabi_i2f+0x98>
    5210:	4094      	lsls	r4, r2
    5212:	0022      	movs	r2, r4
    5214:	4c14      	ldr	r4, [pc, #80]	; (5268 <__aeabi_i2f+0x9c>)
    5216:	4014      	ands	r4, r2
    5218:	0751      	lsls	r1, r2, #29
    521a:	d004      	beq.n	5226 <__aeabi_i2f+0x5a>
    521c:	210f      	movs	r1, #15
    521e:	400a      	ands	r2, r1
    5220:	2a04      	cmp	r2, #4
    5222:	d000      	beq.n	5226 <__aeabi_i2f+0x5a>
    5224:	3404      	adds	r4, #4
    5226:	0162      	lsls	r2, r4, #5
    5228:	d413      	bmi.n	5252 <__aeabi_i2f+0x86>
    522a:	01a4      	lsls	r4, r4, #6
    522c:	0a64      	lsrs	r4, r4, #9
    522e:	b2db      	uxtb	r3, r3
    5230:	002a      	movs	r2, r5
    5232:	e7e0      	b.n	51f6 <__aeabi_i2f+0x2a>
    5234:	2200      	movs	r2, #0
    5236:	2300      	movs	r3, #0
    5238:	2400      	movs	r4, #0
    523a:	e7dc      	b.n	51f6 <__aeabi_i2f+0x2a>
    523c:	2205      	movs	r2, #5
    523e:	0021      	movs	r1, r4
    5240:	1a12      	subs	r2, r2, r0
    5242:	40d1      	lsrs	r1, r2
    5244:	22b9      	movs	r2, #185	; 0xb9
    5246:	1ad2      	subs	r2, r2, r3
    5248:	4094      	lsls	r4, r2
    524a:	1e62      	subs	r2, r4, #1
    524c:	4194      	sbcs	r4, r2
    524e:	430c      	orrs	r4, r1
    5250:	e7da      	b.n	5208 <__aeabi_i2f+0x3c>
    5252:	4b05      	ldr	r3, [pc, #20]	; (5268 <__aeabi_i2f+0x9c>)
    5254:	002a      	movs	r2, r5
    5256:	401c      	ands	r4, r3
    5258:	239f      	movs	r3, #159	; 0x9f
    525a:	01a4      	lsls	r4, r4, #6
    525c:	1a1b      	subs	r3, r3, r0
    525e:	0a64      	lsrs	r4, r4, #9
    5260:	b2db      	uxtb	r3, r3
    5262:	e7c8      	b.n	51f6 <__aeabi_i2f+0x2a>
    5264:	0022      	movs	r2, r4
    5266:	e7d5      	b.n	5214 <__aeabi_i2f+0x48>
    5268:	fbffffff 	.word	0xfbffffff

0000526c <__aeabi_ui2f>:
    526c:	b510      	push	{r4, lr}
    526e:	1e04      	subs	r4, r0, #0
    5270:	d027      	beq.n	52c2 <__aeabi_ui2f+0x56>
    5272:	f001 fea5 	bl	6fc0 <__clzsi2>
    5276:	239e      	movs	r3, #158	; 0x9e
    5278:	1a1b      	subs	r3, r3, r0
    527a:	2b96      	cmp	r3, #150	; 0x96
    527c:	dc0a      	bgt.n	5294 <__aeabi_ui2f+0x28>
    527e:	2296      	movs	r2, #150	; 0x96
    5280:	1ad2      	subs	r2, r2, r3
    5282:	4094      	lsls	r4, r2
    5284:	0264      	lsls	r4, r4, #9
    5286:	0a64      	lsrs	r4, r4, #9
    5288:	b2db      	uxtb	r3, r3
    528a:	0264      	lsls	r4, r4, #9
    528c:	05db      	lsls	r3, r3, #23
    528e:	0a60      	lsrs	r0, r4, #9
    5290:	4318      	orrs	r0, r3
    5292:	bd10      	pop	{r4, pc}
    5294:	2b99      	cmp	r3, #153	; 0x99
    5296:	dc17      	bgt.n	52c8 <__aeabi_ui2f+0x5c>
    5298:	2299      	movs	r2, #153	; 0x99
    529a:	1ad2      	subs	r2, r2, r3
    529c:	2a00      	cmp	r2, #0
    529e:	dd27      	ble.n	52f0 <__aeabi_ui2f+0x84>
    52a0:	4094      	lsls	r4, r2
    52a2:	0022      	movs	r2, r4
    52a4:	4c13      	ldr	r4, [pc, #76]	; (52f4 <__aeabi_ui2f+0x88>)
    52a6:	4014      	ands	r4, r2
    52a8:	0751      	lsls	r1, r2, #29
    52aa:	d004      	beq.n	52b6 <__aeabi_ui2f+0x4a>
    52ac:	210f      	movs	r1, #15
    52ae:	400a      	ands	r2, r1
    52b0:	2a04      	cmp	r2, #4
    52b2:	d000      	beq.n	52b6 <__aeabi_ui2f+0x4a>
    52b4:	3404      	adds	r4, #4
    52b6:	0162      	lsls	r2, r4, #5
    52b8:	d412      	bmi.n	52e0 <__aeabi_ui2f+0x74>
    52ba:	01a4      	lsls	r4, r4, #6
    52bc:	0a64      	lsrs	r4, r4, #9
    52be:	b2db      	uxtb	r3, r3
    52c0:	e7e3      	b.n	528a <__aeabi_ui2f+0x1e>
    52c2:	2300      	movs	r3, #0
    52c4:	2400      	movs	r4, #0
    52c6:	e7e0      	b.n	528a <__aeabi_ui2f+0x1e>
    52c8:	22b9      	movs	r2, #185	; 0xb9
    52ca:	0021      	movs	r1, r4
    52cc:	1ad2      	subs	r2, r2, r3
    52ce:	4091      	lsls	r1, r2
    52d0:	000a      	movs	r2, r1
    52d2:	1e51      	subs	r1, r2, #1
    52d4:	418a      	sbcs	r2, r1
    52d6:	2105      	movs	r1, #5
    52d8:	1a09      	subs	r1, r1, r0
    52da:	40cc      	lsrs	r4, r1
    52dc:	4314      	orrs	r4, r2
    52de:	e7db      	b.n	5298 <__aeabi_ui2f+0x2c>
    52e0:	4b04      	ldr	r3, [pc, #16]	; (52f4 <__aeabi_ui2f+0x88>)
    52e2:	401c      	ands	r4, r3
    52e4:	239f      	movs	r3, #159	; 0x9f
    52e6:	01a4      	lsls	r4, r4, #6
    52e8:	1a1b      	subs	r3, r3, r0
    52ea:	0a64      	lsrs	r4, r4, #9
    52ec:	b2db      	uxtb	r3, r3
    52ee:	e7cc      	b.n	528a <__aeabi_ui2f+0x1e>
    52f0:	0022      	movs	r2, r4
    52f2:	e7d7      	b.n	52a4 <__aeabi_ui2f+0x38>
    52f4:	fbffffff 	.word	0xfbffffff

000052f8 <__aeabi_dadd>:
    52f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    52fa:	4645      	mov	r5, r8
    52fc:	46de      	mov	lr, fp
    52fe:	4657      	mov	r7, sl
    5300:	464e      	mov	r6, r9
    5302:	030c      	lsls	r4, r1, #12
    5304:	b5e0      	push	{r5, r6, r7, lr}
    5306:	004e      	lsls	r6, r1, #1
    5308:	0fc9      	lsrs	r1, r1, #31
    530a:	4688      	mov	r8, r1
    530c:	000d      	movs	r5, r1
    530e:	0a61      	lsrs	r1, r4, #9
    5310:	0f44      	lsrs	r4, r0, #29
    5312:	430c      	orrs	r4, r1
    5314:	00c7      	lsls	r7, r0, #3
    5316:	0319      	lsls	r1, r3, #12
    5318:	0058      	lsls	r0, r3, #1
    531a:	0fdb      	lsrs	r3, r3, #31
    531c:	469b      	mov	fp, r3
    531e:	0a4b      	lsrs	r3, r1, #9
    5320:	0f51      	lsrs	r1, r2, #29
    5322:	430b      	orrs	r3, r1
    5324:	0d76      	lsrs	r6, r6, #21
    5326:	0d40      	lsrs	r0, r0, #21
    5328:	0019      	movs	r1, r3
    532a:	00d2      	lsls	r2, r2, #3
    532c:	45d8      	cmp	r8, fp
    532e:	d100      	bne.n	5332 <__aeabi_dadd+0x3a>
    5330:	e0ae      	b.n	5490 <__aeabi_dadd+0x198>
    5332:	1a35      	subs	r5, r6, r0
    5334:	2d00      	cmp	r5, #0
    5336:	dc00      	bgt.n	533a <__aeabi_dadd+0x42>
    5338:	e0f6      	b.n	5528 <__aeabi_dadd+0x230>
    533a:	2800      	cmp	r0, #0
    533c:	d10f      	bne.n	535e <__aeabi_dadd+0x66>
    533e:	4313      	orrs	r3, r2
    5340:	d100      	bne.n	5344 <__aeabi_dadd+0x4c>
    5342:	e0db      	b.n	54fc <__aeabi_dadd+0x204>
    5344:	1e6b      	subs	r3, r5, #1
    5346:	2b00      	cmp	r3, #0
    5348:	d000      	beq.n	534c <__aeabi_dadd+0x54>
    534a:	e137      	b.n	55bc <__aeabi_dadd+0x2c4>
    534c:	1aba      	subs	r2, r7, r2
    534e:	4297      	cmp	r7, r2
    5350:	41bf      	sbcs	r7, r7
    5352:	1a64      	subs	r4, r4, r1
    5354:	427f      	negs	r7, r7
    5356:	1be4      	subs	r4, r4, r7
    5358:	2601      	movs	r6, #1
    535a:	0017      	movs	r7, r2
    535c:	e024      	b.n	53a8 <__aeabi_dadd+0xb0>
    535e:	4bc6      	ldr	r3, [pc, #792]	; (5678 <__aeabi_dadd+0x380>)
    5360:	429e      	cmp	r6, r3
    5362:	d04d      	beq.n	5400 <__aeabi_dadd+0x108>
    5364:	2380      	movs	r3, #128	; 0x80
    5366:	041b      	lsls	r3, r3, #16
    5368:	4319      	orrs	r1, r3
    536a:	2d38      	cmp	r5, #56	; 0x38
    536c:	dd00      	ble.n	5370 <__aeabi_dadd+0x78>
    536e:	e107      	b.n	5580 <__aeabi_dadd+0x288>
    5370:	2d1f      	cmp	r5, #31
    5372:	dd00      	ble.n	5376 <__aeabi_dadd+0x7e>
    5374:	e138      	b.n	55e8 <__aeabi_dadd+0x2f0>
    5376:	2020      	movs	r0, #32
    5378:	1b43      	subs	r3, r0, r5
    537a:	469a      	mov	sl, r3
    537c:	000b      	movs	r3, r1
    537e:	4650      	mov	r0, sl
    5380:	4083      	lsls	r3, r0
    5382:	4699      	mov	r9, r3
    5384:	0013      	movs	r3, r2
    5386:	4648      	mov	r0, r9
    5388:	40eb      	lsrs	r3, r5
    538a:	4318      	orrs	r0, r3
    538c:	0003      	movs	r3, r0
    538e:	4650      	mov	r0, sl
    5390:	4082      	lsls	r2, r0
    5392:	1e50      	subs	r0, r2, #1
    5394:	4182      	sbcs	r2, r0
    5396:	40e9      	lsrs	r1, r5
    5398:	431a      	orrs	r2, r3
    539a:	1aba      	subs	r2, r7, r2
    539c:	1a61      	subs	r1, r4, r1
    539e:	4297      	cmp	r7, r2
    53a0:	41a4      	sbcs	r4, r4
    53a2:	0017      	movs	r7, r2
    53a4:	4264      	negs	r4, r4
    53a6:	1b0c      	subs	r4, r1, r4
    53a8:	0223      	lsls	r3, r4, #8
    53aa:	d562      	bpl.n	5472 <__aeabi_dadd+0x17a>
    53ac:	0264      	lsls	r4, r4, #9
    53ae:	0a65      	lsrs	r5, r4, #9
    53b0:	2d00      	cmp	r5, #0
    53b2:	d100      	bne.n	53b6 <__aeabi_dadd+0xbe>
    53b4:	e0df      	b.n	5576 <__aeabi_dadd+0x27e>
    53b6:	0028      	movs	r0, r5
    53b8:	f001 fe02 	bl	6fc0 <__clzsi2>
    53bc:	0003      	movs	r3, r0
    53be:	3b08      	subs	r3, #8
    53c0:	2b1f      	cmp	r3, #31
    53c2:	dd00      	ble.n	53c6 <__aeabi_dadd+0xce>
    53c4:	e0d2      	b.n	556c <__aeabi_dadd+0x274>
    53c6:	2220      	movs	r2, #32
    53c8:	003c      	movs	r4, r7
    53ca:	1ad2      	subs	r2, r2, r3
    53cc:	409d      	lsls	r5, r3
    53ce:	40d4      	lsrs	r4, r2
    53d0:	409f      	lsls	r7, r3
    53d2:	4325      	orrs	r5, r4
    53d4:	429e      	cmp	r6, r3
    53d6:	dd00      	ble.n	53da <__aeabi_dadd+0xe2>
    53d8:	e0c4      	b.n	5564 <__aeabi_dadd+0x26c>
    53da:	1b9e      	subs	r6, r3, r6
    53dc:	1c73      	adds	r3, r6, #1
    53de:	2b1f      	cmp	r3, #31
    53e0:	dd00      	ble.n	53e4 <__aeabi_dadd+0xec>
    53e2:	e0f1      	b.n	55c8 <__aeabi_dadd+0x2d0>
    53e4:	2220      	movs	r2, #32
    53e6:	0038      	movs	r0, r7
    53e8:	0029      	movs	r1, r5
    53ea:	1ad2      	subs	r2, r2, r3
    53ec:	40d8      	lsrs	r0, r3
    53ee:	4091      	lsls	r1, r2
    53f0:	4097      	lsls	r7, r2
    53f2:	002c      	movs	r4, r5
    53f4:	4301      	orrs	r1, r0
    53f6:	1e78      	subs	r0, r7, #1
    53f8:	4187      	sbcs	r7, r0
    53fa:	40dc      	lsrs	r4, r3
    53fc:	2600      	movs	r6, #0
    53fe:	430f      	orrs	r7, r1
    5400:	077b      	lsls	r3, r7, #29
    5402:	d009      	beq.n	5418 <__aeabi_dadd+0x120>
    5404:	230f      	movs	r3, #15
    5406:	403b      	ands	r3, r7
    5408:	2b04      	cmp	r3, #4
    540a:	d005      	beq.n	5418 <__aeabi_dadd+0x120>
    540c:	1d3b      	adds	r3, r7, #4
    540e:	42bb      	cmp	r3, r7
    5410:	41bf      	sbcs	r7, r7
    5412:	427f      	negs	r7, r7
    5414:	19e4      	adds	r4, r4, r7
    5416:	001f      	movs	r7, r3
    5418:	0223      	lsls	r3, r4, #8
    541a:	d52c      	bpl.n	5476 <__aeabi_dadd+0x17e>
    541c:	4b96      	ldr	r3, [pc, #600]	; (5678 <__aeabi_dadd+0x380>)
    541e:	3601      	adds	r6, #1
    5420:	429e      	cmp	r6, r3
    5422:	d100      	bne.n	5426 <__aeabi_dadd+0x12e>
    5424:	e09a      	b.n	555c <__aeabi_dadd+0x264>
    5426:	4645      	mov	r5, r8
    5428:	4b94      	ldr	r3, [pc, #592]	; (567c <__aeabi_dadd+0x384>)
    542a:	08ff      	lsrs	r7, r7, #3
    542c:	401c      	ands	r4, r3
    542e:	0760      	lsls	r0, r4, #29
    5430:	0576      	lsls	r6, r6, #21
    5432:	0264      	lsls	r4, r4, #9
    5434:	4307      	orrs	r7, r0
    5436:	0b24      	lsrs	r4, r4, #12
    5438:	0d76      	lsrs	r6, r6, #21
    543a:	2100      	movs	r1, #0
    543c:	0324      	lsls	r4, r4, #12
    543e:	0b23      	lsrs	r3, r4, #12
    5440:	0d0c      	lsrs	r4, r1, #20
    5442:	4a8f      	ldr	r2, [pc, #572]	; (5680 <__aeabi_dadd+0x388>)
    5444:	0524      	lsls	r4, r4, #20
    5446:	431c      	orrs	r4, r3
    5448:	4014      	ands	r4, r2
    544a:	0533      	lsls	r3, r6, #20
    544c:	4323      	orrs	r3, r4
    544e:	005b      	lsls	r3, r3, #1
    5450:	07ed      	lsls	r5, r5, #31
    5452:	085b      	lsrs	r3, r3, #1
    5454:	432b      	orrs	r3, r5
    5456:	0038      	movs	r0, r7
    5458:	0019      	movs	r1, r3
    545a:	bc3c      	pop	{r2, r3, r4, r5}
    545c:	4690      	mov	r8, r2
    545e:	4699      	mov	r9, r3
    5460:	46a2      	mov	sl, r4
    5462:	46ab      	mov	fp, r5
    5464:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5466:	4664      	mov	r4, ip
    5468:	4304      	orrs	r4, r0
    546a:	d100      	bne.n	546e <__aeabi_dadd+0x176>
    546c:	e211      	b.n	5892 <__aeabi_dadd+0x59a>
    546e:	0004      	movs	r4, r0
    5470:	4667      	mov	r7, ip
    5472:	077b      	lsls	r3, r7, #29
    5474:	d1c6      	bne.n	5404 <__aeabi_dadd+0x10c>
    5476:	4645      	mov	r5, r8
    5478:	0760      	lsls	r0, r4, #29
    547a:	08ff      	lsrs	r7, r7, #3
    547c:	4307      	orrs	r7, r0
    547e:	08e4      	lsrs	r4, r4, #3
    5480:	4b7d      	ldr	r3, [pc, #500]	; (5678 <__aeabi_dadd+0x380>)
    5482:	429e      	cmp	r6, r3
    5484:	d030      	beq.n	54e8 <__aeabi_dadd+0x1f0>
    5486:	0324      	lsls	r4, r4, #12
    5488:	0576      	lsls	r6, r6, #21
    548a:	0b24      	lsrs	r4, r4, #12
    548c:	0d76      	lsrs	r6, r6, #21
    548e:	e7d4      	b.n	543a <__aeabi_dadd+0x142>
    5490:	1a33      	subs	r3, r6, r0
    5492:	469a      	mov	sl, r3
    5494:	2b00      	cmp	r3, #0
    5496:	dd78      	ble.n	558a <__aeabi_dadd+0x292>
    5498:	2800      	cmp	r0, #0
    549a:	d031      	beq.n	5500 <__aeabi_dadd+0x208>
    549c:	4876      	ldr	r0, [pc, #472]	; (5678 <__aeabi_dadd+0x380>)
    549e:	4286      	cmp	r6, r0
    54a0:	d0ae      	beq.n	5400 <__aeabi_dadd+0x108>
    54a2:	2080      	movs	r0, #128	; 0x80
    54a4:	0400      	lsls	r0, r0, #16
    54a6:	4301      	orrs	r1, r0
    54a8:	4653      	mov	r3, sl
    54aa:	2b38      	cmp	r3, #56	; 0x38
    54ac:	dc00      	bgt.n	54b0 <__aeabi_dadd+0x1b8>
    54ae:	e0e9      	b.n	5684 <__aeabi_dadd+0x38c>
    54b0:	430a      	orrs	r2, r1
    54b2:	1e51      	subs	r1, r2, #1
    54b4:	418a      	sbcs	r2, r1
    54b6:	2100      	movs	r1, #0
    54b8:	19d2      	adds	r2, r2, r7
    54ba:	42ba      	cmp	r2, r7
    54bc:	41bf      	sbcs	r7, r7
    54be:	1909      	adds	r1, r1, r4
    54c0:	427c      	negs	r4, r7
    54c2:	0017      	movs	r7, r2
    54c4:	190c      	adds	r4, r1, r4
    54c6:	0223      	lsls	r3, r4, #8
    54c8:	d5d3      	bpl.n	5472 <__aeabi_dadd+0x17a>
    54ca:	4b6b      	ldr	r3, [pc, #428]	; (5678 <__aeabi_dadd+0x380>)
    54cc:	3601      	adds	r6, #1
    54ce:	429e      	cmp	r6, r3
    54d0:	d100      	bne.n	54d4 <__aeabi_dadd+0x1dc>
    54d2:	e13a      	b.n	574a <__aeabi_dadd+0x452>
    54d4:	2001      	movs	r0, #1
    54d6:	4b69      	ldr	r3, [pc, #420]	; (567c <__aeabi_dadd+0x384>)
    54d8:	401c      	ands	r4, r3
    54da:	087b      	lsrs	r3, r7, #1
    54dc:	4007      	ands	r7, r0
    54de:	431f      	orrs	r7, r3
    54e0:	07e0      	lsls	r0, r4, #31
    54e2:	4307      	orrs	r7, r0
    54e4:	0864      	lsrs	r4, r4, #1
    54e6:	e78b      	b.n	5400 <__aeabi_dadd+0x108>
    54e8:	0023      	movs	r3, r4
    54ea:	433b      	orrs	r3, r7
    54ec:	d100      	bne.n	54f0 <__aeabi_dadd+0x1f8>
    54ee:	e1cb      	b.n	5888 <__aeabi_dadd+0x590>
    54f0:	2280      	movs	r2, #128	; 0x80
    54f2:	0312      	lsls	r2, r2, #12
    54f4:	4314      	orrs	r4, r2
    54f6:	0324      	lsls	r4, r4, #12
    54f8:	0b24      	lsrs	r4, r4, #12
    54fa:	e79e      	b.n	543a <__aeabi_dadd+0x142>
    54fc:	002e      	movs	r6, r5
    54fe:	e77f      	b.n	5400 <__aeabi_dadd+0x108>
    5500:	0008      	movs	r0, r1
    5502:	4310      	orrs	r0, r2
    5504:	d100      	bne.n	5508 <__aeabi_dadd+0x210>
    5506:	e0b4      	b.n	5672 <__aeabi_dadd+0x37a>
    5508:	1e58      	subs	r0, r3, #1
    550a:	2800      	cmp	r0, #0
    550c:	d000      	beq.n	5510 <__aeabi_dadd+0x218>
    550e:	e0de      	b.n	56ce <__aeabi_dadd+0x3d6>
    5510:	18ba      	adds	r2, r7, r2
    5512:	42ba      	cmp	r2, r7
    5514:	419b      	sbcs	r3, r3
    5516:	1864      	adds	r4, r4, r1
    5518:	425b      	negs	r3, r3
    551a:	18e4      	adds	r4, r4, r3
    551c:	0017      	movs	r7, r2
    551e:	2601      	movs	r6, #1
    5520:	0223      	lsls	r3, r4, #8
    5522:	d5a6      	bpl.n	5472 <__aeabi_dadd+0x17a>
    5524:	2602      	movs	r6, #2
    5526:	e7d5      	b.n	54d4 <__aeabi_dadd+0x1dc>
    5528:	2d00      	cmp	r5, #0
    552a:	d16e      	bne.n	560a <__aeabi_dadd+0x312>
    552c:	1c70      	adds	r0, r6, #1
    552e:	0540      	lsls	r0, r0, #21
    5530:	0d40      	lsrs	r0, r0, #21
    5532:	2801      	cmp	r0, #1
    5534:	dc00      	bgt.n	5538 <__aeabi_dadd+0x240>
    5536:	e0f9      	b.n	572c <__aeabi_dadd+0x434>
    5538:	1ab8      	subs	r0, r7, r2
    553a:	4684      	mov	ip, r0
    553c:	4287      	cmp	r7, r0
    553e:	4180      	sbcs	r0, r0
    5540:	1ae5      	subs	r5, r4, r3
    5542:	4240      	negs	r0, r0
    5544:	1a2d      	subs	r5, r5, r0
    5546:	0228      	lsls	r0, r5, #8
    5548:	d400      	bmi.n	554c <__aeabi_dadd+0x254>
    554a:	e089      	b.n	5660 <__aeabi_dadd+0x368>
    554c:	1bd7      	subs	r7, r2, r7
    554e:	42ba      	cmp	r2, r7
    5550:	4192      	sbcs	r2, r2
    5552:	1b1c      	subs	r4, r3, r4
    5554:	4252      	negs	r2, r2
    5556:	1aa5      	subs	r5, r4, r2
    5558:	46d8      	mov	r8, fp
    555a:	e729      	b.n	53b0 <__aeabi_dadd+0xb8>
    555c:	4645      	mov	r5, r8
    555e:	2400      	movs	r4, #0
    5560:	2700      	movs	r7, #0
    5562:	e76a      	b.n	543a <__aeabi_dadd+0x142>
    5564:	4c45      	ldr	r4, [pc, #276]	; (567c <__aeabi_dadd+0x384>)
    5566:	1af6      	subs	r6, r6, r3
    5568:	402c      	ands	r4, r5
    556a:	e749      	b.n	5400 <__aeabi_dadd+0x108>
    556c:	003d      	movs	r5, r7
    556e:	3828      	subs	r0, #40	; 0x28
    5570:	4085      	lsls	r5, r0
    5572:	2700      	movs	r7, #0
    5574:	e72e      	b.n	53d4 <__aeabi_dadd+0xdc>
    5576:	0038      	movs	r0, r7
    5578:	f001 fd22 	bl	6fc0 <__clzsi2>
    557c:	3020      	adds	r0, #32
    557e:	e71d      	b.n	53bc <__aeabi_dadd+0xc4>
    5580:	430a      	orrs	r2, r1
    5582:	1e51      	subs	r1, r2, #1
    5584:	418a      	sbcs	r2, r1
    5586:	2100      	movs	r1, #0
    5588:	e707      	b.n	539a <__aeabi_dadd+0xa2>
    558a:	2b00      	cmp	r3, #0
    558c:	d000      	beq.n	5590 <__aeabi_dadd+0x298>
    558e:	e0f3      	b.n	5778 <__aeabi_dadd+0x480>
    5590:	1c70      	adds	r0, r6, #1
    5592:	0543      	lsls	r3, r0, #21
    5594:	0d5b      	lsrs	r3, r3, #21
    5596:	2b01      	cmp	r3, #1
    5598:	dc00      	bgt.n	559c <__aeabi_dadd+0x2a4>
    559a:	e0ad      	b.n	56f8 <__aeabi_dadd+0x400>
    559c:	4b36      	ldr	r3, [pc, #216]	; (5678 <__aeabi_dadd+0x380>)
    559e:	4298      	cmp	r0, r3
    55a0:	d100      	bne.n	55a4 <__aeabi_dadd+0x2ac>
    55a2:	e0d1      	b.n	5748 <__aeabi_dadd+0x450>
    55a4:	18ba      	adds	r2, r7, r2
    55a6:	42ba      	cmp	r2, r7
    55a8:	41bf      	sbcs	r7, r7
    55aa:	1864      	adds	r4, r4, r1
    55ac:	427f      	negs	r7, r7
    55ae:	19e4      	adds	r4, r4, r7
    55b0:	07e7      	lsls	r7, r4, #31
    55b2:	0852      	lsrs	r2, r2, #1
    55b4:	4317      	orrs	r7, r2
    55b6:	0864      	lsrs	r4, r4, #1
    55b8:	0006      	movs	r6, r0
    55ba:	e721      	b.n	5400 <__aeabi_dadd+0x108>
    55bc:	482e      	ldr	r0, [pc, #184]	; (5678 <__aeabi_dadd+0x380>)
    55be:	4285      	cmp	r5, r0
    55c0:	d100      	bne.n	55c4 <__aeabi_dadd+0x2cc>
    55c2:	e093      	b.n	56ec <__aeabi_dadd+0x3f4>
    55c4:	001d      	movs	r5, r3
    55c6:	e6d0      	b.n	536a <__aeabi_dadd+0x72>
    55c8:	0029      	movs	r1, r5
    55ca:	3e1f      	subs	r6, #31
    55cc:	40f1      	lsrs	r1, r6
    55ce:	2b20      	cmp	r3, #32
    55d0:	d100      	bne.n	55d4 <__aeabi_dadd+0x2dc>
    55d2:	e08d      	b.n	56f0 <__aeabi_dadd+0x3f8>
    55d4:	2240      	movs	r2, #64	; 0x40
    55d6:	1ad3      	subs	r3, r2, r3
    55d8:	409d      	lsls	r5, r3
    55da:	432f      	orrs	r7, r5
    55dc:	1e7d      	subs	r5, r7, #1
    55de:	41af      	sbcs	r7, r5
    55e0:	2400      	movs	r4, #0
    55e2:	430f      	orrs	r7, r1
    55e4:	2600      	movs	r6, #0
    55e6:	e744      	b.n	5472 <__aeabi_dadd+0x17a>
    55e8:	002b      	movs	r3, r5
    55ea:	0008      	movs	r0, r1
    55ec:	3b20      	subs	r3, #32
    55ee:	40d8      	lsrs	r0, r3
    55f0:	0003      	movs	r3, r0
    55f2:	2d20      	cmp	r5, #32
    55f4:	d100      	bne.n	55f8 <__aeabi_dadd+0x300>
    55f6:	e07d      	b.n	56f4 <__aeabi_dadd+0x3fc>
    55f8:	2040      	movs	r0, #64	; 0x40
    55fa:	1b45      	subs	r5, r0, r5
    55fc:	40a9      	lsls	r1, r5
    55fe:	430a      	orrs	r2, r1
    5600:	1e51      	subs	r1, r2, #1
    5602:	418a      	sbcs	r2, r1
    5604:	2100      	movs	r1, #0
    5606:	431a      	orrs	r2, r3
    5608:	e6c7      	b.n	539a <__aeabi_dadd+0xa2>
    560a:	2e00      	cmp	r6, #0
    560c:	d050      	beq.n	56b0 <__aeabi_dadd+0x3b8>
    560e:	4e1a      	ldr	r6, [pc, #104]	; (5678 <__aeabi_dadd+0x380>)
    5610:	42b0      	cmp	r0, r6
    5612:	d057      	beq.n	56c4 <__aeabi_dadd+0x3cc>
    5614:	2680      	movs	r6, #128	; 0x80
    5616:	426b      	negs	r3, r5
    5618:	4699      	mov	r9, r3
    561a:	0436      	lsls	r6, r6, #16
    561c:	4334      	orrs	r4, r6
    561e:	464b      	mov	r3, r9
    5620:	2b38      	cmp	r3, #56	; 0x38
    5622:	dd00      	ble.n	5626 <__aeabi_dadd+0x32e>
    5624:	e0d6      	b.n	57d4 <__aeabi_dadd+0x4dc>
    5626:	2b1f      	cmp	r3, #31
    5628:	dd00      	ble.n	562c <__aeabi_dadd+0x334>
    562a:	e135      	b.n	5898 <__aeabi_dadd+0x5a0>
    562c:	2620      	movs	r6, #32
    562e:	1af5      	subs	r5, r6, r3
    5630:	0026      	movs	r6, r4
    5632:	40ae      	lsls	r6, r5
    5634:	46b2      	mov	sl, r6
    5636:	003e      	movs	r6, r7
    5638:	40de      	lsrs	r6, r3
    563a:	46ac      	mov	ip, r5
    563c:	0035      	movs	r5, r6
    563e:	4656      	mov	r6, sl
    5640:	432e      	orrs	r6, r5
    5642:	4665      	mov	r5, ip
    5644:	40af      	lsls	r7, r5
    5646:	1e7d      	subs	r5, r7, #1
    5648:	41af      	sbcs	r7, r5
    564a:	40dc      	lsrs	r4, r3
    564c:	4337      	orrs	r7, r6
    564e:	1bd7      	subs	r7, r2, r7
    5650:	42ba      	cmp	r2, r7
    5652:	4192      	sbcs	r2, r2
    5654:	1b0c      	subs	r4, r1, r4
    5656:	4252      	negs	r2, r2
    5658:	1aa4      	subs	r4, r4, r2
    565a:	0006      	movs	r6, r0
    565c:	46d8      	mov	r8, fp
    565e:	e6a3      	b.n	53a8 <__aeabi_dadd+0xb0>
    5660:	4664      	mov	r4, ip
    5662:	4667      	mov	r7, ip
    5664:	432c      	orrs	r4, r5
    5666:	d000      	beq.n	566a <__aeabi_dadd+0x372>
    5668:	e6a2      	b.n	53b0 <__aeabi_dadd+0xb8>
    566a:	2500      	movs	r5, #0
    566c:	2600      	movs	r6, #0
    566e:	2700      	movs	r7, #0
    5670:	e706      	b.n	5480 <__aeabi_dadd+0x188>
    5672:	001e      	movs	r6, r3
    5674:	e6c4      	b.n	5400 <__aeabi_dadd+0x108>
    5676:	46c0      	nop			; (mov r8, r8)
    5678:	000007ff 	.word	0x000007ff
    567c:	ff7fffff 	.word	0xff7fffff
    5680:	800fffff 	.word	0x800fffff
    5684:	2b1f      	cmp	r3, #31
    5686:	dc63      	bgt.n	5750 <__aeabi_dadd+0x458>
    5688:	2020      	movs	r0, #32
    568a:	1ac3      	subs	r3, r0, r3
    568c:	0008      	movs	r0, r1
    568e:	4098      	lsls	r0, r3
    5690:	469c      	mov	ip, r3
    5692:	4683      	mov	fp, r0
    5694:	4653      	mov	r3, sl
    5696:	0010      	movs	r0, r2
    5698:	40d8      	lsrs	r0, r3
    569a:	0003      	movs	r3, r0
    569c:	4658      	mov	r0, fp
    569e:	4318      	orrs	r0, r3
    56a0:	4663      	mov	r3, ip
    56a2:	409a      	lsls	r2, r3
    56a4:	1e53      	subs	r3, r2, #1
    56a6:	419a      	sbcs	r2, r3
    56a8:	4653      	mov	r3, sl
    56aa:	4302      	orrs	r2, r0
    56ac:	40d9      	lsrs	r1, r3
    56ae:	e703      	b.n	54b8 <__aeabi_dadd+0x1c0>
    56b0:	0026      	movs	r6, r4
    56b2:	433e      	orrs	r6, r7
    56b4:	d006      	beq.n	56c4 <__aeabi_dadd+0x3cc>
    56b6:	43eb      	mvns	r3, r5
    56b8:	4699      	mov	r9, r3
    56ba:	2b00      	cmp	r3, #0
    56bc:	d0c7      	beq.n	564e <__aeabi_dadd+0x356>
    56be:	4e94      	ldr	r6, [pc, #592]	; (5910 <__aeabi_dadd+0x618>)
    56c0:	42b0      	cmp	r0, r6
    56c2:	d1ac      	bne.n	561e <__aeabi_dadd+0x326>
    56c4:	000c      	movs	r4, r1
    56c6:	0017      	movs	r7, r2
    56c8:	0006      	movs	r6, r0
    56ca:	46d8      	mov	r8, fp
    56cc:	e698      	b.n	5400 <__aeabi_dadd+0x108>
    56ce:	4b90      	ldr	r3, [pc, #576]	; (5910 <__aeabi_dadd+0x618>)
    56d0:	459a      	cmp	sl, r3
    56d2:	d00b      	beq.n	56ec <__aeabi_dadd+0x3f4>
    56d4:	4682      	mov	sl, r0
    56d6:	e6e7      	b.n	54a8 <__aeabi_dadd+0x1b0>
    56d8:	2800      	cmp	r0, #0
    56da:	d000      	beq.n	56de <__aeabi_dadd+0x3e6>
    56dc:	e09e      	b.n	581c <__aeabi_dadd+0x524>
    56de:	0018      	movs	r0, r3
    56e0:	4310      	orrs	r0, r2
    56e2:	d100      	bne.n	56e6 <__aeabi_dadd+0x3ee>
    56e4:	e0e9      	b.n	58ba <__aeabi_dadd+0x5c2>
    56e6:	001c      	movs	r4, r3
    56e8:	0017      	movs	r7, r2
    56ea:	46d8      	mov	r8, fp
    56ec:	4e88      	ldr	r6, [pc, #544]	; (5910 <__aeabi_dadd+0x618>)
    56ee:	e687      	b.n	5400 <__aeabi_dadd+0x108>
    56f0:	2500      	movs	r5, #0
    56f2:	e772      	b.n	55da <__aeabi_dadd+0x2e2>
    56f4:	2100      	movs	r1, #0
    56f6:	e782      	b.n	55fe <__aeabi_dadd+0x306>
    56f8:	0023      	movs	r3, r4
    56fa:	433b      	orrs	r3, r7
    56fc:	2e00      	cmp	r6, #0
    56fe:	d000      	beq.n	5702 <__aeabi_dadd+0x40a>
    5700:	e0ab      	b.n	585a <__aeabi_dadd+0x562>
    5702:	2b00      	cmp	r3, #0
    5704:	d100      	bne.n	5708 <__aeabi_dadd+0x410>
    5706:	e0e7      	b.n	58d8 <__aeabi_dadd+0x5e0>
    5708:	000b      	movs	r3, r1
    570a:	4313      	orrs	r3, r2
    570c:	d100      	bne.n	5710 <__aeabi_dadd+0x418>
    570e:	e677      	b.n	5400 <__aeabi_dadd+0x108>
    5710:	18ba      	adds	r2, r7, r2
    5712:	42ba      	cmp	r2, r7
    5714:	41bf      	sbcs	r7, r7
    5716:	1864      	adds	r4, r4, r1
    5718:	427f      	negs	r7, r7
    571a:	19e4      	adds	r4, r4, r7
    571c:	0223      	lsls	r3, r4, #8
    571e:	d400      	bmi.n	5722 <__aeabi_dadd+0x42a>
    5720:	e0f2      	b.n	5908 <__aeabi_dadd+0x610>
    5722:	4b7c      	ldr	r3, [pc, #496]	; (5914 <__aeabi_dadd+0x61c>)
    5724:	0017      	movs	r7, r2
    5726:	401c      	ands	r4, r3
    5728:	0006      	movs	r6, r0
    572a:	e669      	b.n	5400 <__aeabi_dadd+0x108>
    572c:	0020      	movs	r0, r4
    572e:	4338      	orrs	r0, r7
    5730:	2e00      	cmp	r6, #0
    5732:	d1d1      	bne.n	56d8 <__aeabi_dadd+0x3e0>
    5734:	2800      	cmp	r0, #0
    5736:	d15b      	bne.n	57f0 <__aeabi_dadd+0x4f8>
    5738:	001c      	movs	r4, r3
    573a:	4314      	orrs	r4, r2
    573c:	d100      	bne.n	5740 <__aeabi_dadd+0x448>
    573e:	e0a8      	b.n	5892 <__aeabi_dadd+0x59a>
    5740:	001c      	movs	r4, r3
    5742:	0017      	movs	r7, r2
    5744:	46d8      	mov	r8, fp
    5746:	e65b      	b.n	5400 <__aeabi_dadd+0x108>
    5748:	0006      	movs	r6, r0
    574a:	2400      	movs	r4, #0
    574c:	2700      	movs	r7, #0
    574e:	e697      	b.n	5480 <__aeabi_dadd+0x188>
    5750:	4650      	mov	r0, sl
    5752:	000b      	movs	r3, r1
    5754:	3820      	subs	r0, #32
    5756:	40c3      	lsrs	r3, r0
    5758:	4699      	mov	r9, r3
    575a:	4653      	mov	r3, sl
    575c:	2b20      	cmp	r3, #32
    575e:	d100      	bne.n	5762 <__aeabi_dadd+0x46a>
    5760:	e095      	b.n	588e <__aeabi_dadd+0x596>
    5762:	2340      	movs	r3, #64	; 0x40
    5764:	4650      	mov	r0, sl
    5766:	1a1b      	subs	r3, r3, r0
    5768:	4099      	lsls	r1, r3
    576a:	430a      	orrs	r2, r1
    576c:	1e51      	subs	r1, r2, #1
    576e:	418a      	sbcs	r2, r1
    5770:	464b      	mov	r3, r9
    5772:	2100      	movs	r1, #0
    5774:	431a      	orrs	r2, r3
    5776:	e69f      	b.n	54b8 <__aeabi_dadd+0x1c0>
    5778:	2e00      	cmp	r6, #0
    577a:	d130      	bne.n	57de <__aeabi_dadd+0x4e6>
    577c:	0026      	movs	r6, r4
    577e:	433e      	orrs	r6, r7
    5780:	d067      	beq.n	5852 <__aeabi_dadd+0x55a>
    5782:	43db      	mvns	r3, r3
    5784:	469a      	mov	sl, r3
    5786:	2b00      	cmp	r3, #0
    5788:	d01c      	beq.n	57c4 <__aeabi_dadd+0x4cc>
    578a:	4e61      	ldr	r6, [pc, #388]	; (5910 <__aeabi_dadd+0x618>)
    578c:	42b0      	cmp	r0, r6
    578e:	d060      	beq.n	5852 <__aeabi_dadd+0x55a>
    5790:	4653      	mov	r3, sl
    5792:	2b38      	cmp	r3, #56	; 0x38
    5794:	dd00      	ble.n	5798 <__aeabi_dadd+0x4a0>
    5796:	e096      	b.n	58c6 <__aeabi_dadd+0x5ce>
    5798:	2b1f      	cmp	r3, #31
    579a:	dd00      	ble.n	579e <__aeabi_dadd+0x4a6>
    579c:	e09f      	b.n	58de <__aeabi_dadd+0x5e6>
    579e:	2620      	movs	r6, #32
    57a0:	1af3      	subs	r3, r6, r3
    57a2:	0026      	movs	r6, r4
    57a4:	409e      	lsls	r6, r3
    57a6:	469c      	mov	ip, r3
    57a8:	46b3      	mov	fp, r6
    57aa:	4653      	mov	r3, sl
    57ac:	003e      	movs	r6, r7
    57ae:	40de      	lsrs	r6, r3
    57b0:	0033      	movs	r3, r6
    57b2:	465e      	mov	r6, fp
    57b4:	431e      	orrs	r6, r3
    57b6:	4663      	mov	r3, ip
    57b8:	409f      	lsls	r7, r3
    57ba:	1e7b      	subs	r3, r7, #1
    57bc:	419f      	sbcs	r7, r3
    57be:	4653      	mov	r3, sl
    57c0:	40dc      	lsrs	r4, r3
    57c2:	4337      	orrs	r7, r6
    57c4:	18bf      	adds	r7, r7, r2
    57c6:	4297      	cmp	r7, r2
    57c8:	4192      	sbcs	r2, r2
    57ca:	1864      	adds	r4, r4, r1
    57cc:	4252      	negs	r2, r2
    57ce:	18a4      	adds	r4, r4, r2
    57d0:	0006      	movs	r6, r0
    57d2:	e678      	b.n	54c6 <__aeabi_dadd+0x1ce>
    57d4:	4327      	orrs	r7, r4
    57d6:	1e7c      	subs	r4, r7, #1
    57d8:	41a7      	sbcs	r7, r4
    57da:	2400      	movs	r4, #0
    57dc:	e737      	b.n	564e <__aeabi_dadd+0x356>
    57de:	4e4c      	ldr	r6, [pc, #304]	; (5910 <__aeabi_dadd+0x618>)
    57e0:	42b0      	cmp	r0, r6
    57e2:	d036      	beq.n	5852 <__aeabi_dadd+0x55a>
    57e4:	2680      	movs	r6, #128	; 0x80
    57e6:	425b      	negs	r3, r3
    57e8:	0436      	lsls	r6, r6, #16
    57ea:	469a      	mov	sl, r3
    57ec:	4334      	orrs	r4, r6
    57ee:	e7cf      	b.n	5790 <__aeabi_dadd+0x498>
    57f0:	0018      	movs	r0, r3
    57f2:	4310      	orrs	r0, r2
    57f4:	d100      	bne.n	57f8 <__aeabi_dadd+0x500>
    57f6:	e603      	b.n	5400 <__aeabi_dadd+0x108>
    57f8:	1ab8      	subs	r0, r7, r2
    57fa:	4684      	mov	ip, r0
    57fc:	4567      	cmp	r7, ip
    57fe:	41ad      	sbcs	r5, r5
    5800:	1ae0      	subs	r0, r4, r3
    5802:	426d      	negs	r5, r5
    5804:	1b40      	subs	r0, r0, r5
    5806:	0205      	lsls	r5, r0, #8
    5808:	d400      	bmi.n	580c <__aeabi_dadd+0x514>
    580a:	e62c      	b.n	5466 <__aeabi_dadd+0x16e>
    580c:	1bd7      	subs	r7, r2, r7
    580e:	42ba      	cmp	r2, r7
    5810:	4192      	sbcs	r2, r2
    5812:	1b1c      	subs	r4, r3, r4
    5814:	4252      	negs	r2, r2
    5816:	1aa4      	subs	r4, r4, r2
    5818:	46d8      	mov	r8, fp
    581a:	e5f1      	b.n	5400 <__aeabi_dadd+0x108>
    581c:	0018      	movs	r0, r3
    581e:	4310      	orrs	r0, r2
    5820:	d100      	bne.n	5824 <__aeabi_dadd+0x52c>
    5822:	e763      	b.n	56ec <__aeabi_dadd+0x3f4>
    5824:	08f8      	lsrs	r0, r7, #3
    5826:	0767      	lsls	r7, r4, #29
    5828:	4307      	orrs	r7, r0
    582a:	2080      	movs	r0, #128	; 0x80
    582c:	08e4      	lsrs	r4, r4, #3
    582e:	0300      	lsls	r0, r0, #12
    5830:	4204      	tst	r4, r0
    5832:	d008      	beq.n	5846 <__aeabi_dadd+0x54e>
    5834:	08dd      	lsrs	r5, r3, #3
    5836:	4205      	tst	r5, r0
    5838:	d105      	bne.n	5846 <__aeabi_dadd+0x54e>
    583a:	08d2      	lsrs	r2, r2, #3
    583c:	0759      	lsls	r1, r3, #29
    583e:	4311      	orrs	r1, r2
    5840:	000f      	movs	r7, r1
    5842:	002c      	movs	r4, r5
    5844:	46d8      	mov	r8, fp
    5846:	0f7b      	lsrs	r3, r7, #29
    5848:	00e4      	lsls	r4, r4, #3
    584a:	431c      	orrs	r4, r3
    584c:	00ff      	lsls	r7, r7, #3
    584e:	4e30      	ldr	r6, [pc, #192]	; (5910 <__aeabi_dadd+0x618>)
    5850:	e5d6      	b.n	5400 <__aeabi_dadd+0x108>
    5852:	000c      	movs	r4, r1
    5854:	0017      	movs	r7, r2
    5856:	0006      	movs	r6, r0
    5858:	e5d2      	b.n	5400 <__aeabi_dadd+0x108>
    585a:	2b00      	cmp	r3, #0
    585c:	d038      	beq.n	58d0 <__aeabi_dadd+0x5d8>
    585e:	000b      	movs	r3, r1
    5860:	4313      	orrs	r3, r2
    5862:	d100      	bne.n	5866 <__aeabi_dadd+0x56e>
    5864:	e742      	b.n	56ec <__aeabi_dadd+0x3f4>
    5866:	08f8      	lsrs	r0, r7, #3
    5868:	0767      	lsls	r7, r4, #29
    586a:	4307      	orrs	r7, r0
    586c:	2080      	movs	r0, #128	; 0x80
    586e:	08e4      	lsrs	r4, r4, #3
    5870:	0300      	lsls	r0, r0, #12
    5872:	4204      	tst	r4, r0
    5874:	d0e7      	beq.n	5846 <__aeabi_dadd+0x54e>
    5876:	08cb      	lsrs	r3, r1, #3
    5878:	4203      	tst	r3, r0
    587a:	d1e4      	bne.n	5846 <__aeabi_dadd+0x54e>
    587c:	08d2      	lsrs	r2, r2, #3
    587e:	0749      	lsls	r1, r1, #29
    5880:	4311      	orrs	r1, r2
    5882:	000f      	movs	r7, r1
    5884:	001c      	movs	r4, r3
    5886:	e7de      	b.n	5846 <__aeabi_dadd+0x54e>
    5888:	2700      	movs	r7, #0
    588a:	2400      	movs	r4, #0
    588c:	e5d5      	b.n	543a <__aeabi_dadd+0x142>
    588e:	2100      	movs	r1, #0
    5890:	e76b      	b.n	576a <__aeabi_dadd+0x472>
    5892:	2500      	movs	r5, #0
    5894:	2700      	movs	r7, #0
    5896:	e5f3      	b.n	5480 <__aeabi_dadd+0x188>
    5898:	464e      	mov	r6, r9
    589a:	0025      	movs	r5, r4
    589c:	3e20      	subs	r6, #32
    589e:	40f5      	lsrs	r5, r6
    58a0:	464b      	mov	r3, r9
    58a2:	002e      	movs	r6, r5
    58a4:	2b20      	cmp	r3, #32
    58a6:	d02d      	beq.n	5904 <__aeabi_dadd+0x60c>
    58a8:	2540      	movs	r5, #64	; 0x40
    58aa:	1aed      	subs	r5, r5, r3
    58ac:	40ac      	lsls	r4, r5
    58ae:	4327      	orrs	r7, r4
    58b0:	1e7c      	subs	r4, r7, #1
    58b2:	41a7      	sbcs	r7, r4
    58b4:	2400      	movs	r4, #0
    58b6:	4337      	orrs	r7, r6
    58b8:	e6c9      	b.n	564e <__aeabi_dadd+0x356>
    58ba:	2480      	movs	r4, #128	; 0x80
    58bc:	2500      	movs	r5, #0
    58be:	0324      	lsls	r4, r4, #12
    58c0:	4e13      	ldr	r6, [pc, #76]	; (5910 <__aeabi_dadd+0x618>)
    58c2:	2700      	movs	r7, #0
    58c4:	e5dc      	b.n	5480 <__aeabi_dadd+0x188>
    58c6:	4327      	orrs	r7, r4
    58c8:	1e7c      	subs	r4, r7, #1
    58ca:	41a7      	sbcs	r7, r4
    58cc:	2400      	movs	r4, #0
    58ce:	e779      	b.n	57c4 <__aeabi_dadd+0x4cc>
    58d0:	000c      	movs	r4, r1
    58d2:	0017      	movs	r7, r2
    58d4:	4e0e      	ldr	r6, [pc, #56]	; (5910 <__aeabi_dadd+0x618>)
    58d6:	e593      	b.n	5400 <__aeabi_dadd+0x108>
    58d8:	000c      	movs	r4, r1
    58da:	0017      	movs	r7, r2
    58dc:	e590      	b.n	5400 <__aeabi_dadd+0x108>
    58de:	4656      	mov	r6, sl
    58e0:	0023      	movs	r3, r4
    58e2:	3e20      	subs	r6, #32
    58e4:	40f3      	lsrs	r3, r6
    58e6:	4699      	mov	r9, r3
    58e8:	4653      	mov	r3, sl
    58ea:	2b20      	cmp	r3, #32
    58ec:	d00e      	beq.n	590c <__aeabi_dadd+0x614>
    58ee:	2340      	movs	r3, #64	; 0x40
    58f0:	4656      	mov	r6, sl
    58f2:	1b9b      	subs	r3, r3, r6
    58f4:	409c      	lsls	r4, r3
    58f6:	4327      	orrs	r7, r4
    58f8:	1e7c      	subs	r4, r7, #1
    58fa:	41a7      	sbcs	r7, r4
    58fc:	464b      	mov	r3, r9
    58fe:	2400      	movs	r4, #0
    5900:	431f      	orrs	r7, r3
    5902:	e75f      	b.n	57c4 <__aeabi_dadd+0x4cc>
    5904:	2400      	movs	r4, #0
    5906:	e7d2      	b.n	58ae <__aeabi_dadd+0x5b6>
    5908:	0017      	movs	r7, r2
    590a:	e5b2      	b.n	5472 <__aeabi_dadd+0x17a>
    590c:	2400      	movs	r4, #0
    590e:	e7f2      	b.n	58f6 <__aeabi_dadd+0x5fe>
    5910:	000007ff 	.word	0x000007ff
    5914:	ff7fffff 	.word	0xff7fffff

00005918 <__aeabi_ddiv>:
    5918:	b5f0      	push	{r4, r5, r6, r7, lr}
    591a:	4657      	mov	r7, sl
    591c:	4645      	mov	r5, r8
    591e:	46de      	mov	lr, fp
    5920:	464e      	mov	r6, r9
    5922:	b5e0      	push	{r5, r6, r7, lr}
    5924:	004c      	lsls	r4, r1, #1
    5926:	030e      	lsls	r6, r1, #12
    5928:	b087      	sub	sp, #28
    592a:	4683      	mov	fp, r0
    592c:	4692      	mov	sl, r2
    592e:	001d      	movs	r5, r3
    5930:	4680      	mov	r8, r0
    5932:	0b36      	lsrs	r6, r6, #12
    5934:	0d64      	lsrs	r4, r4, #21
    5936:	0fcf      	lsrs	r7, r1, #31
    5938:	2c00      	cmp	r4, #0
    593a:	d04f      	beq.n	59dc <__aeabi_ddiv+0xc4>
    593c:	4b6f      	ldr	r3, [pc, #444]	; (5afc <__aeabi_ddiv+0x1e4>)
    593e:	429c      	cmp	r4, r3
    5940:	d035      	beq.n	59ae <__aeabi_ddiv+0x96>
    5942:	2380      	movs	r3, #128	; 0x80
    5944:	0f42      	lsrs	r2, r0, #29
    5946:	041b      	lsls	r3, r3, #16
    5948:	00f6      	lsls	r6, r6, #3
    594a:	4313      	orrs	r3, r2
    594c:	4333      	orrs	r3, r6
    594e:	4699      	mov	r9, r3
    5950:	00c3      	lsls	r3, r0, #3
    5952:	4698      	mov	r8, r3
    5954:	4b6a      	ldr	r3, [pc, #424]	; (5b00 <__aeabi_ddiv+0x1e8>)
    5956:	2600      	movs	r6, #0
    5958:	469c      	mov	ip, r3
    595a:	2300      	movs	r3, #0
    595c:	4464      	add	r4, ip
    595e:	9303      	str	r3, [sp, #12]
    5960:	032b      	lsls	r3, r5, #12
    5962:	0b1b      	lsrs	r3, r3, #12
    5964:	469b      	mov	fp, r3
    5966:	006b      	lsls	r3, r5, #1
    5968:	0fed      	lsrs	r5, r5, #31
    596a:	4650      	mov	r0, sl
    596c:	0d5b      	lsrs	r3, r3, #21
    596e:	9501      	str	r5, [sp, #4]
    5970:	d05e      	beq.n	5a30 <__aeabi_ddiv+0x118>
    5972:	4a62      	ldr	r2, [pc, #392]	; (5afc <__aeabi_ddiv+0x1e4>)
    5974:	4293      	cmp	r3, r2
    5976:	d053      	beq.n	5a20 <__aeabi_ddiv+0x108>
    5978:	465a      	mov	r2, fp
    597a:	00d1      	lsls	r1, r2, #3
    597c:	2280      	movs	r2, #128	; 0x80
    597e:	0f40      	lsrs	r0, r0, #29
    5980:	0412      	lsls	r2, r2, #16
    5982:	4302      	orrs	r2, r0
    5984:	430a      	orrs	r2, r1
    5986:	4693      	mov	fp, r2
    5988:	4652      	mov	r2, sl
    598a:	00d1      	lsls	r1, r2, #3
    598c:	4a5c      	ldr	r2, [pc, #368]	; (5b00 <__aeabi_ddiv+0x1e8>)
    598e:	4694      	mov	ip, r2
    5990:	2200      	movs	r2, #0
    5992:	4463      	add	r3, ip
    5994:	0038      	movs	r0, r7
    5996:	4068      	eors	r0, r5
    5998:	4684      	mov	ip, r0
    599a:	9002      	str	r0, [sp, #8]
    599c:	1ae4      	subs	r4, r4, r3
    599e:	4316      	orrs	r6, r2
    59a0:	2e0f      	cmp	r6, #15
    59a2:	d900      	bls.n	59a6 <__aeabi_ddiv+0x8e>
    59a4:	e0b4      	b.n	5b10 <__aeabi_ddiv+0x1f8>
    59a6:	4b57      	ldr	r3, [pc, #348]	; (5b04 <__aeabi_ddiv+0x1ec>)
    59a8:	00b6      	lsls	r6, r6, #2
    59aa:	599b      	ldr	r3, [r3, r6]
    59ac:	469f      	mov	pc, r3
    59ae:	0003      	movs	r3, r0
    59b0:	4333      	orrs	r3, r6
    59b2:	4699      	mov	r9, r3
    59b4:	d16c      	bne.n	5a90 <__aeabi_ddiv+0x178>
    59b6:	2300      	movs	r3, #0
    59b8:	4698      	mov	r8, r3
    59ba:	3302      	adds	r3, #2
    59bc:	2608      	movs	r6, #8
    59be:	9303      	str	r3, [sp, #12]
    59c0:	e7ce      	b.n	5960 <__aeabi_ddiv+0x48>
    59c2:	46cb      	mov	fp, r9
    59c4:	4641      	mov	r1, r8
    59c6:	9a03      	ldr	r2, [sp, #12]
    59c8:	9701      	str	r7, [sp, #4]
    59ca:	2a02      	cmp	r2, #2
    59cc:	d165      	bne.n	5a9a <__aeabi_ddiv+0x182>
    59ce:	9b01      	ldr	r3, [sp, #4]
    59d0:	4c4a      	ldr	r4, [pc, #296]	; (5afc <__aeabi_ddiv+0x1e4>)
    59d2:	469c      	mov	ip, r3
    59d4:	2300      	movs	r3, #0
    59d6:	2200      	movs	r2, #0
    59d8:	4698      	mov	r8, r3
    59da:	e06b      	b.n	5ab4 <__aeabi_ddiv+0x19c>
    59dc:	0003      	movs	r3, r0
    59de:	4333      	orrs	r3, r6
    59e0:	4699      	mov	r9, r3
    59e2:	d04e      	beq.n	5a82 <__aeabi_ddiv+0x16a>
    59e4:	2e00      	cmp	r6, #0
    59e6:	d100      	bne.n	59ea <__aeabi_ddiv+0xd2>
    59e8:	e1bc      	b.n	5d64 <__aeabi_ddiv+0x44c>
    59ea:	0030      	movs	r0, r6
    59ec:	f001 fae8 	bl	6fc0 <__clzsi2>
    59f0:	0003      	movs	r3, r0
    59f2:	3b0b      	subs	r3, #11
    59f4:	2b1c      	cmp	r3, #28
    59f6:	dd00      	ble.n	59fa <__aeabi_ddiv+0xe2>
    59f8:	e1ac      	b.n	5d54 <__aeabi_ddiv+0x43c>
    59fa:	221d      	movs	r2, #29
    59fc:	1ad3      	subs	r3, r2, r3
    59fe:	465a      	mov	r2, fp
    5a00:	0001      	movs	r1, r0
    5a02:	40da      	lsrs	r2, r3
    5a04:	3908      	subs	r1, #8
    5a06:	408e      	lsls	r6, r1
    5a08:	0013      	movs	r3, r2
    5a0a:	4333      	orrs	r3, r6
    5a0c:	4699      	mov	r9, r3
    5a0e:	465b      	mov	r3, fp
    5a10:	408b      	lsls	r3, r1
    5a12:	4698      	mov	r8, r3
    5a14:	2300      	movs	r3, #0
    5a16:	4c3c      	ldr	r4, [pc, #240]	; (5b08 <__aeabi_ddiv+0x1f0>)
    5a18:	2600      	movs	r6, #0
    5a1a:	1a24      	subs	r4, r4, r0
    5a1c:	9303      	str	r3, [sp, #12]
    5a1e:	e79f      	b.n	5960 <__aeabi_ddiv+0x48>
    5a20:	4651      	mov	r1, sl
    5a22:	465a      	mov	r2, fp
    5a24:	4311      	orrs	r1, r2
    5a26:	d129      	bne.n	5a7c <__aeabi_ddiv+0x164>
    5a28:	2200      	movs	r2, #0
    5a2a:	4693      	mov	fp, r2
    5a2c:	3202      	adds	r2, #2
    5a2e:	e7b1      	b.n	5994 <__aeabi_ddiv+0x7c>
    5a30:	4659      	mov	r1, fp
    5a32:	4301      	orrs	r1, r0
    5a34:	d01e      	beq.n	5a74 <__aeabi_ddiv+0x15c>
    5a36:	465b      	mov	r3, fp
    5a38:	2b00      	cmp	r3, #0
    5a3a:	d100      	bne.n	5a3e <__aeabi_ddiv+0x126>
    5a3c:	e19e      	b.n	5d7c <__aeabi_ddiv+0x464>
    5a3e:	4658      	mov	r0, fp
    5a40:	f001 fabe 	bl	6fc0 <__clzsi2>
    5a44:	0003      	movs	r3, r0
    5a46:	3b0b      	subs	r3, #11
    5a48:	2b1c      	cmp	r3, #28
    5a4a:	dd00      	ble.n	5a4e <__aeabi_ddiv+0x136>
    5a4c:	e18f      	b.n	5d6e <__aeabi_ddiv+0x456>
    5a4e:	0002      	movs	r2, r0
    5a50:	4659      	mov	r1, fp
    5a52:	3a08      	subs	r2, #8
    5a54:	4091      	lsls	r1, r2
    5a56:	468b      	mov	fp, r1
    5a58:	211d      	movs	r1, #29
    5a5a:	1acb      	subs	r3, r1, r3
    5a5c:	4651      	mov	r1, sl
    5a5e:	40d9      	lsrs	r1, r3
    5a60:	000b      	movs	r3, r1
    5a62:	4659      	mov	r1, fp
    5a64:	430b      	orrs	r3, r1
    5a66:	4651      	mov	r1, sl
    5a68:	469b      	mov	fp, r3
    5a6a:	4091      	lsls	r1, r2
    5a6c:	4b26      	ldr	r3, [pc, #152]	; (5b08 <__aeabi_ddiv+0x1f0>)
    5a6e:	2200      	movs	r2, #0
    5a70:	1a1b      	subs	r3, r3, r0
    5a72:	e78f      	b.n	5994 <__aeabi_ddiv+0x7c>
    5a74:	2300      	movs	r3, #0
    5a76:	2201      	movs	r2, #1
    5a78:	469b      	mov	fp, r3
    5a7a:	e78b      	b.n	5994 <__aeabi_ddiv+0x7c>
    5a7c:	4651      	mov	r1, sl
    5a7e:	2203      	movs	r2, #3
    5a80:	e788      	b.n	5994 <__aeabi_ddiv+0x7c>
    5a82:	2300      	movs	r3, #0
    5a84:	4698      	mov	r8, r3
    5a86:	3301      	adds	r3, #1
    5a88:	2604      	movs	r6, #4
    5a8a:	2400      	movs	r4, #0
    5a8c:	9303      	str	r3, [sp, #12]
    5a8e:	e767      	b.n	5960 <__aeabi_ddiv+0x48>
    5a90:	2303      	movs	r3, #3
    5a92:	46b1      	mov	r9, r6
    5a94:	9303      	str	r3, [sp, #12]
    5a96:	260c      	movs	r6, #12
    5a98:	e762      	b.n	5960 <__aeabi_ddiv+0x48>
    5a9a:	2a03      	cmp	r2, #3
    5a9c:	d100      	bne.n	5aa0 <__aeabi_ddiv+0x188>
    5a9e:	e25c      	b.n	5f5a <__aeabi_ddiv+0x642>
    5aa0:	9b01      	ldr	r3, [sp, #4]
    5aa2:	2a01      	cmp	r2, #1
    5aa4:	d000      	beq.n	5aa8 <__aeabi_ddiv+0x190>
    5aa6:	e1e4      	b.n	5e72 <__aeabi_ddiv+0x55a>
    5aa8:	4013      	ands	r3, r2
    5aaa:	469c      	mov	ip, r3
    5aac:	2300      	movs	r3, #0
    5aae:	2400      	movs	r4, #0
    5ab0:	2200      	movs	r2, #0
    5ab2:	4698      	mov	r8, r3
    5ab4:	2100      	movs	r1, #0
    5ab6:	0312      	lsls	r2, r2, #12
    5ab8:	0b13      	lsrs	r3, r2, #12
    5aba:	0d0a      	lsrs	r2, r1, #20
    5abc:	0512      	lsls	r2, r2, #20
    5abe:	431a      	orrs	r2, r3
    5ac0:	0523      	lsls	r3, r4, #20
    5ac2:	4c12      	ldr	r4, [pc, #72]	; (5b0c <__aeabi_ddiv+0x1f4>)
    5ac4:	4640      	mov	r0, r8
    5ac6:	4022      	ands	r2, r4
    5ac8:	4313      	orrs	r3, r2
    5aca:	4662      	mov	r2, ip
    5acc:	005b      	lsls	r3, r3, #1
    5ace:	07d2      	lsls	r2, r2, #31
    5ad0:	085b      	lsrs	r3, r3, #1
    5ad2:	4313      	orrs	r3, r2
    5ad4:	0019      	movs	r1, r3
    5ad6:	b007      	add	sp, #28
    5ad8:	bc3c      	pop	{r2, r3, r4, r5}
    5ada:	4690      	mov	r8, r2
    5adc:	4699      	mov	r9, r3
    5ade:	46a2      	mov	sl, r4
    5ae0:	46ab      	mov	fp, r5
    5ae2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5ae4:	2300      	movs	r3, #0
    5ae6:	2280      	movs	r2, #128	; 0x80
    5ae8:	469c      	mov	ip, r3
    5aea:	0312      	lsls	r2, r2, #12
    5aec:	4698      	mov	r8, r3
    5aee:	4c03      	ldr	r4, [pc, #12]	; (5afc <__aeabi_ddiv+0x1e4>)
    5af0:	e7e0      	b.n	5ab4 <__aeabi_ddiv+0x19c>
    5af2:	2300      	movs	r3, #0
    5af4:	4c01      	ldr	r4, [pc, #4]	; (5afc <__aeabi_ddiv+0x1e4>)
    5af6:	2200      	movs	r2, #0
    5af8:	4698      	mov	r8, r3
    5afa:	e7db      	b.n	5ab4 <__aeabi_ddiv+0x19c>
    5afc:	000007ff 	.word	0x000007ff
    5b00:	fffffc01 	.word	0xfffffc01
    5b04:	00007440 	.word	0x00007440
    5b08:	fffffc0d 	.word	0xfffffc0d
    5b0c:	800fffff 	.word	0x800fffff
    5b10:	45d9      	cmp	r9, fp
    5b12:	d900      	bls.n	5b16 <__aeabi_ddiv+0x1fe>
    5b14:	e139      	b.n	5d8a <__aeabi_ddiv+0x472>
    5b16:	d100      	bne.n	5b1a <__aeabi_ddiv+0x202>
    5b18:	e134      	b.n	5d84 <__aeabi_ddiv+0x46c>
    5b1a:	2300      	movs	r3, #0
    5b1c:	4646      	mov	r6, r8
    5b1e:	464d      	mov	r5, r9
    5b20:	469a      	mov	sl, r3
    5b22:	3c01      	subs	r4, #1
    5b24:	465b      	mov	r3, fp
    5b26:	0e0a      	lsrs	r2, r1, #24
    5b28:	021b      	lsls	r3, r3, #8
    5b2a:	431a      	orrs	r2, r3
    5b2c:	020b      	lsls	r3, r1, #8
    5b2e:	0c17      	lsrs	r7, r2, #16
    5b30:	9303      	str	r3, [sp, #12]
    5b32:	0413      	lsls	r3, r2, #16
    5b34:	0c1b      	lsrs	r3, r3, #16
    5b36:	0039      	movs	r1, r7
    5b38:	0028      	movs	r0, r5
    5b3a:	4690      	mov	r8, r2
    5b3c:	9301      	str	r3, [sp, #4]
    5b3e:	f7fe fc29 	bl	4394 <__udivsi3>
    5b42:	0002      	movs	r2, r0
    5b44:	9b01      	ldr	r3, [sp, #4]
    5b46:	4683      	mov	fp, r0
    5b48:	435a      	muls	r2, r3
    5b4a:	0028      	movs	r0, r5
    5b4c:	0039      	movs	r1, r7
    5b4e:	4691      	mov	r9, r2
    5b50:	f7fe fca6 	bl	44a0 <__aeabi_uidivmod>
    5b54:	0c35      	lsrs	r5, r6, #16
    5b56:	0409      	lsls	r1, r1, #16
    5b58:	430d      	orrs	r5, r1
    5b5a:	45a9      	cmp	r9, r5
    5b5c:	d90d      	bls.n	5b7a <__aeabi_ddiv+0x262>
    5b5e:	465b      	mov	r3, fp
    5b60:	4445      	add	r5, r8
    5b62:	3b01      	subs	r3, #1
    5b64:	45a8      	cmp	r8, r5
    5b66:	d900      	bls.n	5b6a <__aeabi_ddiv+0x252>
    5b68:	e13a      	b.n	5de0 <__aeabi_ddiv+0x4c8>
    5b6a:	45a9      	cmp	r9, r5
    5b6c:	d800      	bhi.n	5b70 <__aeabi_ddiv+0x258>
    5b6e:	e137      	b.n	5de0 <__aeabi_ddiv+0x4c8>
    5b70:	2302      	movs	r3, #2
    5b72:	425b      	negs	r3, r3
    5b74:	469c      	mov	ip, r3
    5b76:	4445      	add	r5, r8
    5b78:	44e3      	add	fp, ip
    5b7a:	464b      	mov	r3, r9
    5b7c:	1aeb      	subs	r3, r5, r3
    5b7e:	0039      	movs	r1, r7
    5b80:	0018      	movs	r0, r3
    5b82:	9304      	str	r3, [sp, #16]
    5b84:	f7fe fc06 	bl	4394 <__udivsi3>
    5b88:	9b01      	ldr	r3, [sp, #4]
    5b8a:	0005      	movs	r5, r0
    5b8c:	4343      	muls	r3, r0
    5b8e:	0039      	movs	r1, r7
    5b90:	9804      	ldr	r0, [sp, #16]
    5b92:	4699      	mov	r9, r3
    5b94:	f7fe fc84 	bl	44a0 <__aeabi_uidivmod>
    5b98:	0433      	lsls	r3, r6, #16
    5b9a:	0409      	lsls	r1, r1, #16
    5b9c:	0c1b      	lsrs	r3, r3, #16
    5b9e:	430b      	orrs	r3, r1
    5ba0:	4599      	cmp	r9, r3
    5ba2:	d909      	bls.n	5bb8 <__aeabi_ddiv+0x2a0>
    5ba4:	4443      	add	r3, r8
    5ba6:	1e6a      	subs	r2, r5, #1
    5ba8:	4598      	cmp	r8, r3
    5baa:	d900      	bls.n	5bae <__aeabi_ddiv+0x296>
    5bac:	e11a      	b.n	5de4 <__aeabi_ddiv+0x4cc>
    5bae:	4599      	cmp	r9, r3
    5bb0:	d800      	bhi.n	5bb4 <__aeabi_ddiv+0x29c>
    5bb2:	e117      	b.n	5de4 <__aeabi_ddiv+0x4cc>
    5bb4:	3d02      	subs	r5, #2
    5bb6:	4443      	add	r3, r8
    5bb8:	464a      	mov	r2, r9
    5bba:	1a9b      	subs	r3, r3, r2
    5bbc:	465a      	mov	r2, fp
    5bbe:	0412      	lsls	r2, r2, #16
    5bc0:	432a      	orrs	r2, r5
    5bc2:	9903      	ldr	r1, [sp, #12]
    5bc4:	4693      	mov	fp, r2
    5bc6:	0c10      	lsrs	r0, r2, #16
    5bc8:	0c0a      	lsrs	r2, r1, #16
    5bca:	4691      	mov	r9, r2
    5bcc:	0409      	lsls	r1, r1, #16
    5bce:	465a      	mov	r2, fp
    5bd0:	0c09      	lsrs	r1, r1, #16
    5bd2:	464e      	mov	r6, r9
    5bd4:	000d      	movs	r5, r1
    5bd6:	0412      	lsls	r2, r2, #16
    5bd8:	0c12      	lsrs	r2, r2, #16
    5bda:	4345      	muls	r5, r0
    5bdc:	9105      	str	r1, [sp, #20]
    5bde:	4351      	muls	r1, r2
    5be0:	4372      	muls	r2, r6
    5be2:	4370      	muls	r0, r6
    5be4:	1952      	adds	r2, r2, r5
    5be6:	0c0e      	lsrs	r6, r1, #16
    5be8:	18b2      	adds	r2, r6, r2
    5bea:	4295      	cmp	r5, r2
    5bec:	d903      	bls.n	5bf6 <__aeabi_ddiv+0x2de>
    5bee:	2580      	movs	r5, #128	; 0x80
    5bf0:	026d      	lsls	r5, r5, #9
    5bf2:	46ac      	mov	ip, r5
    5bf4:	4460      	add	r0, ip
    5bf6:	0c15      	lsrs	r5, r2, #16
    5bf8:	0409      	lsls	r1, r1, #16
    5bfa:	0412      	lsls	r2, r2, #16
    5bfc:	0c09      	lsrs	r1, r1, #16
    5bfe:	1828      	adds	r0, r5, r0
    5c00:	1852      	adds	r2, r2, r1
    5c02:	4283      	cmp	r3, r0
    5c04:	d200      	bcs.n	5c08 <__aeabi_ddiv+0x2f0>
    5c06:	e0ce      	b.n	5da6 <__aeabi_ddiv+0x48e>
    5c08:	d100      	bne.n	5c0c <__aeabi_ddiv+0x2f4>
    5c0a:	e0c8      	b.n	5d9e <__aeabi_ddiv+0x486>
    5c0c:	1a1d      	subs	r5, r3, r0
    5c0e:	4653      	mov	r3, sl
    5c10:	1a9e      	subs	r6, r3, r2
    5c12:	45b2      	cmp	sl, r6
    5c14:	4192      	sbcs	r2, r2
    5c16:	4252      	negs	r2, r2
    5c18:	1aab      	subs	r3, r5, r2
    5c1a:	469a      	mov	sl, r3
    5c1c:	4598      	cmp	r8, r3
    5c1e:	d100      	bne.n	5c22 <__aeabi_ddiv+0x30a>
    5c20:	e117      	b.n	5e52 <__aeabi_ddiv+0x53a>
    5c22:	0039      	movs	r1, r7
    5c24:	0018      	movs	r0, r3
    5c26:	f7fe fbb5 	bl	4394 <__udivsi3>
    5c2a:	9b01      	ldr	r3, [sp, #4]
    5c2c:	0005      	movs	r5, r0
    5c2e:	4343      	muls	r3, r0
    5c30:	0039      	movs	r1, r7
    5c32:	4650      	mov	r0, sl
    5c34:	9304      	str	r3, [sp, #16]
    5c36:	f7fe fc33 	bl	44a0 <__aeabi_uidivmod>
    5c3a:	9804      	ldr	r0, [sp, #16]
    5c3c:	040b      	lsls	r3, r1, #16
    5c3e:	0c31      	lsrs	r1, r6, #16
    5c40:	4319      	orrs	r1, r3
    5c42:	4288      	cmp	r0, r1
    5c44:	d909      	bls.n	5c5a <__aeabi_ddiv+0x342>
    5c46:	4441      	add	r1, r8
    5c48:	1e6b      	subs	r3, r5, #1
    5c4a:	4588      	cmp	r8, r1
    5c4c:	d900      	bls.n	5c50 <__aeabi_ddiv+0x338>
    5c4e:	e107      	b.n	5e60 <__aeabi_ddiv+0x548>
    5c50:	4288      	cmp	r0, r1
    5c52:	d800      	bhi.n	5c56 <__aeabi_ddiv+0x33e>
    5c54:	e104      	b.n	5e60 <__aeabi_ddiv+0x548>
    5c56:	3d02      	subs	r5, #2
    5c58:	4441      	add	r1, r8
    5c5a:	9b04      	ldr	r3, [sp, #16]
    5c5c:	1acb      	subs	r3, r1, r3
    5c5e:	0018      	movs	r0, r3
    5c60:	0039      	movs	r1, r7
    5c62:	9304      	str	r3, [sp, #16]
    5c64:	f7fe fb96 	bl	4394 <__udivsi3>
    5c68:	9b01      	ldr	r3, [sp, #4]
    5c6a:	4682      	mov	sl, r0
    5c6c:	4343      	muls	r3, r0
    5c6e:	0039      	movs	r1, r7
    5c70:	9804      	ldr	r0, [sp, #16]
    5c72:	9301      	str	r3, [sp, #4]
    5c74:	f7fe fc14 	bl	44a0 <__aeabi_uidivmod>
    5c78:	9801      	ldr	r0, [sp, #4]
    5c7a:	040b      	lsls	r3, r1, #16
    5c7c:	0431      	lsls	r1, r6, #16
    5c7e:	0c09      	lsrs	r1, r1, #16
    5c80:	4319      	orrs	r1, r3
    5c82:	4288      	cmp	r0, r1
    5c84:	d90d      	bls.n	5ca2 <__aeabi_ddiv+0x38a>
    5c86:	4653      	mov	r3, sl
    5c88:	4441      	add	r1, r8
    5c8a:	3b01      	subs	r3, #1
    5c8c:	4588      	cmp	r8, r1
    5c8e:	d900      	bls.n	5c92 <__aeabi_ddiv+0x37a>
    5c90:	e0e8      	b.n	5e64 <__aeabi_ddiv+0x54c>
    5c92:	4288      	cmp	r0, r1
    5c94:	d800      	bhi.n	5c98 <__aeabi_ddiv+0x380>
    5c96:	e0e5      	b.n	5e64 <__aeabi_ddiv+0x54c>
    5c98:	2302      	movs	r3, #2
    5c9a:	425b      	negs	r3, r3
    5c9c:	469c      	mov	ip, r3
    5c9e:	4441      	add	r1, r8
    5ca0:	44e2      	add	sl, ip
    5ca2:	9b01      	ldr	r3, [sp, #4]
    5ca4:	042d      	lsls	r5, r5, #16
    5ca6:	1ace      	subs	r6, r1, r3
    5ca8:	4651      	mov	r1, sl
    5caa:	4329      	orrs	r1, r5
    5cac:	9d05      	ldr	r5, [sp, #20]
    5cae:	464f      	mov	r7, r9
    5cb0:	002a      	movs	r2, r5
    5cb2:	040b      	lsls	r3, r1, #16
    5cb4:	0c08      	lsrs	r0, r1, #16
    5cb6:	0c1b      	lsrs	r3, r3, #16
    5cb8:	435a      	muls	r2, r3
    5cba:	4345      	muls	r5, r0
    5cbc:	437b      	muls	r3, r7
    5cbe:	4378      	muls	r0, r7
    5cc0:	195b      	adds	r3, r3, r5
    5cc2:	0c17      	lsrs	r7, r2, #16
    5cc4:	18fb      	adds	r3, r7, r3
    5cc6:	429d      	cmp	r5, r3
    5cc8:	d903      	bls.n	5cd2 <__aeabi_ddiv+0x3ba>
    5cca:	2580      	movs	r5, #128	; 0x80
    5ccc:	026d      	lsls	r5, r5, #9
    5cce:	46ac      	mov	ip, r5
    5cd0:	4460      	add	r0, ip
    5cd2:	0c1d      	lsrs	r5, r3, #16
    5cd4:	0412      	lsls	r2, r2, #16
    5cd6:	041b      	lsls	r3, r3, #16
    5cd8:	0c12      	lsrs	r2, r2, #16
    5cda:	1828      	adds	r0, r5, r0
    5cdc:	189b      	adds	r3, r3, r2
    5cde:	4286      	cmp	r6, r0
    5ce0:	d200      	bcs.n	5ce4 <__aeabi_ddiv+0x3cc>
    5ce2:	e093      	b.n	5e0c <__aeabi_ddiv+0x4f4>
    5ce4:	d100      	bne.n	5ce8 <__aeabi_ddiv+0x3d0>
    5ce6:	e08e      	b.n	5e06 <__aeabi_ddiv+0x4ee>
    5ce8:	2301      	movs	r3, #1
    5cea:	4319      	orrs	r1, r3
    5cec:	4ba0      	ldr	r3, [pc, #640]	; (5f70 <__aeabi_ddiv+0x658>)
    5cee:	18e3      	adds	r3, r4, r3
    5cf0:	2b00      	cmp	r3, #0
    5cf2:	dc00      	bgt.n	5cf6 <__aeabi_ddiv+0x3de>
    5cf4:	e099      	b.n	5e2a <__aeabi_ddiv+0x512>
    5cf6:	074a      	lsls	r2, r1, #29
    5cf8:	d000      	beq.n	5cfc <__aeabi_ddiv+0x3e4>
    5cfa:	e09e      	b.n	5e3a <__aeabi_ddiv+0x522>
    5cfc:	465a      	mov	r2, fp
    5cfe:	01d2      	lsls	r2, r2, #7
    5d00:	d506      	bpl.n	5d10 <__aeabi_ddiv+0x3f8>
    5d02:	465a      	mov	r2, fp
    5d04:	4b9b      	ldr	r3, [pc, #620]	; (5f74 <__aeabi_ddiv+0x65c>)
    5d06:	401a      	ands	r2, r3
    5d08:	2380      	movs	r3, #128	; 0x80
    5d0a:	4693      	mov	fp, r2
    5d0c:	00db      	lsls	r3, r3, #3
    5d0e:	18e3      	adds	r3, r4, r3
    5d10:	4a99      	ldr	r2, [pc, #612]	; (5f78 <__aeabi_ddiv+0x660>)
    5d12:	4293      	cmp	r3, r2
    5d14:	dd68      	ble.n	5de8 <__aeabi_ddiv+0x4d0>
    5d16:	2301      	movs	r3, #1
    5d18:	9a02      	ldr	r2, [sp, #8]
    5d1a:	4c98      	ldr	r4, [pc, #608]	; (5f7c <__aeabi_ddiv+0x664>)
    5d1c:	401a      	ands	r2, r3
    5d1e:	2300      	movs	r3, #0
    5d20:	4694      	mov	ip, r2
    5d22:	4698      	mov	r8, r3
    5d24:	2200      	movs	r2, #0
    5d26:	e6c5      	b.n	5ab4 <__aeabi_ddiv+0x19c>
    5d28:	2280      	movs	r2, #128	; 0x80
    5d2a:	464b      	mov	r3, r9
    5d2c:	0312      	lsls	r2, r2, #12
    5d2e:	4213      	tst	r3, r2
    5d30:	d00a      	beq.n	5d48 <__aeabi_ddiv+0x430>
    5d32:	465b      	mov	r3, fp
    5d34:	4213      	tst	r3, r2
    5d36:	d106      	bne.n	5d46 <__aeabi_ddiv+0x42e>
    5d38:	431a      	orrs	r2, r3
    5d3a:	0312      	lsls	r2, r2, #12
    5d3c:	0b12      	lsrs	r2, r2, #12
    5d3e:	46ac      	mov	ip, r5
    5d40:	4688      	mov	r8, r1
    5d42:	4c8e      	ldr	r4, [pc, #568]	; (5f7c <__aeabi_ddiv+0x664>)
    5d44:	e6b6      	b.n	5ab4 <__aeabi_ddiv+0x19c>
    5d46:	464b      	mov	r3, r9
    5d48:	431a      	orrs	r2, r3
    5d4a:	0312      	lsls	r2, r2, #12
    5d4c:	0b12      	lsrs	r2, r2, #12
    5d4e:	46bc      	mov	ip, r7
    5d50:	4c8a      	ldr	r4, [pc, #552]	; (5f7c <__aeabi_ddiv+0x664>)
    5d52:	e6af      	b.n	5ab4 <__aeabi_ddiv+0x19c>
    5d54:	0003      	movs	r3, r0
    5d56:	465a      	mov	r2, fp
    5d58:	3b28      	subs	r3, #40	; 0x28
    5d5a:	409a      	lsls	r2, r3
    5d5c:	2300      	movs	r3, #0
    5d5e:	4691      	mov	r9, r2
    5d60:	4698      	mov	r8, r3
    5d62:	e657      	b.n	5a14 <__aeabi_ddiv+0xfc>
    5d64:	4658      	mov	r0, fp
    5d66:	f001 f92b 	bl	6fc0 <__clzsi2>
    5d6a:	3020      	adds	r0, #32
    5d6c:	e640      	b.n	59f0 <__aeabi_ddiv+0xd8>
    5d6e:	0003      	movs	r3, r0
    5d70:	4652      	mov	r2, sl
    5d72:	3b28      	subs	r3, #40	; 0x28
    5d74:	409a      	lsls	r2, r3
    5d76:	2100      	movs	r1, #0
    5d78:	4693      	mov	fp, r2
    5d7a:	e677      	b.n	5a6c <__aeabi_ddiv+0x154>
    5d7c:	f001 f920 	bl	6fc0 <__clzsi2>
    5d80:	3020      	adds	r0, #32
    5d82:	e65f      	b.n	5a44 <__aeabi_ddiv+0x12c>
    5d84:	4588      	cmp	r8, r1
    5d86:	d200      	bcs.n	5d8a <__aeabi_ddiv+0x472>
    5d88:	e6c7      	b.n	5b1a <__aeabi_ddiv+0x202>
    5d8a:	464b      	mov	r3, r9
    5d8c:	07de      	lsls	r6, r3, #31
    5d8e:	085d      	lsrs	r5, r3, #1
    5d90:	4643      	mov	r3, r8
    5d92:	085b      	lsrs	r3, r3, #1
    5d94:	431e      	orrs	r6, r3
    5d96:	4643      	mov	r3, r8
    5d98:	07db      	lsls	r3, r3, #31
    5d9a:	469a      	mov	sl, r3
    5d9c:	e6c2      	b.n	5b24 <__aeabi_ddiv+0x20c>
    5d9e:	2500      	movs	r5, #0
    5da0:	4592      	cmp	sl, r2
    5da2:	d300      	bcc.n	5da6 <__aeabi_ddiv+0x48e>
    5da4:	e733      	b.n	5c0e <__aeabi_ddiv+0x2f6>
    5da6:	9e03      	ldr	r6, [sp, #12]
    5da8:	4659      	mov	r1, fp
    5daa:	46b4      	mov	ip, r6
    5dac:	44e2      	add	sl, ip
    5dae:	45b2      	cmp	sl, r6
    5db0:	41ad      	sbcs	r5, r5
    5db2:	426d      	negs	r5, r5
    5db4:	4445      	add	r5, r8
    5db6:	18eb      	adds	r3, r5, r3
    5db8:	3901      	subs	r1, #1
    5dba:	4598      	cmp	r8, r3
    5dbc:	d207      	bcs.n	5dce <__aeabi_ddiv+0x4b6>
    5dbe:	4298      	cmp	r0, r3
    5dc0:	d900      	bls.n	5dc4 <__aeabi_ddiv+0x4ac>
    5dc2:	e07f      	b.n	5ec4 <__aeabi_ddiv+0x5ac>
    5dc4:	d100      	bne.n	5dc8 <__aeabi_ddiv+0x4b0>
    5dc6:	e0bc      	b.n	5f42 <__aeabi_ddiv+0x62a>
    5dc8:	1a1d      	subs	r5, r3, r0
    5dca:	468b      	mov	fp, r1
    5dcc:	e71f      	b.n	5c0e <__aeabi_ddiv+0x2f6>
    5dce:	4598      	cmp	r8, r3
    5dd0:	d1fa      	bne.n	5dc8 <__aeabi_ddiv+0x4b0>
    5dd2:	9d03      	ldr	r5, [sp, #12]
    5dd4:	4555      	cmp	r5, sl
    5dd6:	d9f2      	bls.n	5dbe <__aeabi_ddiv+0x4a6>
    5dd8:	4643      	mov	r3, r8
    5dda:	468b      	mov	fp, r1
    5ddc:	1a1d      	subs	r5, r3, r0
    5dde:	e716      	b.n	5c0e <__aeabi_ddiv+0x2f6>
    5de0:	469b      	mov	fp, r3
    5de2:	e6ca      	b.n	5b7a <__aeabi_ddiv+0x262>
    5de4:	0015      	movs	r5, r2
    5de6:	e6e7      	b.n	5bb8 <__aeabi_ddiv+0x2a0>
    5de8:	465a      	mov	r2, fp
    5dea:	08c9      	lsrs	r1, r1, #3
    5dec:	0752      	lsls	r2, r2, #29
    5dee:	430a      	orrs	r2, r1
    5df0:	055b      	lsls	r3, r3, #21
    5df2:	4690      	mov	r8, r2
    5df4:	0d5c      	lsrs	r4, r3, #21
    5df6:	465a      	mov	r2, fp
    5df8:	2301      	movs	r3, #1
    5dfa:	9902      	ldr	r1, [sp, #8]
    5dfc:	0252      	lsls	r2, r2, #9
    5dfe:	4019      	ands	r1, r3
    5e00:	0b12      	lsrs	r2, r2, #12
    5e02:	468c      	mov	ip, r1
    5e04:	e656      	b.n	5ab4 <__aeabi_ddiv+0x19c>
    5e06:	2b00      	cmp	r3, #0
    5e08:	d100      	bne.n	5e0c <__aeabi_ddiv+0x4f4>
    5e0a:	e76f      	b.n	5cec <__aeabi_ddiv+0x3d4>
    5e0c:	4446      	add	r6, r8
    5e0e:	1e4a      	subs	r2, r1, #1
    5e10:	45b0      	cmp	r8, r6
    5e12:	d929      	bls.n	5e68 <__aeabi_ddiv+0x550>
    5e14:	0011      	movs	r1, r2
    5e16:	4286      	cmp	r6, r0
    5e18:	d000      	beq.n	5e1c <__aeabi_ddiv+0x504>
    5e1a:	e765      	b.n	5ce8 <__aeabi_ddiv+0x3d0>
    5e1c:	9a03      	ldr	r2, [sp, #12]
    5e1e:	4293      	cmp	r3, r2
    5e20:	d000      	beq.n	5e24 <__aeabi_ddiv+0x50c>
    5e22:	e761      	b.n	5ce8 <__aeabi_ddiv+0x3d0>
    5e24:	e762      	b.n	5cec <__aeabi_ddiv+0x3d4>
    5e26:	2101      	movs	r1, #1
    5e28:	4249      	negs	r1, r1
    5e2a:	2001      	movs	r0, #1
    5e2c:	1ac2      	subs	r2, r0, r3
    5e2e:	2a38      	cmp	r2, #56	; 0x38
    5e30:	dd21      	ble.n	5e76 <__aeabi_ddiv+0x55e>
    5e32:	9b02      	ldr	r3, [sp, #8]
    5e34:	4003      	ands	r3, r0
    5e36:	469c      	mov	ip, r3
    5e38:	e638      	b.n	5aac <__aeabi_ddiv+0x194>
    5e3a:	220f      	movs	r2, #15
    5e3c:	400a      	ands	r2, r1
    5e3e:	2a04      	cmp	r2, #4
    5e40:	d100      	bne.n	5e44 <__aeabi_ddiv+0x52c>
    5e42:	e75b      	b.n	5cfc <__aeabi_ddiv+0x3e4>
    5e44:	000a      	movs	r2, r1
    5e46:	1d11      	adds	r1, r2, #4
    5e48:	4291      	cmp	r1, r2
    5e4a:	4192      	sbcs	r2, r2
    5e4c:	4252      	negs	r2, r2
    5e4e:	4493      	add	fp, r2
    5e50:	e754      	b.n	5cfc <__aeabi_ddiv+0x3e4>
    5e52:	4b47      	ldr	r3, [pc, #284]	; (5f70 <__aeabi_ddiv+0x658>)
    5e54:	18e3      	adds	r3, r4, r3
    5e56:	2b00      	cmp	r3, #0
    5e58:	dde5      	ble.n	5e26 <__aeabi_ddiv+0x50e>
    5e5a:	2201      	movs	r2, #1
    5e5c:	4252      	negs	r2, r2
    5e5e:	e7f2      	b.n	5e46 <__aeabi_ddiv+0x52e>
    5e60:	001d      	movs	r5, r3
    5e62:	e6fa      	b.n	5c5a <__aeabi_ddiv+0x342>
    5e64:	469a      	mov	sl, r3
    5e66:	e71c      	b.n	5ca2 <__aeabi_ddiv+0x38a>
    5e68:	42b0      	cmp	r0, r6
    5e6a:	d839      	bhi.n	5ee0 <__aeabi_ddiv+0x5c8>
    5e6c:	d06e      	beq.n	5f4c <__aeabi_ddiv+0x634>
    5e6e:	0011      	movs	r1, r2
    5e70:	e73a      	b.n	5ce8 <__aeabi_ddiv+0x3d0>
    5e72:	9302      	str	r3, [sp, #8]
    5e74:	e73a      	b.n	5cec <__aeabi_ddiv+0x3d4>
    5e76:	2a1f      	cmp	r2, #31
    5e78:	dc3c      	bgt.n	5ef4 <__aeabi_ddiv+0x5dc>
    5e7a:	2320      	movs	r3, #32
    5e7c:	1a9b      	subs	r3, r3, r2
    5e7e:	000c      	movs	r4, r1
    5e80:	4658      	mov	r0, fp
    5e82:	4099      	lsls	r1, r3
    5e84:	4098      	lsls	r0, r3
    5e86:	1e4b      	subs	r3, r1, #1
    5e88:	4199      	sbcs	r1, r3
    5e8a:	465b      	mov	r3, fp
    5e8c:	40d4      	lsrs	r4, r2
    5e8e:	40d3      	lsrs	r3, r2
    5e90:	4320      	orrs	r0, r4
    5e92:	4308      	orrs	r0, r1
    5e94:	001a      	movs	r2, r3
    5e96:	0743      	lsls	r3, r0, #29
    5e98:	d009      	beq.n	5eae <__aeabi_ddiv+0x596>
    5e9a:	230f      	movs	r3, #15
    5e9c:	4003      	ands	r3, r0
    5e9e:	2b04      	cmp	r3, #4
    5ea0:	d005      	beq.n	5eae <__aeabi_ddiv+0x596>
    5ea2:	0001      	movs	r1, r0
    5ea4:	1d08      	adds	r0, r1, #4
    5ea6:	4288      	cmp	r0, r1
    5ea8:	419b      	sbcs	r3, r3
    5eaa:	425b      	negs	r3, r3
    5eac:	18d2      	adds	r2, r2, r3
    5eae:	0213      	lsls	r3, r2, #8
    5eb0:	d53a      	bpl.n	5f28 <__aeabi_ddiv+0x610>
    5eb2:	2301      	movs	r3, #1
    5eb4:	9a02      	ldr	r2, [sp, #8]
    5eb6:	2401      	movs	r4, #1
    5eb8:	401a      	ands	r2, r3
    5eba:	2300      	movs	r3, #0
    5ebc:	4694      	mov	ip, r2
    5ebe:	4698      	mov	r8, r3
    5ec0:	2200      	movs	r2, #0
    5ec2:	e5f7      	b.n	5ab4 <__aeabi_ddiv+0x19c>
    5ec4:	2102      	movs	r1, #2
    5ec6:	4249      	negs	r1, r1
    5ec8:	468c      	mov	ip, r1
    5eca:	9d03      	ldr	r5, [sp, #12]
    5ecc:	44e3      	add	fp, ip
    5ece:	46ac      	mov	ip, r5
    5ed0:	44e2      	add	sl, ip
    5ed2:	45aa      	cmp	sl, r5
    5ed4:	41ad      	sbcs	r5, r5
    5ed6:	426d      	negs	r5, r5
    5ed8:	4445      	add	r5, r8
    5eda:	18ed      	adds	r5, r5, r3
    5edc:	1a2d      	subs	r5, r5, r0
    5ede:	e696      	b.n	5c0e <__aeabi_ddiv+0x2f6>
    5ee0:	1e8a      	subs	r2, r1, #2
    5ee2:	9903      	ldr	r1, [sp, #12]
    5ee4:	004d      	lsls	r5, r1, #1
    5ee6:	428d      	cmp	r5, r1
    5ee8:	4189      	sbcs	r1, r1
    5eea:	4249      	negs	r1, r1
    5eec:	4441      	add	r1, r8
    5eee:	1876      	adds	r6, r6, r1
    5ef0:	9503      	str	r5, [sp, #12]
    5ef2:	e78f      	b.n	5e14 <__aeabi_ddiv+0x4fc>
    5ef4:	201f      	movs	r0, #31
    5ef6:	4240      	negs	r0, r0
    5ef8:	1ac3      	subs	r3, r0, r3
    5efa:	4658      	mov	r0, fp
    5efc:	40d8      	lsrs	r0, r3
    5efe:	0003      	movs	r3, r0
    5f00:	2a20      	cmp	r2, #32
    5f02:	d028      	beq.n	5f56 <__aeabi_ddiv+0x63e>
    5f04:	2040      	movs	r0, #64	; 0x40
    5f06:	465d      	mov	r5, fp
    5f08:	1a82      	subs	r2, r0, r2
    5f0a:	4095      	lsls	r5, r2
    5f0c:	4329      	orrs	r1, r5
    5f0e:	1e4a      	subs	r2, r1, #1
    5f10:	4191      	sbcs	r1, r2
    5f12:	4319      	orrs	r1, r3
    5f14:	2307      	movs	r3, #7
    5f16:	2200      	movs	r2, #0
    5f18:	400b      	ands	r3, r1
    5f1a:	d009      	beq.n	5f30 <__aeabi_ddiv+0x618>
    5f1c:	230f      	movs	r3, #15
    5f1e:	2200      	movs	r2, #0
    5f20:	400b      	ands	r3, r1
    5f22:	0008      	movs	r0, r1
    5f24:	2b04      	cmp	r3, #4
    5f26:	d1bd      	bne.n	5ea4 <__aeabi_ddiv+0x58c>
    5f28:	0001      	movs	r1, r0
    5f2a:	0753      	lsls	r3, r2, #29
    5f2c:	0252      	lsls	r2, r2, #9
    5f2e:	0b12      	lsrs	r2, r2, #12
    5f30:	08c9      	lsrs	r1, r1, #3
    5f32:	4319      	orrs	r1, r3
    5f34:	2301      	movs	r3, #1
    5f36:	4688      	mov	r8, r1
    5f38:	9902      	ldr	r1, [sp, #8]
    5f3a:	2400      	movs	r4, #0
    5f3c:	4019      	ands	r1, r3
    5f3e:	468c      	mov	ip, r1
    5f40:	e5b8      	b.n	5ab4 <__aeabi_ddiv+0x19c>
    5f42:	4552      	cmp	r2, sl
    5f44:	d8be      	bhi.n	5ec4 <__aeabi_ddiv+0x5ac>
    5f46:	468b      	mov	fp, r1
    5f48:	2500      	movs	r5, #0
    5f4a:	e660      	b.n	5c0e <__aeabi_ddiv+0x2f6>
    5f4c:	9d03      	ldr	r5, [sp, #12]
    5f4e:	429d      	cmp	r5, r3
    5f50:	d3c6      	bcc.n	5ee0 <__aeabi_ddiv+0x5c8>
    5f52:	0011      	movs	r1, r2
    5f54:	e762      	b.n	5e1c <__aeabi_ddiv+0x504>
    5f56:	2500      	movs	r5, #0
    5f58:	e7d8      	b.n	5f0c <__aeabi_ddiv+0x5f4>
    5f5a:	2280      	movs	r2, #128	; 0x80
    5f5c:	465b      	mov	r3, fp
    5f5e:	0312      	lsls	r2, r2, #12
    5f60:	431a      	orrs	r2, r3
    5f62:	9b01      	ldr	r3, [sp, #4]
    5f64:	0312      	lsls	r2, r2, #12
    5f66:	0b12      	lsrs	r2, r2, #12
    5f68:	469c      	mov	ip, r3
    5f6a:	4688      	mov	r8, r1
    5f6c:	4c03      	ldr	r4, [pc, #12]	; (5f7c <__aeabi_ddiv+0x664>)
    5f6e:	e5a1      	b.n	5ab4 <__aeabi_ddiv+0x19c>
    5f70:	000003ff 	.word	0x000003ff
    5f74:	feffffff 	.word	0xfeffffff
    5f78:	000007fe 	.word	0x000007fe
    5f7c:	000007ff 	.word	0x000007ff

00005f80 <__eqdf2>:
    5f80:	b5f0      	push	{r4, r5, r6, r7, lr}
    5f82:	464f      	mov	r7, r9
    5f84:	4646      	mov	r6, r8
    5f86:	46d6      	mov	lr, sl
    5f88:	005c      	lsls	r4, r3, #1
    5f8a:	b5c0      	push	{r6, r7, lr}
    5f8c:	031f      	lsls	r7, r3, #12
    5f8e:	0fdb      	lsrs	r3, r3, #31
    5f90:	469a      	mov	sl, r3
    5f92:	4b17      	ldr	r3, [pc, #92]	; (5ff0 <__eqdf2+0x70>)
    5f94:	030e      	lsls	r6, r1, #12
    5f96:	004d      	lsls	r5, r1, #1
    5f98:	4684      	mov	ip, r0
    5f9a:	4680      	mov	r8, r0
    5f9c:	0b36      	lsrs	r6, r6, #12
    5f9e:	0d6d      	lsrs	r5, r5, #21
    5fa0:	0fc9      	lsrs	r1, r1, #31
    5fa2:	4691      	mov	r9, r2
    5fa4:	0b3f      	lsrs	r7, r7, #12
    5fa6:	0d64      	lsrs	r4, r4, #21
    5fa8:	2001      	movs	r0, #1
    5faa:	429d      	cmp	r5, r3
    5fac:	d008      	beq.n	5fc0 <__eqdf2+0x40>
    5fae:	429c      	cmp	r4, r3
    5fb0:	d001      	beq.n	5fb6 <__eqdf2+0x36>
    5fb2:	42a5      	cmp	r5, r4
    5fb4:	d00b      	beq.n	5fce <__eqdf2+0x4e>
    5fb6:	bc1c      	pop	{r2, r3, r4}
    5fb8:	4690      	mov	r8, r2
    5fba:	4699      	mov	r9, r3
    5fbc:	46a2      	mov	sl, r4
    5fbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5fc0:	4663      	mov	r3, ip
    5fc2:	4333      	orrs	r3, r6
    5fc4:	d1f7      	bne.n	5fb6 <__eqdf2+0x36>
    5fc6:	42ac      	cmp	r4, r5
    5fc8:	d1f5      	bne.n	5fb6 <__eqdf2+0x36>
    5fca:	433a      	orrs	r2, r7
    5fcc:	d1f3      	bne.n	5fb6 <__eqdf2+0x36>
    5fce:	2001      	movs	r0, #1
    5fd0:	42be      	cmp	r6, r7
    5fd2:	d1f0      	bne.n	5fb6 <__eqdf2+0x36>
    5fd4:	45c8      	cmp	r8, r9
    5fd6:	d1ee      	bne.n	5fb6 <__eqdf2+0x36>
    5fd8:	4551      	cmp	r1, sl
    5fda:	d007      	beq.n	5fec <__eqdf2+0x6c>
    5fdc:	2d00      	cmp	r5, #0
    5fde:	d1ea      	bne.n	5fb6 <__eqdf2+0x36>
    5fe0:	4663      	mov	r3, ip
    5fe2:	431e      	orrs	r6, r3
    5fe4:	0030      	movs	r0, r6
    5fe6:	1e46      	subs	r6, r0, #1
    5fe8:	41b0      	sbcs	r0, r6
    5fea:	e7e4      	b.n	5fb6 <__eqdf2+0x36>
    5fec:	2000      	movs	r0, #0
    5fee:	e7e2      	b.n	5fb6 <__eqdf2+0x36>
    5ff0:	000007ff 	.word	0x000007ff

00005ff4 <__gedf2>:
    5ff4:	b5f0      	push	{r4, r5, r6, r7, lr}
    5ff6:	4645      	mov	r5, r8
    5ff8:	46de      	mov	lr, fp
    5ffa:	4657      	mov	r7, sl
    5ffc:	464e      	mov	r6, r9
    5ffe:	b5e0      	push	{r5, r6, r7, lr}
    6000:	031f      	lsls	r7, r3, #12
    6002:	0b3d      	lsrs	r5, r7, #12
    6004:	4f2c      	ldr	r7, [pc, #176]	; (60b8 <__gedf2+0xc4>)
    6006:	030e      	lsls	r6, r1, #12
    6008:	004c      	lsls	r4, r1, #1
    600a:	46ab      	mov	fp, r5
    600c:	005d      	lsls	r5, r3, #1
    600e:	4684      	mov	ip, r0
    6010:	0b36      	lsrs	r6, r6, #12
    6012:	0d64      	lsrs	r4, r4, #21
    6014:	0fc9      	lsrs	r1, r1, #31
    6016:	4690      	mov	r8, r2
    6018:	0d6d      	lsrs	r5, r5, #21
    601a:	0fdb      	lsrs	r3, r3, #31
    601c:	42bc      	cmp	r4, r7
    601e:	d02a      	beq.n	6076 <__gedf2+0x82>
    6020:	4f25      	ldr	r7, [pc, #148]	; (60b8 <__gedf2+0xc4>)
    6022:	42bd      	cmp	r5, r7
    6024:	d02d      	beq.n	6082 <__gedf2+0x8e>
    6026:	2c00      	cmp	r4, #0
    6028:	d10f      	bne.n	604a <__gedf2+0x56>
    602a:	4330      	orrs	r0, r6
    602c:	0007      	movs	r7, r0
    602e:	4681      	mov	r9, r0
    6030:	4278      	negs	r0, r7
    6032:	4178      	adcs	r0, r7
    6034:	b2c0      	uxtb	r0, r0
    6036:	2d00      	cmp	r5, #0
    6038:	d117      	bne.n	606a <__gedf2+0x76>
    603a:	465f      	mov	r7, fp
    603c:	433a      	orrs	r2, r7
    603e:	d114      	bne.n	606a <__gedf2+0x76>
    6040:	464b      	mov	r3, r9
    6042:	2000      	movs	r0, #0
    6044:	2b00      	cmp	r3, #0
    6046:	d00a      	beq.n	605e <__gedf2+0x6a>
    6048:	e006      	b.n	6058 <__gedf2+0x64>
    604a:	2d00      	cmp	r5, #0
    604c:	d102      	bne.n	6054 <__gedf2+0x60>
    604e:	4658      	mov	r0, fp
    6050:	4302      	orrs	r2, r0
    6052:	d001      	beq.n	6058 <__gedf2+0x64>
    6054:	4299      	cmp	r1, r3
    6056:	d018      	beq.n	608a <__gedf2+0x96>
    6058:	4248      	negs	r0, r1
    605a:	2101      	movs	r1, #1
    605c:	4308      	orrs	r0, r1
    605e:	bc3c      	pop	{r2, r3, r4, r5}
    6060:	4690      	mov	r8, r2
    6062:	4699      	mov	r9, r3
    6064:	46a2      	mov	sl, r4
    6066:	46ab      	mov	fp, r5
    6068:	bdf0      	pop	{r4, r5, r6, r7, pc}
    606a:	2800      	cmp	r0, #0
    606c:	d0f2      	beq.n	6054 <__gedf2+0x60>
    606e:	2001      	movs	r0, #1
    6070:	3b01      	subs	r3, #1
    6072:	4318      	orrs	r0, r3
    6074:	e7f3      	b.n	605e <__gedf2+0x6a>
    6076:	0037      	movs	r7, r6
    6078:	4307      	orrs	r7, r0
    607a:	d0d1      	beq.n	6020 <__gedf2+0x2c>
    607c:	2002      	movs	r0, #2
    607e:	4240      	negs	r0, r0
    6080:	e7ed      	b.n	605e <__gedf2+0x6a>
    6082:	465f      	mov	r7, fp
    6084:	4317      	orrs	r7, r2
    6086:	d0ce      	beq.n	6026 <__gedf2+0x32>
    6088:	e7f8      	b.n	607c <__gedf2+0x88>
    608a:	42ac      	cmp	r4, r5
    608c:	dce4      	bgt.n	6058 <__gedf2+0x64>
    608e:	da03      	bge.n	6098 <__gedf2+0xa4>
    6090:	1e48      	subs	r0, r1, #1
    6092:	2101      	movs	r1, #1
    6094:	4308      	orrs	r0, r1
    6096:	e7e2      	b.n	605e <__gedf2+0x6a>
    6098:	455e      	cmp	r6, fp
    609a:	d8dd      	bhi.n	6058 <__gedf2+0x64>
    609c:	d006      	beq.n	60ac <__gedf2+0xb8>
    609e:	2000      	movs	r0, #0
    60a0:	455e      	cmp	r6, fp
    60a2:	d2dc      	bcs.n	605e <__gedf2+0x6a>
    60a4:	2301      	movs	r3, #1
    60a6:	1e48      	subs	r0, r1, #1
    60a8:	4318      	orrs	r0, r3
    60aa:	e7d8      	b.n	605e <__gedf2+0x6a>
    60ac:	45c4      	cmp	ip, r8
    60ae:	d8d3      	bhi.n	6058 <__gedf2+0x64>
    60b0:	2000      	movs	r0, #0
    60b2:	45c4      	cmp	ip, r8
    60b4:	d3f6      	bcc.n	60a4 <__gedf2+0xb0>
    60b6:	e7d2      	b.n	605e <__gedf2+0x6a>
    60b8:	000007ff 	.word	0x000007ff

000060bc <__ledf2>:
    60bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    60be:	464e      	mov	r6, r9
    60c0:	4645      	mov	r5, r8
    60c2:	46de      	mov	lr, fp
    60c4:	4657      	mov	r7, sl
    60c6:	005c      	lsls	r4, r3, #1
    60c8:	b5e0      	push	{r5, r6, r7, lr}
    60ca:	031f      	lsls	r7, r3, #12
    60cc:	0fdb      	lsrs	r3, r3, #31
    60ce:	4699      	mov	r9, r3
    60d0:	4b2a      	ldr	r3, [pc, #168]	; (617c <__ledf2+0xc0>)
    60d2:	030e      	lsls	r6, r1, #12
    60d4:	004d      	lsls	r5, r1, #1
    60d6:	0fc9      	lsrs	r1, r1, #31
    60d8:	4684      	mov	ip, r0
    60da:	0b36      	lsrs	r6, r6, #12
    60dc:	0d6d      	lsrs	r5, r5, #21
    60de:	468b      	mov	fp, r1
    60e0:	4690      	mov	r8, r2
    60e2:	0b3f      	lsrs	r7, r7, #12
    60e4:	0d64      	lsrs	r4, r4, #21
    60e6:	429d      	cmp	r5, r3
    60e8:	d020      	beq.n	612c <__ledf2+0x70>
    60ea:	4b24      	ldr	r3, [pc, #144]	; (617c <__ledf2+0xc0>)
    60ec:	429c      	cmp	r4, r3
    60ee:	d022      	beq.n	6136 <__ledf2+0x7a>
    60f0:	2d00      	cmp	r5, #0
    60f2:	d112      	bne.n	611a <__ledf2+0x5e>
    60f4:	4330      	orrs	r0, r6
    60f6:	4243      	negs	r3, r0
    60f8:	4143      	adcs	r3, r0
    60fa:	b2db      	uxtb	r3, r3
    60fc:	2c00      	cmp	r4, #0
    60fe:	d01f      	beq.n	6140 <__ledf2+0x84>
    6100:	2b00      	cmp	r3, #0
    6102:	d00c      	beq.n	611e <__ledf2+0x62>
    6104:	464b      	mov	r3, r9
    6106:	2001      	movs	r0, #1
    6108:	3b01      	subs	r3, #1
    610a:	4303      	orrs	r3, r0
    610c:	0018      	movs	r0, r3
    610e:	bc3c      	pop	{r2, r3, r4, r5}
    6110:	4690      	mov	r8, r2
    6112:	4699      	mov	r9, r3
    6114:	46a2      	mov	sl, r4
    6116:	46ab      	mov	fp, r5
    6118:	bdf0      	pop	{r4, r5, r6, r7, pc}
    611a:	2c00      	cmp	r4, #0
    611c:	d016      	beq.n	614c <__ledf2+0x90>
    611e:	45cb      	cmp	fp, r9
    6120:	d017      	beq.n	6152 <__ledf2+0x96>
    6122:	465b      	mov	r3, fp
    6124:	4259      	negs	r1, r3
    6126:	2301      	movs	r3, #1
    6128:	430b      	orrs	r3, r1
    612a:	e7ef      	b.n	610c <__ledf2+0x50>
    612c:	0031      	movs	r1, r6
    612e:	2302      	movs	r3, #2
    6130:	4301      	orrs	r1, r0
    6132:	d1eb      	bne.n	610c <__ledf2+0x50>
    6134:	e7d9      	b.n	60ea <__ledf2+0x2e>
    6136:	0039      	movs	r1, r7
    6138:	2302      	movs	r3, #2
    613a:	4311      	orrs	r1, r2
    613c:	d1e6      	bne.n	610c <__ledf2+0x50>
    613e:	e7d7      	b.n	60f0 <__ledf2+0x34>
    6140:	433a      	orrs	r2, r7
    6142:	d1dd      	bne.n	6100 <__ledf2+0x44>
    6144:	2300      	movs	r3, #0
    6146:	2800      	cmp	r0, #0
    6148:	d0e0      	beq.n	610c <__ledf2+0x50>
    614a:	e7ea      	b.n	6122 <__ledf2+0x66>
    614c:	433a      	orrs	r2, r7
    614e:	d1e6      	bne.n	611e <__ledf2+0x62>
    6150:	e7e7      	b.n	6122 <__ledf2+0x66>
    6152:	42a5      	cmp	r5, r4
    6154:	dce5      	bgt.n	6122 <__ledf2+0x66>
    6156:	db05      	blt.n	6164 <__ledf2+0xa8>
    6158:	42be      	cmp	r6, r7
    615a:	d8e2      	bhi.n	6122 <__ledf2+0x66>
    615c:	d007      	beq.n	616e <__ledf2+0xb2>
    615e:	2300      	movs	r3, #0
    6160:	42be      	cmp	r6, r7
    6162:	d2d3      	bcs.n	610c <__ledf2+0x50>
    6164:	4659      	mov	r1, fp
    6166:	2301      	movs	r3, #1
    6168:	3901      	subs	r1, #1
    616a:	430b      	orrs	r3, r1
    616c:	e7ce      	b.n	610c <__ledf2+0x50>
    616e:	45c4      	cmp	ip, r8
    6170:	d8d7      	bhi.n	6122 <__ledf2+0x66>
    6172:	2300      	movs	r3, #0
    6174:	45c4      	cmp	ip, r8
    6176:	d3f5      	bcc.n	6164 <__ledf2+0xa8>
    6178:	e7c8      	b.n	610c <__ledf2+0x50>
    617a:	46c0      	nop			; (mov r8, r8)
    617c:	000007ff 	.word	0x000007ff

00006180 <__aeabi_dmul>:
    6180:	b5f0      	push	{r4, r5, r6, r7, lr}
    6182:	4657      	mov	r7, sl
    6184:	4645      	mov	r5, r8
    6186:	46de      	mov	lr, fp
    6188:	464e      	mov	r6, r9
    618a:	b5e0      	push	{r5, r6, r7, lr}
    618c:	030c      	lsls	r4, r1, #12
    618e:	4698      	mov	r8, r3
    6190:	004e      	lsls	r6, r1, #1
    6192:	0b23      	lsrs	r3, r4, #12
    6194:	b087      	sub	sp, #28
    6196:	0007      	movs	r7, r0
    6198:	4692      	mov	sl, r2
    619a:	469b      	mov	fp, r3
    619c:	0d76      	lsrs	r6, r6, #21
    619e:	0fcd      	lsrs	r5, r1, #31
    61a0:	2e00      	cmp	r6, #0
    61a2:	d06b      	beq.n	627c <__aeabi_dmul+0xfc>
    61a4:	4b6d      	ldr	r3, [pc, #436]	; (635c <__aeabi_dmul+0x1dc>)
    61a6:	429e      	cmp	r6, r3
    61a8:	d035      	beq.n	6216 <__aeabi_dmul+0x96>
    61aa:	2480      	movs	r4, #128	; 0x80
    61ac:	465b      	mov	r3, fp
    61ae:	0f42      	lsrs	r2, r0, #29
    61b0:	0424      	lsls	r4, r4, #16
    61b2:	00db      	lsls	r3, r3, #3
    61b4:	4314      	orrs	r4, r2
    61b6:	431c      	orrs	r4, r3
    61b8:	00c3      	lsls	r3, r0, #3
    61ba:	4699      	mov	r9, r3
    61bc:	4b68      	ldr	r3, [pc, #416]	; (6360 <__aeabi_dmul+0x1e0>)
    61be:	46a3      	mov	fp, r4
    61c0:	469c      	mov	ip, r3
    61c2:	2300      	movs	r3, #0
    61c4:	2700      	movs	r7, #0
    61c6:	4466      	add	r6, ip
    61c8:	9302      	str	r3, [sp, #8]
    61ca:	4643      	mov	r3, r8
    61cc:	031c      	lsls	r4, r3, #12
    61ce:	005a      	lsls	r2, r3, #1
    61d0:	0fdb      	lsrs	r3, r3, #31
    61d2:	4650      	mov	r0, sl
    61d4:	0b24      	lsrs	r4, r4, #12
    61d6:	0d52      	lsrs	r2, r2, #21
    61d8:	4698      	mov	r8, r3
    61da:	d100      	bne.n	61de <__aeabi_dmul+0x5e>
    61dc:	e076      	b.n	62cc <__aeabi_dmul+0x14c>
    61de:	4b5f      	ldr	r3, [pc, #380]	; (635c <__aeabi_dmul+0x1dc>)
    61e0:	429a      	cmp	r2, r3
    61e2:	d06d      	beq.n	62c0 <__aeabi_dmul+0x140>
    61e4:	2380      	movs	r3, #128	; 0x80
    61e6:	0f41      	lsrs	r1, r0, #29
    61e8:	041b      	lsls	r3, r3, #16
    61ea:	430b      	orrs	r3, r1
    61ec:	495c      	ldr	r1, [pc, #368]	; (6360 <__aeabi_dmul+0x1e0>)
    61ee:	00e4      	lsls	r4, r4, #3
    61f0:	468c      	mov	ip, r1
    61f2:	431c      	orrs	r4, r3
    61f4:	00c3      	lsls	r3, r0, #3
    61f6:	2000      	movs	r0, #0
    61f8:	4462      	add	r2, ip
    61fa:	4641      	mov	r1, r8
    61fc:	18b6      	adds	r6, r6, r2
    61fe:	4069      	eors	r1, r5
    6200:	1c72      	adds	r2, r6, #1
    6202:	9101      	str	r1, [sp, #4]
    6204:	4694      	mov	ip, r2
    6206:	4307      	orrs	r7, r0
    6208:	2f0f      	cmp	r7, #15
    620a:	d900      	bls.n	620e <__aeabi_dmul+0x8e>
    620c:	e0b0      	b.n	6370 <__aeabi_dmul+0x1f0>
    620e:	4a55      	ldr	r2, [pc, #340]	; (6364 <__aeabi_dmul+0x1e4>)
    6210:	00bf      	lsls	r7, r7, #2
    6212:	59d2      	ldr	r2, [r2, r7]
    6214:	4697      	mov	pc, r2
    6216:	465b      	mov	r3, fp
    6218:	4303      	orrs	r3, r0
    621a:	4699      	mov	r9, r3
    621c:	d000      	beq.n	6220 <__aeabi_dmul+0xa0>
    621e:	e087      	b.n	6330 <__aeabi_dmul+0x1b0>
    6220:	2300      	movs	r3, #0
    6222:	469b      	mov	fp, r3
    6224:	3302      	adds	r3, #2
    6226:	2708      	movs	r7, #8
    6228:	9302      	str	r3, [sp, #8]
    622a:	e7ce      	b.n	61ca <__aeabi_dmul+0x4a>
    622c:	4642      	mov	r2, r8
    622e:	9201      	str	r2, [sp, #4]
    6230:	2802      	cmp	r0, #2
    6232:	d067      	beq.n	6304 <__aeabi_dmul+0x184>
    6234:	2803      	cmp	r0, #3
    6236:	d100      	bne.n	623a <__aeabi_dmul+0xba>
    6238:	e20e      	b.n	6658 <__aeabi_dmul+0x4d8>
    623a:	2801      	cmp	r0, #1
    623c:	d000      	beq.n	6240 <__aeabi_dmul+0xc0>
    623e:	e162      	b.n	6506 <__aeabi_dmul+0x386>
    6240:	2300      	movs	r3, #0
    6242:	2400      	movs	r4, #0
    6244:	2200      	movs	r2, #0
    6246:	4699      	mov	r9, r3
    6248:	9901      	ldr	r1, [sp, #4]
    624a:	4001      	ands	r1, r0
    624c:	b2cd      	uxtb	r5, r1
    624e:	2100      	movs	r1, #0
    6250:	0312      	lsls	r2, r2, #12
    6252:	0d0b      	lsrs	r3, r1, #20
    6254:	0b12      	lsrs	r2, r2, #12
    6256:	051b      	lsls	r3, r3, #20
    6258:	4313      	orrs	r3, r2
    625a:	4a43      	ldr	r2, [pc, #268]	; (6368 <__aeabi_dmul+0x1e8>)
    625c:	0524      	lsls	r4, r4, #20
    625e:	4013      	ands	r3, r2
    6260:	431c      	orrs	r4, r3
    6262:	0064      	lsls	r4, r4, #1
    6264:	07ed      	lsls	r5, r5, #31
    6266:	0864      	lsrs	r4, r4, #1
    6268:	432c      	orrs	r4, r5
    626a:	4648      	mov	r0, r9
    626c:	0021      	movs	r1, r4
    626e:	b007      	add	sp, #28
    6270:	bc3c      	pop	{r2, r3, r4, r5}
    6272:	4690      	mov	r8, r2
    6274:	4699      	mov	r9, r3
    6276:	46a2      	mov	sl, r4
    6278:	46ab      	mov	fp, r5
    627a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    627c:	4303      	orrs	r3, r0
    627e:	4699      	mov	r9, r3
    6280:	d04f      	beq.n	6322 <__aeabi_dmul+0x1a2>
    6282:	465b      	mov	r3, fp
    6284:	2b00      	cmp	r3, #0
    6286:	d100      	bne.n	628a <__aeabi_dmul+0x10a>
    6288:	e189      	b.n	659e <__aeabi_dmul+0x41e>
    628a:	4658      	mov	r0, fp
    628c:	f000 fe98 	bl	6fc0 <__clzsi2>
    6290:	0003      	movs	r3, r0
    6292:	3b0b      	subs	r3, #11
    6294:	2b1c      	cmp	r3, #28
    6296:	dd00      	ble.n	629a <__aeabi_dmul+0x11a>
    6298:	e17a      	b.n	6590 <__aeabi_dmul+0x410>
    629a:	221d      	movs	r2, #29
    629c:	1ad3      	subs	r3, r2, r3
    629e:	003a      	movs	r2, r7
    62a0:	0001      	movs	r1, r0
    62a2:	465c      	mov	r4, fp
    62a4:	40da      	lsrs	r2, r3
    62a6:	3908      	subs	r1, #8
    62a8:	408c      	lsls	r4, r1
    62aa:	0013      	movs	r3, r2
    62ac:	408f      	lsls	r7, r1
    62ae:	4323      	orrs	r3, r4
    62b0:	469b      	mov	fp, r3
    62b2:	46b9      	mov	r9, r7
    62b4:	2300      	movs	r3, #0
    62b6:	4e2d      	ldr	r6, [pc, #180]	; (636c <__aeabi_dmul+0x1ec>)
    62b8:	2700      	movs	r7, #0
    62ba:	1a36      	subs	r6, r6, r0
    62bc:	9302      	str	r3, [sp, #8]
    62be:	e784      	b.n	61ca <__aeabi_dmul+0x4a>
    62c0:	4653      	mov	r3, sl
    62c2:	4323      	orrs	r3, r4
    62c4:	d12a      	bne.n	631c <__aeabi_dmul+0x19c>
    62c6:	2400      	movs	r4, #0
    62c8:	2002      	movs	r0, #2
    62ca:	e796      	b.n	61fa <__aeabi_dmul+0x7a>
    62cc:	4653      	mov	r3, sl
    62ce:	4323      	orrs	r3, r4
    62d0:	d020      	beq.n	6314 <__aeabi_dmul+0x194>
    62d2:	2c00      	cmp	r4, #0
    62d4:	d100      	bne.n	62d8 <__aeabi_dmul+0x158>
    62d6:	e157      	b.n	6588 <__aeabi_dmul+0x408>
    62d8:	0020      	movs	r0, r4
    62da:	f000 fe71 	bl	6fc0 <__clzsi2>
    62de:	0003      	movs	r3, r0
    62e0:	3b0b      	subs	r3, #11
    62e2:	2b1c      	cmp	r3, #28
    62e4:	dd00      	ble.n	62e8 <__aeabi_dmul+0x168>
    62e6:	e149      	b.n	657c <__aeabi_dmul+0x3fc>
    62e8:	211d      	movs	r1, #29
    62ea:	1acb      	subs	r3, r1, r3
    62ec:	4651      	mov	r1, sl
    62ee:	0002      	movs	r2, r0
    62f0:	40d9      	lsrs	r1, r3
    62f2:	4653      	mov	r3, sl
    62f4:	3a08      	subs	r2, #8
    62f6:	4094      	lsls	r4, r2
    62f8:	4093      	lsls	r3, r2
    62fa:	430c      	orrs	r4, r1
    62fc:	4a1b      	ldr	r2, [pc, #108]	; (636c <__aeabi_dmul+0x1ec>)
    62fe:	1a12      	subs	r2, r2, r0
    6300:	2000      	movs	r0, #0
    6302:	e77a      	b.n	61fa <__aeabi_dmul+0x7a>
    6304:	2501      	movs	r5, #1
    6306:	9b01      	ldr	r3, [sp, #4]
    6308:	4c14      	ldr	r4, [pc, #80]	; (635c <__aeabi_dmul+0x1dc>)
    630a:	401d      	ands	r5, r3
    630c:	2300      	movs	r3, #0
    630e:	2200      	movs	r2, #0
    6310:	4699      	mov	r9, r3
    6312:	e79c      	b.n	624e <__aeabi_dmul+0xce>
    6314:	2400      	movs	r4, #0
    6316:	2200      	movs	r2, #0
    6318:	2001      	movs	r0, #1
    631a:	e76e      	b.n	61fa <__aeabi_dmul+0x7a>
    631c:	4653      	mov	r3, sl
    631e:	2003      	movs	r0, #3
    6320:	e76b      	b.n	61fa <__aeabi_dmul+0x7a>
    6322:	2300      	movs	r3, #0
    6324:	469b      	mov	fp, r3
    6326:	3301      	adds	r3, #1
    6328:	2704      	movs	r7, #4
    632a:	2600      	movs	r6, #0
    632c:	9302      	str	r3, [sp, #8]
    632e:	e74c      	b.n	61ca <__aeabi_dmul+0x4a>
    6330:	2303      	movs	r3, #3
    6332:	4681      	mov	r9, r0
    6334:	270c      	movs	r7, #12
    6336:	9302      	str	r3, [sp, #8]
    6338:	e747      	b.n	61ca <__aeabi_dmul+0x4a>
    633a:	2280      	movs	r2, #128	; 0x80
    633c:	2300      	movs	r3, #0
    633e:	2500      	movs	r5, #0
    6340:	0312      	lsls	r2, r2, #12
    6342:	4699      	mov	r9, r3
    6344:	4c05      	ldr	r4, [pc, #20]	; (635c <__aeabi_dmul+0x1dc>)
    6346:	e782      	b.n	624e <__aeabi_dmul+0xce>
    6348:	465c      	mov	r4, fp
    634a:	464b      	mov	r3, r9
    634c:	9802      	ldr	r0, [sp, #8]
    634e:	e76f      	b.n	6230 <__aeabi_dmul+0xb0>
    6350:	465c      	mov	r4, fp
    6352:	464b      	mov	r3, r9
    6354:	9501      	str	r5, [sp, #4]
    6356:	9802      	ldr	r0, [sp, #8]
    6358:	e76a      	b.n	6230 <__aeabi_dmul+0xb0>
    635a:	46c0      	nop			; (mov r8, r8)
    635c:	000007ff 	.word	0x000007ff
    6360:	fffffc01 	.word	0xfffffc01
    6364:	00007480 	.word	0x00007480
    6368:	800fffff 	.word	0x800fffff
    636c:	fffffc0d 	.word	0xfffffc0d
    6370:	464a      	mov	r2, r9
    6372:	4649      	mov	r1, r9
    6374:	0c17      	lsrs	r7, r2, #16
    6376:	0c1a      	lsrs	r2, r3, #16
    6378:	041b      	lsls	r3, r3, #16
    637a:	0c1b      	lsrs	r3, r3, #16
    637c:	0408      	lsls	r0, r1, #16
    637e:	0019      	movs	r1, r3
    6380:	0c00      	lsrs	r0, r0, #16
    6382:	4341      	muls	r1, r0
    6384:	0015      	movs	r5, r2
    6386:	4688      	mov	r8, r1
    6388:	0019      	movs	r1, r3
    638a:	437d      	muls	r5, r7
    638c:	4379      	muls	r1, r7
    638e:	9503      	str	r5, [sp, #12]
    6390:	4689      	mov	r9, r1
    6392:	0029      	movs	r1, r5
    6394:	0015      	movs	r5, r2
    6396:	4345      	muls	r5, r0
    6398:	444d      	add	r5, r9
    639a:	9502      	str	r5, [sp, #8]
    639c:	4645      	mov	r5, r8
    639e:	0c2d      	lsrs	r5, r5, #16
    63a0:	46aa      	mov	sl, r5
    63a2:	9d02      	ldr	r5, [sp, #8]
    63a4:	4455      	add	r5, sl
    63a6:	45a9      	cmp	r9, r5
    63a8:	d906      	bls.n	63b8 <__aeabi_dmul+0x238>
    63aa:	468a      	mov	sl, r1
    63ac:	2180      	movs	r1, #128	; 0x80
    63ae:	0249      	lsls	r1, r1, #9
    63b0:	4689      	mov	r9, r1
    63b2:	44ca      	add	sl, r9
    63b4:	4651      	mov	r1, sl
    63b6:	9103      	str	r1, [sp, #12]
    63b8:	0c29      	lsrs	r1, r5, #16
    63ba:	9104      	str	r1, [sp, #16]
    63bc:	4641      	mov	r1, r8
    63be:	0409      	lsls	r1, r1, #16
    63c0:	042d      	lsls	r5, r5, #16
    63c2:	0c09      	lsrs	r1, r1, #16
    63c4:	4688      	mov	r8, r1
    63c6:	0029      	movs	r1, r5
    63c8:	0c25      	lsrs	r5, r4, #16
    63ca:	0424      	lsls	r4, r4, #16
    63cc:	4441      	add	r1, r8
    63ce:	0c24      	lsrs	r4, r4, #16
    63d0:	9105      	str	r1, [sp, #20]
    63d2:	0021      	movs	r1, r4
    63d4:	4341      	muls	r1, r0
    63d6:	4688      	mov	r8, r1
    63d8:	0021      	movs	r1, r4
    63da:	4379      	muls	r1, r7
    63dc:	468a      	mov	sl, r1
    63de:	4368      	muls	r0, r5
    63e0:	4641      	mov	r1, r8
    63e2:	4450      	add	r0, sl
    63e4:	4681      	mov	r9, r0
    63e6:	0c08      	lsrs	r0, r1, #16
    63e8:	4448      	add	r0, r9
    63ea:	436f      	muls	r7, r5
    63ec:	4582      	cmp	sl, r0
    63ee:	d903      	bls.n	63f8 <__aeabi_dmul+0x278>
    63f0:	2180      	movs	r1, #128	; 0x80
    63f2:	0249      	lsls	r1, r1, #9
    63f4:	4689      	mov	r9, r1
    63f6:	444f      	add	r7, r9
    63f8:	0c01      	lsrs	r1, r0, #16
    63fa:	4689      	mov	r9, r1
    63fc:	0039      	movs	r1, r7
    63fe:	4449      	add	r1, r9
    6400:	9102      	str	r1, [sp, #8]
    6402:	4641      	mov	r1, r8
    6404:	040f      	lsls	r7, r1, #16
    6406:	9904      	ldr	r1, [sp, #16]
    6408:	0c3f      	lsrs	r7, r7, #16
    640a:	4688      	mov	r8, r1
    640c:	0400      	lsls	r0, r0, #16
    640e:	19c0      	adds	r0, r0, r7
    6410:	4480      	add	r8, r0
    6412:	4641      	mov	r1, r8
    6414:	9104      	str	r1, [sp, #16]
    6416:	4659      	mov	r1, fp
    6418:	0c0f      	lsrs	r7, r1, #16
    641a:	0409      	lsls	r1, r1, #16
    641c:	0c09      	lsrs	r1, r1, #16
    641e:	4688      	mov	r8, r1
    6420:	4359      	muls	r1, r3
    6422:	468a      	mov	sl, r1
    6424:	0039      	movs	r1, r7
    6426:	4351      	muls	r1, r2
    6428:	4689      	mov	r9, r1
    642a:	4641      	mov	r1, r8
    642c:	434a      	muls	r2, r1
    642e:	4651      	mov	r1, sl
    6430:	0c09      	lsrs	r1, r1, #16
    6432:	468b      	mov	fp, r1
    6434:	437b      	muls	r3, r7
    6436:	18d2      	adds	r2, r2, r3
    6438:	445a      	add	r2, fp
    643a:	4293      	cmp	r3, r2
    643c:	d903      	bls.n	6446 <__aeabi_dmul+0x2c6>
    643e:	2380      	movs	r3, #128	; 0x80
    6440:	025b      	lsls	r3, r3, #9
    6442:	469b      	mov	fp, r3
    6444:	44d9      	add	r9, fp
    6446:	4651      	mov	r1, sl
    6448:	0409      	lsls	r1, r1, #16
    644a:	0c09      	lsrs	r1, r1, #16
    644c:	468a      	mov	sl, r1
    644e:	4641      	mov	r1, r8
    6450:	4361      	muls	r1, r4
    6452:	437c      	muls	r4, r7
    6454:	0c13      	lsrs	r3, r2, #16
    6456:	0412      	lsls	r2, r2, #16
    6458:	444b      	add	r3, r9
    645a:	4452      	add	r2, sl
    645c:	46a1      	mov	r9, r4
    645e:	468a      	mov	sl, r1
    6460:	003c      	movs	r4, r7
    6462:	4641      	mov	r1, r8
    6464:	436c      	muls	r4, r5
    6466:	434d      	muls	r5, r1
    6468:	4651      	mov	r1, sl
    646a:	444d      	add	r5, r9
    646c:	0c0f      	lsrs	r7, r1, #16
    646e:	197d      	adds	r5, r7, r5
    6470:	45a9      	cmp	r9, r5
    6472:	d903      	bls.n	647c <__aeabi_dmul+0x2fc>
    6474:	2180      	movs	r1, #128	; 0x80
    6476:	0249      	lsls	r1, r1, #9
    6478:	4688      	mov	r8, r1
    647a:	4444      	add	r4, r8
    647c:	9f04      	ldr	r7, [sp, #16]
    647e:	9903      	ldr	r1, [sp, #12]
    6480:	46b8      	mov	r8, r7
    6482:	4441      	add	r1, r8
    6484:	468b      	mov	fp, r1
    6486:	4583      	cmp	fp, r0
    6488:	4180      	sbcs	r0, r0
    648a:	4241      	negs	r1, r0
    648c:	4688      	mov	r8, r1
    648e:	4651      	mov	r1, sl
    6490:	0408      	lsls	r0, r1, #16
    6492:	042f      	lsls	r7, r5, #16
    6494:	0c00      	lsrs	r0, r0, #16
    6496:	183f      	adds	r7, r7, r0
    6498:	4658      	mov	r0, fp
    649a:	9902      	ldr	r1, [sp, #8]
    649c:	1810      	adds	r0, r2, r0
    649e:	4689      	mov	r9, r1
    64a0:	4290      	cmp	r0, r2
    64a2:	4192      	sbcs	r2, r2
    64a4:	444f      	add	r7, r9
    64a6:	46ba      	mov	sl, r7
    64a8:	4252      	negs	r2, r2
    64aa:	4699      	mov	r9, r3
    64ac:	4693      	mov	fp, r2
    64ae:	44c2      	add	sl, r8
    64b0:	44d1      	add	r9, sl
    64b2:	44cb      	add	fp, r9
    64b4:	428f      	cmp	r7, r1
    64b6:	41bf      	sbcs	r7, r7
    64b8:	45c2      	cmp	sl, r8
    64ba:	4189      	sbcs	r1, r1
    64bc:	4599      	cmp	r9, r3
    64be:	419b      	sbcs	r3, r3
    64c0:	4593      	cmp	fp, r2
    64c2:	4192      	sbcs	r2, r2
    64c4:	427f      	negs	r7, r7
    64c6:	4249      	negs	r1, r1
    64c8:	0c2d      	lsrs	r5, r5, #16
    64ca:	4252      	negs	r2, r2
    64cc:	430f      	orrs	r7, r1
    64ce:	425b      	negs	r3, r3
    64d0:	4313      	orrs	r3, r2
    64d2:	197f      	adds	r7, r7, r5
    64d4:	18ff      	adds	r7, r7, r3
    64d6:	465b      	mov	r3, fp
    64d8:	193c      	adds	r4, r7, r4
    64da:	0ddb      	lsrs	r3, r3, #23
    64dc:	9a05      	ldr	r2, [sp, #20]
    64de:	0264      	lsls	r4, r4, #9
    64e0:	431c      	orrs	r4, r3
    64e2:	0243      	lsls	r3, r0, #9
    64e4:	4313      	orrs	r3, r2
    64e6:	1e5d      	subs	r5, r3, #1
    64e8:	41ab      	sbcs	r3, r5
    64ea:	465a      	mov	r2, fp
    64ec:	0dc0      	lsrs	r0, r0, #23
    64ee:	4303      	orrs	r3, r0
    64f0:	0252      	lsls	r2, r2, #9
    64f2:	4313      	orrs	r3, r2
    64f4:	01e2      	lsls	r2, r4, #7
    64f6:	d556      	bpl.n	65a6 <__aeabi_dmul+0x426>
    64f8:	2001      	movs	r0, #1
    64fa:	085a      	lsrs	r2, r3, #1
    64fc:	4003      	ands	r3, r0
    64fe:	4313      	orrs	r3, r2
    6500:	07e2      	lsls	r2, r4, #31
    6502:	4313      	orrs	r3, r2
    6504:	0864      	lsrs	r4, r4, #1
    6506:	485a      	ldr	r0, [pc, #360]	; (6670 <__aeabi_dmul+0x4f0>)
    6508:	4460      	add	r0, ip
    650a:	2800      	cmp	r0, #0
    650c:	dd4d      	ble.n	65aa <__aeabi_dmul+0x42a>
    650e:	075a      	lsls	r2, r3, #29
    6510:	d009      	beq.n	6526 <__aeabi_dmul+0x3a6>
    6512:	220f      	movs	r2, #15
    6514:	401a      	ands	r2, r3
    6516:	2a04      	cmp	r2, #4
    6518:	d005      	beq.n	6526 <__aeabi_dmul+0x3a6>
    651a:	1d1a      	adds	r2, r3, #4
    651c:	429a      	cmp	r2, r3
    651e:	419b      	sbcs	r3, r3
    6520:	425b      	negs	r3, r3
    6522:	18e4      	adds	r4, r4, r3
    6524:	0013      	movs	r3, r2
    6526:	01e2      	lsls	r2, r4, #7
    6528:	d504      	bpl.n	6534 <__aeabi_dmul+0x3b4>
    652a:	2080      	movs	r0, #128	; 0x80
    652c:	4a51      	ldr	r2, [pc, #324]	; (6674 <__aeabi_dmul+0x4f4>)
    652e:	00c0      	lsls	r0, r0, #3
    6530:	4014      	ands	r4, r2
    6532:	4460      	add	r0, ip
    6534:	4a50      	ldr	r2, [pc, #320]	; (6678 <__aeabi_dmul+0x4f8>)
    6536:	4290      	cmp	r0, r2
    6538:	dd00      	ble.n	653c <__aeabi_dmul+0x3bc>
    653a:	e6e3      	b.n	6304 <__aeabi_dmul+0x184>
    653c:	2501      	movs	r5, #1
    653e:	08db      	lsrs	r3, r3, #3
    6540:	0762      	lsls	r2, r4, #29
    6542:	431a      	orrs	r2, r3
    6544:	0264      	lsls	r4, r4, #9
    6546:	9b01      	ldr	r3, [sp, #4]
    6548:	4691      	mov	r9, r2
    654a:	0b22      	lsrs	r2, r4, #12
    654c:	0544      	lsls	r4, r0, #21
    654e:	0d64      	lsrs	r4, r4, #21
    6550:	401d      	ands	r5, r3
    6552:	e67c      	b.n	624e <__aeabi_dmul+0xce>
    6554:	2280      	movs	r2, #128	; 0x80
    6556:	4659      	mov	r1, fp
    6558:	0312      	lsls	r2, r2, #12
    655a:	4211      	tst	r1, r2
    655c:	d008      	beq.n	6570 <__aeabi_dmul+0x3f0>
    655e:	4214      	tst	r4, r2
    6560:	d106      	bne.n	6570 <__aeabi_dmul+0x3f0>
    6562:	4322      	orrs	r2, r4
    6564:	0312      	lsls	r2, r2, #12
    6566:	0b12      	lsrs	r2, r2, #12
    6568:	4645      	mov	r5, r8
    656a:	4699      	mov	r9, r3
    656c:	4c43      	ldr	r4, [pc, #268]	; (667c <__aeabi_dmul+0x4fc>)
    656e:	e66e      	b.n	624e <__aeabi_dmul+0xce>
    6570:	465b      	mov	r3, fp
    6572:	431a      	orrs	r2, r3
    6574:	0312      	lsls	r2, r2, #12
    6576:	0b12      	lsrs	r2, r2, #12
    6578:	4c40      	ldr	r4, [pc, #256]	; (667c <__aeabi_dmul+0x4fc>)
    657a:	e668      	b.n	624e <__aeabi_dmul+0xce>
    657c:	0003      	movs	r3, r0
    657e:	4654      	mov	r4, sl
    6580:	3b28      	subs	r3, #40	; 0x28
    6582:	409c      	lsls	r4, r3
    6584:	2300      	movs	r3, #0
    6586:	e6b9      	b.n	62fc <__aeabi_dmul+0x17c>
    6588:	f000 fd1a 	bl	6fc0 <__clzsi2>
    658c:	3020      	adds	r0, #32
    658e:	e6a6      	b.n	62de <__aeabi_dmul+0x15e>
    6590:	0003      	movs	r3, r0
    6592:	3b28      	subs	r3, #40	; 0x28
    6594:	409f      	lsls	r7, r3
    6596:	2300      	movs	r3, #0
    6598:	46bb      	mov	fp, r7
    659a:	4699      	mov	r9, r3
    659c:	e68a      	b.n	62b4 <__aeabi_dmul+0x134>
    659e:	f000 fd0f 	bl	6fc0 <__clzsi2>
    65a2:	3020      	adds	r0, #32
    65a4:	e674      	b.n	6290 <__aeabi_dmul+0x110>
    65a6:	46b4      	mov	ip, r6
    65a8:	e7ad      	b.n	6506 <__aeabi_dmul+0x386>
    65aa:	2501      	movs	r5, #1
    65ac:	1a2a      	subs	r2, r5, r0
    65ae:	2a38      	cmp	r2, #56	; 0x38
    65b0:	dd06      	ble.n	65c0 <__aeabi_dmul+0x440>
    65b2:	9b01      	ldr	r3, [sp, #4]
    65b4:	2400      	movs	r4, #0
    65b6:	401d      	ands	r5, r3
    65b8:	2300      	movs	r3, #0
    65ba:	2200      	movs	r2, #0
    65bc:	4699      	mov	r9, r3
    65be:	e646      	b.n	624e <__aeabi_dmul+0xce>
    65c0:	2a1f      	cmp	r2, #31
    65c2:	dc21      	bgt.n	6608 <__aeabi_dmul+0x488>
    65c4:	2520      	movs	r5, #32
    65c6:	0020      	movs	r0, r4
    65c8:	1aad      	subs	r5, r5, r2
    65ca:	001e      	movs	r6, r3
    65cc:	40ab      	lsls	r3, r5
    65ce:	40a8      	lsls	r0, r5
    65d0:	40d6      	lsrs	r6, r2
    65d2:	1e5d      	subs	r5, r3, #1
    65d4:	41ab      	sbcs	r3, r5
    65d6:	4330      	orrs	r0, r6
    65d8:	4318      	orrs	r0, r3
    65da:	40d4      	lsrs	r4, r2
    65dc:	0743      	lsls	r3, r0, #29
    65de:	d009      	beq.n	65f4 <__aeabi_dmul+0x474>
    65e0:	230f      	movs	r3, #15
    65e2:	4003      	ands	r3, r0
    65e4:	2b04      	cmp	r3, #4
    65e6:	d005      	beq.n	65f4 <__aeabi_dmul+0x474>
    65e8:	0003      	movs	r3, r0
    65ea:	1d18      	adds	r0, r3, #4
    65ec:	4298      	cmp	r0, r3
    65ee:	419b      	sbcs	r3, r3
    65f0:	425b      	negs	r3, r3
    65f2:	18e4      	adds	r4, r4, r3
    65f4:	0223      	lsls	r3, r4, #8
    65f6:	d521      	bpl.n	663c <__aeabi_dmul+0x4bc>
    65f8:	2501      	movs	r5, #1
    65fa:	9b01      	ldr	r3, [sp, #4]
    65fc:	2401      	movs	r4, #1
    65fe:	401d      	ands	r5, r3
    6600:	2300      	movs	r3, #0
    6602:	2200      	movs	r2, #0
    6604:	4699      	mov	r9, r3
    6606:	e622      	b.n	624e <__aeabi_dmul+0xce>
    6608:	251f      	movs	r5, #31
    660a:	0021      	movs	r1, r4
    660c:	426d      	negs	r5, r5
    660e:	1a28      	subs	r0, r5, r0
    6610:	40c1      	lsrs	r1, r0
    6612:	0008      	movs	r0, r1
    6614:	2a20      	cmp	r2, #32
    6616:	d01d      	beq.n	6654 <__aeabi_dmul+0x4d4>
    6618:	355f      	adds	r5, #95	; 0x5f
    661a:	1aaa      	subs	r2, r5, r2
    661c:	4094      	lsls	r4, r2
    661e:	4323      	orrs	r3, r4
    6620:	1e5c      	subs	r4, r3, #1
    6622:	41a3      	sbcs	r3, r4
    6624:	2507      	movs	r5, #7
    6626:	4303      	orrs	r3, r0
    6628:	401d      	ands	r5, r3
    662a:	2200      	movs	r2, #0
    662c:	2d00      	cmp	r5, #0
    662e:	d009      	beq.n	6644 <__aeabi_dmul+0x4c4>
    6630:	220f      	movs	r2, #15
    6632:	2400      	movs	r4, #0
    6634:	401a      	ands	r2, r3
    6636:	0018      	movs	r0, r3
    6638:	2a04      	cmp	r2, #4
    663a:	d1d6      	bne.n	65ea <__aeabi_dmul+0x46a>
    663c:	0003      	movs	r3, r0
    663e:	0765      	lsls	r5, r4, #29
    6640:	0264      	lsls	r4, r4, #9
    6642:	0b22      	lsrs	r2, r4, #12
    6644:	08db      	lsrs	r3, r3, #3
    6646:	432b      	orrs	r3, r5
    6648:	2501      	movs	r5, #1
    664a:	4699      	mov	r9, r3
    664c:	9b01      	ldr	r3, [sp, #4]
    664e:	2400      	movs	r4, #0
    6650:	401d      	ands	r5, r3
    6652:	e5fc      	b.n	624e <__aeabi_dmul+0xce>
    6654:	2400      	movs	r4, #0
    6656:	e7e2      	b.n	661e <__aeabi_dmul+0x49e>
    6658:	2280      	movs	r2, #128	; 0x80
    665a:	2501      	movs	r5, #1
    665c:	0312      	lsls	r2, r2, #12
    665e:	4322      	orrs	r2, r4
    6660:	9901      	ldr	r1, [sp, #4]
    6662:	0312      	lsls	r2, r2, #12
    6664:	0b12      	lsrs	r2, r2, #12
    6666:	400d      	ands	r5, r1
    6668:	4699      	mov	r9, r3
    666a:	4c04      	ldr	r4, [pc, #16]	; (667c <__aeabi_dmul+0x4fc>)
    666c:	e5ef      	b.n	624e <__aeabi_dmul+0xce>
    666e:	46c0      	nop			; (mov r8, r8)
    6670:	000003ff 	.word	0x000003ff
    6674:	feffffff 	.word	0xfeffffff
    6678:	000007fe 	.word	0x000007fe
    667c:	000007ff 	.word	0x000007ff

00006680 <__aeabi_dsub>:
    6680:	b5f0      	push	{r4, r5, r6, r7, lr}
    6682:	4646      	mov	r6, r8
    6684:	46d6      	mov	lr, sl
    6686:	464f      	mov	r7, r9
    6688:	030c      	lsls	r4, r1, #12
    668a:	b5c0      	push	{r6, r7, lr}
    668c:	0fcd      	lsrs	r5, r1, #31
    668e:	004e      	lsls	r6, r1, #1
    6690:	0a61      	lsrs	r1, r4, #9
    6692:	0f44      	lsrs	r4, r0, #29
    6694:	430c      	orrs	r4, r1
    6696:	00c1      	lsls	r1, r0, #3
    6698:	0058      	lsls	r0, r3, #1
    669a:	0d40      	lsrs	r0, r0, #21
    669c:	4684      	mov	ip, r0
    669e:	468a      	mov	sl, r1
    66a0:	000f      	movs	r7, r1
    66a2:	0319      	lsls	r1, r3, #12
    66a4:	0f50      	lsrs	r0, r2, #29
    66a6:	0a49      	lsrs	r1, r1, #9
    66a8:	4301      	orrs	r1, r0
    66aa:	48c6      	ldr	r0, [pc, #792]	; (69c4 <__aeabi_dsub+0x344>)
    66ac:	0d76      	lsrs	r6, r6, #21
    66ae:	46a8      	mov	r8, r5
    66b0:	0fdb      	lsrs	r3, r3, #31
    66b2:	00d2      	lsls	r2, r2, #3
    66b4:	4584      	cmp	ip, r0
    66b6:	d100      	bne.n	66ba <__aeabi_dsub+0x3a>
    66b8:	e0d8      	b.n	686c <__aeabi_dsub+0x1ec>
    66ba:	2001      	movs	r0, #1
    66bc:	4043      	eors	r3, r0
    66be:	42ab      	cmp	r3, r5
    66c0:	d100      	bne.n	66c4 <__aeabi_dsub+0x44>
    66c2:	e0a6      	b.n	6812 <__aeabi_dsub+0x192>
    66c4:	4660      	mov	r0, ip
    66c6:	1a35      	subs	r5, r6, r0
    66c8:	2d00      	cmp	r5, #0
    66ca:	dc00      	bgt.n	66ce <__aeabi_dsub+0x4e>
    66cc:	e105      	b.n	68da <__aeabi_dsub+0x25a>
    66ce:	2800      	cmp	r0, #0
    66d0:	d110      	bne.n	66f4 <__aeabi_dsub+0x74>
    66d2:	000b      	movs	r3, r1
    66d4:	4313      	orrs	r3, r2
    66d6:	d100      	bne.n	66da <__aeabi_dsub+0x5a>
    66d8:	e0d7      	b.n	688a <__aeabi_dsub+0x20a>
    66da:	1e6b      	subs	r3, r5, #1
    66dc:	2b00      	cmp	r3, #0
    66de:	d000      	beq.n	66e2 <__aeabi_dsub+0x62>
    66e0:	e14b      	b.n	697a <__aeabi_dsub+0x2fa>
    66e2:	4653      	mov	r3, sl
    66e4:	1a9f      	subs	r7, r3, r2
    66e6:	45ba      	cmp	sl, r7
    66e8:	4180      	sbcs	r0, r0
    66ea:	1a64      	subs	r4, r4, r1
    66ec:	4240      	negs	r0, r0
    66ee:	1a24      	subs	r4, r4, r0
    66f0:	2601      	movs	r6, #1
    66f2:	e01e      	b.n	6732 <__aeabi_dsub+0xb2>
    66f4:	4bb3      	ldr	r3, [pc, #716]	; (69c4 <__aeabi_dsub+0x344>)
    66f6:	429e      	cmp	r6, r3
    66f8:	d048      	beq.n	678c <__aeabi_dsub+0x10c>
    66fa:	2380      	movs	r3, #128	; 0x80
    66fc:	041b      	lsls	r3, r3, #16
    66fe:	4319      	orrs	r1, r3
    6700:	2d38      	cmp	r5, #56	; 0x38
    6702:	dd00      	ble.n	6706 <__aeabi_dsub+0x86>
    6704:	e119      	b.n	693a <__aeabi_dsub+0x2ba>
    6706:	2d1f      	cmp	r5, #31
    6708:	dd00      	ble.n	670c <__aeabi_dsub+0x8c>
    670a:	e14c      	b.n	69a6 <__aeabi_dsub+0x326>
    670c:	2320      	movs	r3, #32
    670e:	000f      	movs	r7, r1
    6710:	1b5b      	subs	r3, r3, r5
    6712:	0010      	movs	r0, r2
    6714:	409a      	lsls	r2, r3
    6716:	409f      	lsls	r7, r3
    6718:	40e8      	lsrs	r0, r5
    671a:	1e53      	subs	r3, r2, #1
    671c:	419a      	sbcs	r2, r3
    671e:	40e9      	lsrs	r1, r5
    6720:	4307      	orrs	r7, r0
    6722:	4317      	orrs	r7, r2
    6724:	4653      	mov	r3, sl
    6726:	1bdf      	subs	r7, r3, r7
    6728:	1a61      	subs	r1, r4, r1
    672a:	45ba      	cmp	sl, r7
    672c:	41a4      	sbcs	r4, r4
    672e:	4264      	negs	r4, r4
    6730:	1b0c      	subs	r4, r1, r4
    6732:	0223      	lsls	r3, r4, #8
    6734:	d400      	bmi.n	6738 <__aeabi_dsub+0xb8>
    6736:	e0c5      	b.n	68c4 <__aeabi_dsub+0x244>
    6738:	0264      	lsls	r4, r4, #9
    673a:	0a65      	lsrs	r5, r4, #9
    673c:	2d00      	cmp	r5, #0
    673e:	d100      	bne.n	6742 <__aeabi_dsub+0xc2>
    6740:	e0f6      	b.n	6930 <__aeabi_dsub+0x2b0>
    6742:	0028      	movs	r0, r5
    6744:	f000 fc3c 	bl	6fc0 <__clzsi2>
    6748:	0003      	movs	r3, r0
    674a:	3b08      	subs	r3, #8
    674c:	2b1f      	cmp	r3, #31
    674e:	dd00      	ble.n	6752 <__aeabi_dsub+0xd2>
    6750:	e0e9      	b.n	6926 <__aeabi_dsub+0x2a6>
    6752:	2220      	movs	r2, #32
    6754:	003c      	movs	r4, r7
    6756:	1ad2      	subs	r2, r2, r3
    6758:	409d      	lsls	r5, r3
    675a:	40d4      	lsrs	r4, r2
    675c:	409f      	lsls	r7, r3
    675e:	4325      	orrs	r5, r4
    6760:	429e      	cmp	r6, r3
    6762:	dd00      	ble.n	6766 <__aeabi_dsub+0xe6>
    6764:	e0db      	b.n	691e <__aeabi_dsub+0x29e>
    6766:	1b9e      	subs	r6, r3, r6
    6768:	1c73      	adds	r3, r6, #1
    676a:	2b1f      	cmp	r3, #31
    676c:	dd00      	ble.n	6770 <__aeabi_dsub+0xf0>
    676e:	e10a      	b.n	6986 <__aeabi_dsub+0x306>
    6770:	2220      	movs	r2, #32
    6772:	0038      	movs	r0, r7
    6774:	1ad2      	subs	r2, r2, r3
    6776:	0029      	movs	r1, r5
    6778:	4097      	lsls	r7, r2
    677a:	002c      	movs	r4, r5
    677c:	4091      	lsls	r1, r2
    677e:	40d8      	lsrs	r0, r3
    6780:	1e7a      	subs	r2, r7, #1
    6782:	4197      	sbcs	r7, r2
    6784:	40dc      	lsrs	r4, r3
    6786:	2600      	movs	r6, #0
    6788:	4301      	orrs	r1, r0
    678a:	430f      	orrs	r7, r1
    678c:	077b      	lsls	r3, r7, #29
    678e:	d009      	beq.n	67a4 <__aeabi_dsub+0x124>
    6790:	230f      	movs	r3, #15
    6792:	403b      	ands	r3, r7
    6794:	2b04      	cmp	r3, #4
    6796:	d005      	beq.n	67a4 <__aeabi_dsub+0x124>
    6798:	1d3b      	adds	r3, r7, #4
    679a:	42bb      	cmp	r3, r7
    679c:	41bf      	sbcs	r7, r7
    679e:	427f      	negs	r7, r7
    67a0:	19e4      	adds	r4, r4, r7
    67a2:	001f      	movs	r7, r3
    67a4:	0223      	lsls	r3, r4, #8
    67a6:	d525      	bpl.n	67f4 <__aeabi_dsub+0x174>
    67a8:	4b86      	ldr	r3, [pc, #536]	; (69c4 <__aeabi_dsub+0x344>)
    67aa:	3601      	adds	r6, #1
    67ac:	429e      	cmp	r6, r3
    67ae:	d100      	bne.n	67b2 <__aeabi_dsub+0x132>
    67b0:	e0af      	b.n	6912 <__aeabi_dsub+0x292>
    67b2:	4b85      	ldr	r3, [pc, #532]	; (69c8 <__aeabi_dsub+0x348>)
    67b4:	2501      	movs	r5, #1
    67b6:	401c      	ands	r4, r3
    67b8:	4643      	mov	r3, r8
    67ba:	0762      	lsls	r2, r4, #29
    67bc:	08ff      	lsrs	r7, r7, #3
    67be:	0264      	lsls	r4, r4, #9
    67c0:	0576      	lsls	r6, r6, #21
    67c2:	4317      	orrs	r7, r2
    67c4:	0b24      	lsrs	r4, r4, #12
    67c6:	0d76      	lsrs	r6, r6, #21
    67c8:	401d      	ands	r5, r3
    67ca:	2100      	movs	r1, #0
    67cc:	0324      	lsls	r4, r4, #12
    67ce:	0b23      	lsrs	r3, r4, #12
    67d0:	0d0c      	lsrs	r4, r1, #20
    67d2:	4a7e      	ldr	r2, [pc, #504]	; (69cc <__aeabi_dsub+0x34c>)
    67d4:	0524      	lsls	r4, r4, #20
    67d6:	431c      	orrs	r4, r3
    67d8:	4014      	ands	r4, r2
    67da:	0533      	lsls	r3, r6, #20
    67dc:	4323      	orrs	r3, r4
    67de:	005b      	lsls	r3, r3, #1
    67e0:	07ed      	lsls	r5, r5, #31
    67e2:	085b      	lsrs	r3, r3, #1
    67e4:	432b      	orrs	r3, r5
    67e6:	0038      	movs	r0, r7
    67e8:	0019      	movs	r1, r3
    67ea:	bc1c      	pop	{r2, r3, r4}
    67ec:	4690      	mov	r8, r2
    67ee:	4699      	mov	r9, r3
    67f0:	46a2      	mov	sl, r4
    67f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    67f4:	2501      	movs	r5, #1
    67f6:	4643      	mov	r3, r8
    67f8:	0762      	lsls	r2, r4, #29
    67fa:	08ff      	lsrs	r7, r7, #3
    67fc:	4317      	orrs	r7, r2
    67fe:	08e4      	lsrs	r4, r4, #3
    6800:	401d      	ands	r5, r3
    6802:	4b70      	ldr	r3, [pc, #448]	; (69c4 <__aeabi_dsub+0x344>)
    6804:	429e      	cmp	r6, r3
    6806:	d036      	beq.n	6876 <__aeabi_dsub+0x1f6>
    6808:	0324      	lsls	r4, r4, #12
    680a:	0576      	lsls	r6, r6, #21
    680c:	0b24      	lsrs	r4, r4, #12
    680e:	0d76      	lsrs	r6, r6, #21
    6810:	e7db      	b.n	67ca <__aeabi_dsub+0x14a>
    6812:	4663      	mov	r3, ip
    6814:	1af3      	subs	r3, r6, r3
    6816:	2b00      	cmp	r3, #0
    6818:	dc00      	bgt.n	681c <__aeabi_dsub+0x19c>
    681a:	e094      	b.n	6946 <__aeabi_dsub+0x2c6>
    681c:	4660      	mov	r0, ip
    681e:	2800      	cmp	r0, #0
    6820:	d035      	beq.n	688e <__aeabi_dsub+0x20e>
    6822:	4868      	ldr	r0, [pc, #416]	; (69c4 <__aeabi_dsub+0x344>)
    6824:	4286      	cmp	r6, r0
    6826:	d0b1      	beq.n	678c <__aeabi_dsub+0x10c>
    6828:	2780      	movs	r7, #128	; 0x80
    682a:	043f      	lsls	r7, r7, #16
    682c:	4339      	orrs	r1, r7
    682e:	2b38      	cmp	r3, #56	; 0x38
    6830:	dc00      	bgt.n	6834 <__aeabi_dsub+0x1b4>
    6832:	e0fd      	b.n	6a30 <__aeabi_dsub+0x3b0>
    6834:	430a      	orrs	r2, r1
    6836:	0017      	movs	r7, r2
    6838:	2100      	movs	r1, #0
    683a:	1e7a      	subs	r2, r7, #1
    683c:	4197      	sbcs	r7, r2
    683e:	4457      	add	r7, sl
    6840:	4557      	cmp	r7, sl
    6842:	4180      	sbcs	r0, r0
    6844:	1909      	adds	r1, r1, r4
    6846:	4244      	negs	r4, r0
    6848:	190c      	adds	r4, r1, r4
    684a:	0223      	lsls	r3, r4, #8
    684c:	d53a      	bpl.n	68c4 <__aeabi_dsub+0x244>
    684e:	4b5d      	ldr	r3, [pc, #372]	; (69c4 <__aeabi_dsub+0x344>)
    6850:	3601      	adds	r6, #1
    6852:	429e      	cmp	r6, r3
    6854:	d100      	bne.n	6858 <__aeabi_dsub+0x1d8>
    6856:	e14b      	b.n	6af0 <__aeabi_dsub+0x470>
    6858:	2201      	movs	r2, #1
    685a:	4b5b      	ldr	r3, [pc, #364]	; (69c8 <__aeabi_dsub+0x348>)
    685c:	401c      	ands	r4, r3
    685e:	087b      	lsrs	r3, r7, #1
    6860:	4017      	ands	r7, r2
    6862:	431f      	orrs	r7, r3
    6864:	07e2      	lsls	r2, r4, #31
    6866:	4317      	orrs	r7, r2
    6868:	0864      	lsrs	r4, r4, #1
    686a:	e78f      	b.n	678c <__aeabi_dsub+0x10c>
    686c:	0008      	movs	r0, r1
    686e:	4310      	orrs	r0, r2
    6870:	d000      	beq.n	6874 <__aeabi_dsub+0x1f4>
    6872:	e724      	b.n	66be <__aeabi_dsub+0x3e>
    6874:	e721      	b.n	66ba <__aeabi_dsub+0x3a>
    6876:	0023      	movs	r3, r4
    6878:	433b      	orrs	r3, r7
    687a:	d100      	bne.n	687e <__aeabi_dsub+0x1fe>
    687c:	e1b9      	b.n	6bf2 <__aeabi_dsub+0x572>
    687e:	2280      	movs	r2, #128	; 0x80
    6880:	0312      	lsls	r2, r2, #12
    6882:	4314      	orrs	r4, r2
    6884:	0324      	lsls	r4, r4, #12
    6886:	0b24      	lsrs	r4, r4, #12
    6888:	e79f      	b.n	67ca <__aeabi_dsub+0x14a>
    688a:	002e      	movs	r6, r5
    688c:	e77e      	b.n	678c <__aeabi_dsub+0x10c>
    688e:	0008      	movs	r0, r1
    6890:	4310      	orrs	r0, r2
    6892:	d100      	bne.n	6896 <__aeabi_dsub+0x216>
    6894:	e0ca      	b.n	6a2c <__aeabi_dsub+0x3ac>
    6896:	1e58      	subs	r0, r3, #1
    6898:	4684      	mov	ip, r0
    689a:	2800      	cmp	r0, #0
    689c:	d000      	beq.n	68a0 <__aeabi_dsub+0x220>
    689e:	e0e7      	b.n	6a70 <__aeabi_dsub+0x3f0>
    68a0:	4452      	add	r2, sl
    68a2:	4552      	cmp	r2, sl
    68a4:	4180      	sbcs	r0, r0
    68a6:	1864      	adds	r4, r4, r1
    68a8:	4240      	negs	r0, r0
    68aa:	1824      	adds	r4, r4, r0
    68ac:	0017      	movs	r7, r2
    68ae:	2601      	movs	r6, #1
    68b0:	0223      	lsls	r3, r4, #8
    68b2:	d507      	bpl.n	68c4 <__aeabi_dsub+0x244>
    68b4:	2602      	movs	r6, #2
    68b6:	e7cf      	b.n	6858 <__aeabi_dsub+0x1d8>
    68b8:	4664      	mov	r4, ip
    68ba:	432c      	orrs	r4, r5
    68bc:	d100      	bne.n	68c0 <__aeabi_dsub+0x240>
    68be:	e1b3      	b.n	6c28 <__aeabi_dsub+0x5a8>
    68c0:	002c      	movs	r4, r5
    68c2:	4667      	mov	r7, ip
    68c4:	077b      	lsls	r3, r7, #29
    68c6:	d000      	beq.n	68ca <__aeabi_dsub+0x24a>
    68c8:	e762      	b.n	6790 <__aeabi_dsub+0x110>
    68ca:	0763      	lsls	r3, r4, #29
    68cc:	08ff      	lsrs	r7, r7, #3
    68ce:	431f      	orrs	r7, r3
    68d0:	2501      	movs	r5, #1
    68d2:	4643      	mov	r3, r8
    68d4:	08e4      	lsrs	r4, r4, #3
    68d6:	401d      	ands	r5, r3
    68d8:	e793      	b.n	6802 <__aeabi_dsub+0x182>
    68da:	2d00      	cmp	r5, #0
    68dc:	d178      	bne.n	69d0 <__aeabi_dsub+0x350>
    68de:	1c75      	adds	r5, r6, #1
    68e0:	056d      	lsls	r5, r5, #21
    68e2:	0d6d      	lsrs	r5, r5, #21
    68e4:	2d01      	cmp	r5, #1
    68e6:	dc00      	bgt.n	68ea <__aeabi_dsub+0x26a>
    68e8:	e0f2      	b.n	6ad0 <__aeabi_dsub+0x450>
    68ea:	4650      	mov	r0, sl
    68ec:	1a80      	subs	r0, r0, r2
    68ee:	4582      	cmp	sl, r0
    68f0:	41bf      	sbcs	r7, r7
    68f2:	1a65      	subs	r5, r4, r1
    68f4:	427f      	negs	r7, r7
    68f6:	1bed      	subs	r5, r5, r7
    68f8:	4684      	mov	ip, r0
    68fa:	0228      	lsls	r0, r5, #8
    68fc:	d400      	bmi.n	6900 <__aeabi_dsub+0x280>
    68fe:	e08c      	b.n	6a1a <__aeabi_dsub+0x39a>
    6900:	4650      	mov	r0, sl
    6902:	1a17      	subs	r7, r2, r0
    6904:	42ba      	cmp	r2, r7
    6906:	4192      	sbcs	r2, r2
    6908:	1b0c      	subs	r4, r1, r4
    690a:	4255      	negs	r5, r2
    690c:	1b65      	subs	r5, r4, r5
    690e:	4698      	mov	r8, r3
    6910:	e714      	b.n	673c <__aeabi_dsub+0xbc>
    6912:	2501      	movs	r5, #1
    6914:	4643      	mov	r3, r8
    6916:	2400      	movs	r4, #0
    6918:	401d      	ands	r5, r3
    691a:	2700      	movs	r7, #0
    691c:	e755      	b.n	67ca <__aeabi_dsub+0x14a>
    691e:	4c2a      	ldr	r4, [pc, #168]	; (69c8 <__aeabi_dsub+0x348>)
    6920:	1af6      	subs	r6, r6, r3
    6922:	402c      	ands	r4, r5
    6924:	e732      	b.n	678c <__aeabi_dsub+0x10c>
    6926:	003d      	movs	r5, r7
    6928:	3828      	subs	r0, #40	; 0x28
    692a:	4085      	lsls	r5, r0
    692c:	2700      	movs	r7, #0
    692e:	e717      	b.n	6760 <__aeabi_dsub+0xe0>
    6930:	0038      	movs	r0, r7
    6932:	f000 fb45 	bl	6fc0 <__clzsi2>
    6936:	3020      	adds	r0, #32
    6938:	e706      	b.n	6748 <__aeabi_dsub+0xc8>
    693a:	430a      	orrs	r2, r1
    693c:	0017      	movs	r7, r2
    693e:	2100      	movs	r1, #0
    6940:	1e7a      	subs	r2, r7, #1
    6942:	4197      	sbcs	r7, r2
    6944:	e6ee      	b.n	6724 <__aeabi_dsub+0xa4>
    6946:	2b00      	cmp	r3, #0
    6948:	d000      	beq.n	694c <__aeabi_dsub+0x2cc>
    694a:	e0e5      	b.n	6b18 <__aeabi_dsub+0x498>
    694c:	1c73      	adds	r3, r6, #1
    694e:	469c      	mov	ip, r3
    6950:	055b      	lsls	r3, r3, #21
    6952:	0d5b      	lsrs	r3, r3, #21
    6954:	2b01      	cmp	r3, #1
    6956:	dc00      	bgt.n	695a <__aeabi_dsub+0x2da>
    6958:	e09f      	b.n	6a9a <__aeabi_dsub+0x41a>
    695a:	4b1a      	ldr	r3, [pc, #104]	; (69c4 <__aeabi_dsub+0x344>)
    695c:	459c      	cmp	ip, r3
    695e:	d100      	bne.n	6962 <__aeabi_dsub+0x2e2>
    6960:	e0c5      	b.n	6aee <__aeabi_dsub+0x46e>
    6962:	4452      	add	r2, sl
    6964:	4552      	cmp	r2, sl
    6966:	4180      	sbcs	r0, r0
    6968:	1864      	adds	r4, r4, r1
    696a:	4240      	negs	r0, r0
    696c:	1824      	adds	r4, r4, r0
    696e:	07e7      	lsls	r7, r4, #31
    6970:	0852      	lsrs	r2, r2, #1
    6972:	4317      	orrs	r7, r2
    6974:	0864      	lsrs	r4, r4, #1
    6976:	4666      	mov	r6, ip
    6978:	e708      	b.n	678c <__aeabi_dsub+0x10c>
    697a:	4812      	ldr	r0, [pc, #72]	; (69c4 <__aeabi_dsub+0x344>)
    697c:	4285      	cmp	r5, r0
    697e:	d100      	bne.n	6982 <__aeabi_dsub+0x302>
    6980:	e085      	b.n	6a8e <__aeabi_dsub+0x40e>
    6982:	001d      	movs	r5, r3
    6984:	e6bc      	b.n	6700 <__aeabi_dsub+0x80>
    6986:	0029      	movs	r1, r5
    6988:	3e1f      	subs	r6, #31
    698a:	40f1      	lsrs	r1, r6
    698c:	2b20      	cmp	r3, #32
    698e:	d100      	bne.n	6992 <__aeabi_dsub+0x312>
    6990:	e07f      	b.n	6a92 <__aeabi_dsub+0x412>
    6992:	2240      	movs	r2, #64	; 0x40
    6994:	1ad3      	subs	r3, r2, r3
    6996:	409d      	lsls	r5, r3
    6998:	432f      	orrs	r7, r5
    699a:	1e7d      	subs	r5, r7, #1
    699c:	41af      	sbcs	r7, r5
    699e:	2400      	movs	r4, #0
    69a0:	430f      	orrs	r7, r1
    69a2:	2600      	movs	r6, #0
    69a4:	e78e      	b.n	68c4 <__aeabi_dsub+0x244>
    69a6:	002b      	movs	r3, r5
    69a8:	000f      	movs	r7, r1
    69aa:	3b20      	subs	r3, #32
    69ac:	40df      	lsrs	r7, r3
    69ae:	2d20      	cmp	r5, #32
    69b0:	d071      	beq.n	6a96 <__aeabi_dsub+0x416>
    69b2:	2340      	movs	r3, #64	; 0x40
    69b4:	1b5d      	subs	r5, r3, r5
    69b6:	40a9      	lsls	r1, r5
    69b8:	430a      	orrs	r2, r1
    69ba:	1e51      	subs	r1, r2, #1
    69bc:	418a      	sbcs	r2, r1
    69be:	2100      	movs	r1, #0
    69c0:	4317      	orrs	r7, r2
    69c2:	e6af      	b.n	6724 <__aeabi_dsub+0xa4>
    69c4:	000007ff 	.word	0x000007ff
    69c8:	ff7fffff 	.word	0xff7fffff
    69cc:	800fffff 	.word	0x800fffff
    69d0:	2e00      	cmp	r6, #0
    69d2:	d03e      	beq.n	6a52 <__aeabi_dsub+0x3d2>
    69d4:	4eb3      	ldr	r6, [pc, #716]	; (6ca4 <__aeabi_dsub+0x624>)
    69d6:	45b4      	cmp	ip, r6
    69d8:	d045      	beq.n	6a66 <__aeabi_dsub+0x3e6>
    69da:	2680      	movs	r6, #128	; 0x80
    69dc:	0436      	lsls	r6, r6, #16
    69de:	426d      	negs	r5, r5
    69e0:	4334      	orrs	r4, r6
    69e2:	2d38      	cmp	r5, #56	; 0x38
    69e4:	dd00      	ble.n	69e8 <__aeabi_dsub+0x368>
    69e6:	e0a8      	b.n	6b3a <__aeabi_dsub+0x4ba>
    69e8:	2d1f      	cmp	r5, #31
    69ea:	dd00      	ble.n	69ee <__aeabi_dsub+0x36e>
    69ec:	e11f      	b.n	6c2e <__aeabi_dsub+0x5ae>
    69ee:	2620      	movs	r6, #32
    69f0:	0027      	movs	r7, r4
    69f2:	4650      	mov	r0, sl
    69f4:	1b76      	subs	r6, r6, r5
    69f6:	40b7      	lsls	r7, r6
    69f8:	40e8      	lsrs	r0, r5
    69fa:	4307      	orrs	r7, r0
    69fc:	4650      	mov	r0, sl
    69fe:	40b0      	lsls	r0, r6
    6a00:	1e46      	subs	r6, r0, #1
    6a02:	41b0      	sbcs	r0, r6
    6a04:	40ec      	lsrs	r4, r5
    6a06:	4338      	orrs	r0, r7
    6a08:	1a17      	subs	r7, r2, r0
    6a0a:	42ba      	cmp	r2, r7
    6a0c:	4192      	sbcs	r2, r2
    6a0e:	1b0c      	subs	r4, r1, r4
    6a10:	4252      	negs	r2, r2
    6a12:	1aa4      	subs	r4, r4, r2
    6a14:	4666      	mov	r6, ip
    6a16:	4698      	mov	r8, r3
    6a18:	e68b      	b.n	6732 <__aeabi_dsub+0xb2>
    6a1a:	4664      	mov	r4, ip
    6a1c:	4667      	mov	r7, ip
    6a1e:	432c      	orrs	r4, r5
    6a20:	d000      	beq.n	6a24 <__aeabi_dsub+0x3a4>
    6a22:	e68b      	b.n	673c <__aeabi_dsub+0xbc>
    6a24:	2500      	movs	r5, #0
    6a26:	2600      	movs	r6, #0
    6a28:	2700      	movs	r7, #0
    6a2a:	e6ea      	b.n	6802 <__aeabi_dsub+0x182>
    6a2c:	001e      	movs	r6, r3
    6a2e:	e6ad      	b.n	678c <__aeabi_dsub+0x10c>
    6a30:	2b1f      	cmp	r3, #31
    6a32:	dc60      	bgt.n	6af6 <__aeabi_dsub+0x476>
    6a34:	2720      	movs	r7, #32
    6a36:	1af8      	subs	r0, r7, r3
    6a38:	000f      	movs	r7, r1
    6a3a:	4684      	mov	ip, r0
    6a3c:	4087      	lsls	r7, r0
    6a3e:	0010      	movs	r0, r2
    6a40:	40d8      	lsrs	r0, r3
    6a42:	4307      	orrs	r7, r0
    6a44:	4660      	mov	r0, ip
    6a46:	4082      	lsls	r2, r0
    6a48:	1e50      	subs	r0, r2, #1
    6a4a:	4182      	sbcs	r2, r0
    6a4c:	40d9      	lsrs	r1, r3
    6a4e:	4317      	orrs	r7, r2
    6a50:	e6f5      	b.n	683e <__aeabi_dsub+0x1be>
    6a52:	0026      	movs	r6, r4
    6a54:	4650      	mov	r0, sl
    6a56:	4306      	orrs	r6, r0
    6a58:	d005      	beq.n	6a66 <__aeabi_dsub+0x3e6>
    6a5a:	43ed      	mvns	r5, r5
    6a5c:	2d00      	cmp	r5, #0
    6a5e:	d0d3      	beq.n	6a08 <__aeabi_dsub+0x388>
    6a60:	4e90      	ldr	r6, [pc, #576]	; (6ca4 <__aeabi_dsub+0x624>)
    6a62:	45b4      	cmp	ip, r6
    6a64:	d1bd      	bne.n	69e2 <__aeabi_dsub+0x362>
    6a66:	000c      	movs	r4, r1
    6a68:	0017      	movs	r7, r2
    6a6a:	4666      	mov	r6, ip
    6a6c:	4698      	mov	r8, r3
    6a6e:	e68d      	b.n	678c <__aeabi_dsub+0x10c>
    6a70:	488c      	ldr	r0, [pc, #560]	; (6ca4 <__aeabi_dsub+0x624>)
    6a72:	4283      	cmp	r3, r0
    6a74:	d00b      	beq.n	6a8e <__aeabi_dsub+0x40e>
    6a76:	4663      	mov	r3, ip
    6a78:	e6d9      	b.n	682e <__aeabi_dsub+0x1ae>
    6a7a:	2d00      	cmp	r5, #0
    6a7c:	d000      	beq.n	6a80 <__aeabi_dsub+0x400>
    6a7e:	e096      	b.n	6bae <__aeabi_dsub+0x52e>
    6a80:	0008      	movs	r0, r1
    6a82:	4310      	orrs	r0, r2
    6a84:	d100      	bne.n	6a88 <__aeabi_dsub+0x408>
    6a86:	e0e2      	b.n	6c4e <__aeabi_dsub+0x5ce>
    6a88:	000c      	movs	r4, r1
    6a8a:	0017      	movs	r7, r2
    6a8c:	4698      	mov	r8, r3
    6a8e:	4e85      	ldr	r6, [pc, #532]	; (6ca4 <__aeabi_dsub+0x624>)
    6a90:	e67c      	b.n	678c <__aeabi_dsub+0x10c>
    6a92:	2500      	movs	r5, #0
    6a94:	e780      	b.n	6998 <__aeabi_dsub+0x318>
    6a96:	2100      	movs	r1, #0
    6a98:	e78e      	b.n	69b8 <__aeabi_dsub+0x338>
    6a9a:	0023      	movs	r3, r4
    6a9c:	4650      	mov	r0, sl
    6a9e:	4303      	orrs	r3, r0
    6aa0:	2e00      	cmp	r6, #0
    6aa2:	d000      	beq.n	6aa6 <__aeabi_dsub+0x426>
    6aa4:	e0a8      	b.n	6bf8 <__aeabi_dsub+0x578>
    6aa6:	2b00      	cmp	r3, #0
    6aa8:	d100      	bne.n	6aac <__aeabi_dsub+0x42c>
    6aaa:	e0de      	b.n	6c6a <__aeabi_dsub+0x5ea>
    6aac:	000b      	movs	r3, r1
    6aae:	4313      	orrs	r3, r2
    6ab0:	d100      	bne.n	6ab4 <__aeabi_dsub+0x434>
    6ab2:	e66b      	b.n	678c <__aeabi_dsub+0x10c>
    6ab4:	4452      	add	r2, sl
    6ab6:	4552      	cmp	r2, sl
    6ab8:	4180      	sbcs	r0, r0
    6aba:	1864      	adds	r4, r4, r1
    6abc:	4240      	negs	r0, r0
    6abe:	1824      	adds	r4, r4, r0
    6ac0:	0017      	movs	r7, r2
    6ac2:	0223      	lsls	r3, r4, #8
    6ac4:	d400      	bmi.n	6ac8 <__aeabi_dsub+0x448>
    6ac6:	e6fd      	b.n	68c4 <__aeabi_dsub+0x244>
    6ac8:	4b77      	ldr	r3, [pc, #476]	; (6ca8 <__aeabi_dsub+0x628>)
    6aca:	4666      	mov	r6, ip
    6acc:	401c      	ands	r4, r3
    6ace:	e65d      	b.n	678c <__aeabi_dsub+0x10c>
    6ad0:	0025      	movs	r5, r4
    6ad2:	4650      	mov	r0, sl
    6ad4:	4305      	orrs	r5, r0
    6ad6:	2e00      	cmp	r6, #0
    6ad8:	d1cf      	bne.n	6a7a <__aeabi_dsub+0x3fa>
    6ada:	2d00      	cmp	r5, #0
    6adc:	d14f      	bne.n	6b7e <__aeabi_dsub+0x4fe>
    6ade:	000c      	movs	r4, r1
    6ae0:	4314      	orrs	r4, r2
    6ae2:	d100      	bne.n	6ae6 <__aeabi_dsub+0x466>
    6ae4:	e0a0      	b.n	6c28 <__aeabi_dsub+0x5a8>
    6ae6:	000c      	movs	r4, r1
    6ae8:	0017      	movs	r7, r2
    6aea:	4698      	mov	r8, r3
    6aec:	e64e      	b.n	678c <__aeabi_dsub+0x10c>
    6aee:	4666      	mov	r6, ip
    6af0:	2400      	movs	r4, #0
    6af2:	2700      	movs	r7, #0
    6af4:	e685      	b.n	6802 <__aeabi_dsub+0x182>
    6af6:	001f      	movs	r7, r3
    6af8:	0008      	movs	r0, r1
    6afa:	3f20      	subs	r7, #32
    6afc:	40f8      	lsrs	r0, r7
    6afe:	0007      	movs	r7, r0
    6b00:	2b20      	cmp	r3, #32
    6b02:	d100      	bne.n	6b06 <__aeabi_dsub+0x486>
    6b04:	e08e      	b.n	6c24 <__aeabi_dsub+0x5a4>
    6b06:	2040      	movs	r0, #64	; 0x40
    6b08:	1ac3      	subs	r3, r0, r3
    6b0a:	4099      	lsls	r1, r3
    6b0c:	430a      	orrs	r2, r1
    6b0e:	1e51      	subs	r1, r2, #1
    6b10:	418a      	sbcs	r2, r1
    6b12:	2100      	movs	r1, #0
    6b14:	4317      	orrs	r7, r2
    6b16:	e692      	b.n	683e <__aeabi_dsub+0x1be>
    6b18:	2e00      	cmp	r6, #0
    6b1a:	d114      	bne.n	6b46 <__aeabi_dsub+0x4c6>
    6b1c:	0026      	movs	r6, r4
    6b1e:	4650      	mov	r0, sl
    6b20:	4306      	orrs	r6, r0
    6b22:	d062      	beq.n	6bea <__aeabi_dsub+0x56a>
    6b24:	43db      	mvns	r3, r3
    6b26:	2b00      	cmp	r3, #0
    6b28:	d15c      	bne.n	6be4 <__aeabi_dsub+0x564>
    6b2a:	1887      	adds	r7, r0, r2
    6b2c:	4297      	cmp	r7, r2
    6b2e:	4192      	sbcs	r2, r2
    6b30:	1864      	adds	r4, r4, r1
    6b32:	4252      	negs	r2, r2
    6b34:	18a4      	adds	r4, r4, r2
    6b36:	4666      	mov	r6, ip
    6b38:	e687      	b.n	684a <__aeabi_dsub+0x1ca>
    6b3a:	4650      	mov	r0, sl
    6b3c:	4320      	orrs	r0, r4
    6b3e:	1e44      	subs	r4, r0, #1
    6b40:	41a0      	sbcs	r0, r4
    6b42:	2400      	movs	r4, #0
    6b44:	e760      	b.n	6a08 <__aeabi_dsub+0x388>
    6b46:	4e57      	ldr	r6, [pc, #348]	; (6ca4 <__aeabi_dsub+0x624>)
    6b48:	45b4      	cmp	ip, r6
    6b4a:	d04e      	beq.n	6bea <__aeabi_dsub+0x56a>
    6b4c:	2680      	movs	r6, #128	; 0x80
    6b4e:	0436      	lsls	r6, r6, #16
    6b50:	425b      	negs	r3, r3
    6b52:	4334      	orrs	r4, r6
    6b54:	2b38      	cmp	r3, #56	; 0x38
    6b56:	dd00      	ble.n	6b5a <__aeabi_dsub+0x4da>
    6b58:	e07f      	b.n	6c5a <__aeabi_dsub+0x5da>
    6b5a:	2b1f      	cmp	r3, #31
    6b5c:	dd00      	ble.n	6b60 <__aeabi_dsub+0x4e0>
    6b5e:	e08b      	b.n	6c78 <__aeabi_dsub+0x5f8>
    6b60:	2620      	movs	r6, #32
    6b62:	0027      	movs	r7, r4
    6b64:	4650      	mov	r0, sl
    6b66:	1af6      	subs	r6, r6, r3
    6b68:	40b7      	lsls	r7, r6
    6b6a:	40d8      	lsrs	r0, r3
    6b6c:	4307      	orrs	r7, r0
    6b6e:	4650      	mov	r0, sl
    6b70:	40b0      	lsls	r0, r6
    6b72:	1e46      	subs	r6, r0, #1
    6b74:	41b0      	sbcs	r0, r6
    6b76:	4307      	orrs	r7, r0
    6b78:	40dc      	lsrs	r4, r3
    6b7a:	18bf      	adds	r7, r7, r2
    6b7c:	e7d6      	b.n	6b2c <__aeabi_dsub+0x4ac>
    6b7e:	000d      	movs	r5, r1
    6b80:	4315      	orrs	r5, r2
    6b82:	d100      	bne.n	6b86 <__aeabi_dsub+0x506>
    6b84:	e602      	b.n	678c <__aeabi_dsub+0x10c>
    6b86:	4650      	mov	r0, sl
    6b88:	1a80      	subs	r0, r0, r2
    6b8a:	4582      	cmp	sl, r0
    6b8c:	41bf      	sbcs	r7, r7
    6b8e:	1a65      	subs	r5, r4, r1
    6b90:	427f      	negs	r7, r7
    6b92:	1bed      	subs	r5, r5, r7
    6b94:	4684      	mov	ip, r0
    6b96:	0228      	lsls	r0, r5, #8
    6b98:	d400      	bmi.n	6b9c <__aeabi_dsub+0x51c>
    6b9a:	e68d      	b.n	68b8 <__aeabi_dsub+0x238>
    6b9c:	4650      	mov	r0, sl
    6b9e:	1a17      	subs	r7, r2, r0
    6ba0:	42ba      	cmp	r2, r7
    6ba2:	4192      	sbcs	r2, r2
    6ba4:	1b0c      	subs	r4, r1, r4
    6ba6:	4252      	negs	r2, r2
    6ba8:	1aa4      	subs	r4, r4, r2
    6baa:	4698      	mov	r8, r3
    6bac:	e5ee      	b.n	678c <__aeabi_dsub+0x10c>
    6bae:	000d      	movs	r5, r1
    6bb0:	4315      	orrs	r5, r2
    6bb2:	d100      	bne.n	6bb6 <__aeabi_dsub+0x536>
    6bb4:	e76b      	b.n	6a8e <__aeabi_dsub+0x40e>
    6bb6:	4650      	mov	r0, sl
    6bb8:	0767      	lsls	r7, r4, #29
    6bba:	08c0      	lsrs	r0, r0, #3
    6bbc:	4307      	orrs	r7, r0
    6bbe:	2080      	movs	r0, #128	; 0x80
    6bc0:	08e4      	lsrs	r4, r4, #3
    6bc2:	0300      	lsls	r0, r0, #12
    6bc4:	4204      	tst	r4, r0
    6bc6:	d007      	beq.n	6bd8 <__aeabi_dsub+0x558>
    6bc8:	08cd      	lsrs	r5, r1, #3
    6bca:	4205      	tst	r5, r0
    6bcc:	d104      	bne.n	6bd8 <__aeabi_dsub+0x558>
    6bce:	002c      	movs	r4, r5
    6bd0:	4698      	mov	r8, r3
    6bd2:	08d7      	lsrs	r7, r2, #3
    6bd4:	0749      	lsls	r1, r1, #29
    6bd6:	430f      	orrs	r7, r1
    6bd8:	0f7b      	lsrs	r3, r7, #29
    6bda:	00e4      	lsls	r4, r4, #3
    6bdc:	431c      	orrs	r4, r3
    6bde:	00ff      	lsls	r7, r7, #3
    6be0:	4e30      	ldr	r6, [pc, #192]	; (6ca4 <__aeabi_dsub+0x624>)
    6be2:	e5d3      	b.n	678c <__aeabi_dsub+0x10c>
    6be4:	4e2f      	ldr	r6, [pc, #188]	; (6ca4 <__aeabi_dsub+0x624>)
    6be6:	45b4      	cmp	ip, r6
    6be8:	d1b4      	bne.n	6b54 <__aeabi_dsub+0x4d4>
    6bea:	000c      	movs	r4, r1
    6bec:	0017      	movs	r7, r2
    6bee:	4666      	mov	r6, ip
    6bf0:	e5cc      	b.n	678c <__aeabi_dsub+0x10c>
    6bf2:	2700      	movs	r7, #0
    6bf4:	2400      	movs	r4, #0
    6bf6:	e5e8      	b.n	67ca <__aeabi_dsub+0x14a>
    6bf8:	2b00      	cmp	r3, #0
    6bfa:	d039      	beq.n	6c70 <__aeabi_dsub+0x5f0>
    6bfc:	000b      	movs	r3, r1
    6bfe:	4313      	orrs	r3, r2
    6c00:	d100      	bne.n	6c04 <__aeabi_dsub+0x584>
    6c02:	e744      	b.n	6a8e <__aeabi_dsub+0x40e>
    6c04:	08c0      	lsrs	r0, r0, #3
    6c06:	0767      	lsls	r7, r4, #29
    6c08:	4307      	orrs	r7, r0
    6c0a:	2080      	movs	r0, #128	; 0x80
    6c0c:	08e4      	lsrs	r4, r4, #3
    6c0e:	0300      	lsls	r0, r0, #12
    6c10:	4204      	tst	r4, r0
    6c12:	d0e1      	beq.n	6bd8 <__aeabi_dsub+0x558>
    6c14:	08cb      	lsrs	r3, r1, #3
    6c16:	4203      	tst	r3, r0
    6c18:	d1de      	bne.n	6bd8 <__aeabi_dsub+0x558>
    6c1a:	08d7      	lsrs	r7, r2, #3
    6c1c:	0749      	lsls	r1, r1, #29
    6c1e:	430f      	orrs	r7, r1
    6c20:	001c      	movs	r4, r3
    6c22:	e7d9      	b.n	6bd8 <__aeabi_dsub+0x558>
    6c24:	2100      	movs	r1, #0
    6c26:	e771      	b.n	6b0c <__aeabi_dsub+0x48c>
    6c28:	2500      	movs	r5, #0
    6c2a:	2700      	movs	r7, #0
    6c2c:	e5e9      	b.n	6802 <__aeabi_dsub+0x182>
    6c2e:	002e      	movs	r6, r5
    6c30:	0027      	movs	r7, r4
    6c32:	3e20      	subs	r6, #32
    6c34:	40f7      	lsrs	r7, r6
    6c36:	2d20      	cmp	r5, #32
    6c38:	d02f      	beq.n	6c9a <__aeabi_dsub+0x61a>
    6c3a:	2640      	movs	r6, #64	; 0x40
    6c3c:	1b75      	subs	r5, r6, r5
    6c3e:	40ac      	lsls	r4, r5
    6c40:	4650      	mov	r0, sl
    6c42:	4320      	orrs	r0, r4
    6c44:	1e44      	subs	r4, r0, #1
    6c46:	41a0      	sbcs	r0, r4
    6c48:	2400      	movs	r4, #0
    6c4a:	4338      	orrs	r0, r7
    6c4c:	e6dc      	b.n	6a08 <__aeabi_dsub+0x388>
    6c4e:	2480      	movs	r4, #128	; 0x80
    6c50:	2500      	movs	r5, #0
    6c52:	0324      	lsls	r4, r4, #12
    6c54:	4e13      	ldr	r6, [pc, #76]	; (6ca4 <__aeabi_dsub+0x624>)
    6c56:	2700      	movs	r7, #0
    6c58:	e5d3      	b.n	6802 <__aeabi_dsub+0x182>
    6c5a:	4650      	mov	r0, sl
    6c5c:	4320      	orrs	r0, r4
    6c5e:	0007      	movs	r7, r0
    6c60:	1e78      	subs	r0, r7, #1
    6c62:	4187      	sbcs	r7, r0
    6c64:	2400      	movs	r4, #0
    6c66:	18bf      	adds	r7, r7, r2
    6c68:	e760      	b.n	6b2c <__aeabi_dsub+0x4ac>
    6c6a:	000c      	movs	r4, r1
    6c6c:	0017      	movs	r7, r2
    6c6e:	e58d      	b.n	678c <__aeabi_dsub+0x10c>
    6c70:	000c      	movs	r4, r1
    6c72:	0017      	movs	r7, r2
    6c74:	4e0b      	ldr	r6, [pc, #44]	; (6ca4 <__aeabi_dsub+0x624>)
    6c76:	e589      	b.n	678c <__aeabi_dsub+0x10c>
    6c78:	001e      	movs	r6, r3
    6c7a:	0027      	movs	r7, r4
    6c7c:	3e20      	subs	r6, #32
    6c7e:	40f7      	lsrs	r7, r6
    6c80:	2b20      	cmp	r3, #32
    6c82:	d00c      	beq.n	6c9e <__aeabi_dsub+0x61e>
    6c84:	2640      	movs	r6, #64	; 0x40
    6c86:	1af3      	subs	r3, r6, r3
    6c88:	409c      	lsls	r4, r3
    6c8a:	4650      	mov	r0, sl
    6c8c:	4320      	orrs	r0, r4
    6c8e:	1e44      	subs	r4, r0, #1
    6c90:	41a0      	sbcs	r0, r4
    6c92:	4307      	orrs	r7, r0
    6c94:	2400      	movs	r4, #0
    6c96:	18bf      	adds	r7, r7, r2
    6c98:	e748      	b.n	6b2c <__aeabi_dsub+0x4ac>
    6c9a:	2400      	movs	r4, #0
    6c9c:	e7d0      	b.n	6c40 <__aeabi_dsub+0x5c0>
    6c9e:	2400      	movs	r4, #0
    6ca0:	e7f3      	b.n	6c8a <__aeabi_dsub+0x60a>
    6ca2:	46c0      	nop			; (mov r8, r8)
    6ca4:	000007ff 	.word	0x000007ff
    6ca8:	ff7fffff 	.word	0xff7fffff

00006cac <__aeabi_d2iz>:
    6cac:	b530      	push	{r4, r5, lr}
    6cae:	4d13      	ldr	r5, [pc, #76]	; (6cfc <__aeabi_d2iz+0x50>)
    6cb0:	030a      	lsls	r2, r1, #12
    6cb2:	004b      	lsls	r3, r1, #1
    6cb4:	0b12      	lsrs	r2, r2, #12
    6cb6:	0d5b      	lsrs	r3, r3, #21
    6cb8:	0fc9      	lsrs	r1, r1, #31
    6cba:	2400      	movs	r4, #0
    6cbc:	42ab      	cmp	r3, r5
    6cbe:	dd10      	ble.n	6ce2 <__aeabi_d2iz+0x36>
    6cc0:	4c0f      	ldr	r4, [pc, #60]	; (6d00 <__aeabi_d2iz+0x54>)
    6cc2:	42a3      	cmp	r3, r4
    6cc4:	dc0f      	bgt.n	6ce6 <__aeabi_d2iz+0x3a>
    6cc6:	2480      	movs	r4, #128	; 0x80
    6cc8:	4d0e      	ldr	r5, [pc, #56]	; (6d04 <__aeabi_d2iz+0x58>)
    6cca:	0364      	lsls	r4, r4, #13
    6ccc:	4322      	orrs	r2, r4
    6cce:	1aed      	subs	r5, r5, r3
    6cd0:	2d1f      	cmp	r5, #31
    6cd2:	dd0b      	ble.n	6cec <__aeabi_d2iz+0x40>
    6cd4:	480c      	ldr	r0, [pc, #48]	; (6d08 <__aeabi_d2iz+0x5c>)
    6cd6:	1ac3      	subs	r3, r0, r3
    6cd8:	40da      	lsrs	r2, r3
    6cda:	4254      	negs	r4, r2
    6cdc:	2900      	cmp	r1, #0
    6cde:	d100      	bne.n	6ce2 <__aeabi_d2iz+0x36>
    6ce0:	0014      	movs	r4, r2
    6ce2:	0020      	movs	r0, r4
    6ce4:	bd30      	pop	{r4, r5, pc}
    6ce6:	4b09      	ldr	r3, [pc, #36]	; (6d0c <__aeabi_d2iz+0x60>)
    6ce8:	18cc      	adds	r4, r1, r3
    6cea:	e7fa      	b.n	6ce2 <__aeabi_d2iz+0x36>
    6cec:	4c08      	ldr	r4, [pc, #32]	; (6d10 <__aeabi_d2iz+0x64>)
    6cee:	40e8      	lsrs	r0, r5
    6cf0:	46a4      	mov	ip, r4
    6cf2:	4463      	add	r3, ip
    6cf4:	409a      	lsls	r2, r3
    6cf6:	4302      	orrs	r2, r0
    6cf8:	e7ef      	b.n	6cda <__aeabi_d2iz+0x2e>
    6cfa:	46c0      	nop			; (mov r8, r8)
    6cfc:	000003fe 	.word	0x000003fe
    6d00:	0000041d 	.word	0x0000041d
    6d04:	00000433 	.word	0x00000433
    6d08:	00000413 	.word	0x00000413
    6d0c:	7fffffff 	.word	0x7fffffff
    6d10:	fffffbed 	.word	0xfffffbed

00006d14 <__aeabi_i2d>:
    6d14:	b570      	push	{r4, r5, r6, lr}
    6d16:	2800      	cmp	r0, #0
    6d18:	d030      	beq.n	6d7c <__aeabi_i2d+0x68>
    6d1a:	17c3      	asrs	r3, r0, #31
    6d1c:	18c4      	adds	r4, r0, r3
    6d1e:	405c      	eors	r4, r3
    6d20:	0fc5      	lsrs	r5, r0, #31
    6d22:	0020      	movs	r0, r4
    6d24:	f000 f94c 	bl	6fc0 <__clzsi2>
    6d28:	4b17      	ldr	r3, [pc, #92]	; (6d88 <__aeabi_i2d+0x74>)
    6d2a:	4a18      	ldr	r2, [pc, #96]	; (6d8c <__aeabi_i2d+0x78>)
    6d2c:	1a1b      	subs	r3, r3, r0
    6d2e:	1ad2      	subs	r2, r2, r3
    6d30:	2a1f      	cmp	r2, #31
    6d32:	dd18      	ble.n	6d66 <__aeabi_i2d+0x52>
    6d34:	4a16      	ldr	r2, [pc, #88]	; (6d90 <__aeabi_i2d+0x7c>)
    6d36:	1ad2      	subs	r2, r2, r3
    6d38:	4094      	lsls	r4, r2
    6d3a:	2200      	movs	r2, #0
    6d3c:	0324      	lsls	r4, r4, #12
    6d3e:	055b      	lsls	r3, r3, #21
    6d40:	0b24      	lsrs	r4, r4, #12
    6d42:	0d5b      	lsrs	r3, r3, #21
    6d44:	2100      	movs	r1, #0
    6d46:	0010      	movs	r0, r2
    6d48:	0324      	lsls	r4, r4, #12
    6d4a:	0d0a      	lsrs	r2, r1, #20
    6d4c:	0b24      	lsrs	r4, r4, #12
    6d4e:	0512      	lsls	r2, r2, #20
    6d50:	4322      	orrs	r2, r4
    6d52:	4c10      	ldr	r4, [pc, #64]	; (6d94 <__aeabi_i2d+0x80>)
    6d54:	051b      	lsls	r3, r3, #20
    6d56:	4022      	ands	r2, r4
    6d58:	4313      	orrs	r3, r2
    6d5a:	005b      	lsls	r3, r3, #1
    6d5c:	07ed      	lsls	r5, r5, #31
    6d5e:	085b      	lsrs	r3, r3, #1
    6d60:	432b      	orrs	r3, r5
    6d62:	0019      	movs	r1, r3
    6d64:	bd70      	pop	{r4, r5, r6, pc}
    6d66:	0021      	movs	r1, r4
    6d68:	4091      	lsls	r1, r2
    6d6a:	000a      	movs	r2, r1
    6d6c:	210b      	movs	r1, #11
    6d6e:	1a08      	subs	r0, r1, r0
    6d70:	40c4      	lsrs	r4, r0
    6d72:	055b      	lsls	r3, r3, #21
    6d74:	0324      	lsls	r4, r4, #12
    6d76:	0b24      	lsrs	r4, r4, #12
    6d78:	0d5b      	lsrs	r3, r3, #21
    6d7a:	e7e3      	b.n	6d44 <__aeabi_i2d+0x30>
    6d7c:	2500      	movs	r5, #0
    6d7e:	2300      	movs	r3, #0
    6d80:	2400      	movs	r4, #0
    6d82:	2200      	movs	r2, #0
    6d84:	e7de      	b.n	6d44 <__aeabi_i2d+0x30>
    6d86:	46c0      	nop			; (mov r8, r8)
    6d88:	0000041e 	.word	0x0000041e
    6d8c:	00000433 	.word	0x00000433
    6d90:	00000413 	.word	0x00000413
    6d94:	800fffff 	.word	0x800fffff

00006d98 <__aeabi_ui2d>:
    6d98:	b510      	push	{r4, lr}
    6d9a:	1e04      	subs	r4, r0, #0
    6d9c:	d028      	beq.n	6df0 <__aeabi_ui2d+0x58>
    6d9e:	f000 f90f 	bl	6fc0 <__clzsi2>
    6da2:	4b15      	ldr	r3, [pc, #84]	; (6df8 <__aeabi_ui2d+0x60>)
    6da4:	4a15      	ldr	r2, [pc, #84]	; (6dfc <__aeabi_ui2d+0x64>)
    6da6:	1a1b      	subs	r3, r3, r0
    6da8:	1ad2      	subs	r2, r2, r3
    6daa:	2a1f      	cmp	r2, #31
    6dac:	dd15      	ble.n	6dda <__aeabi_ui2d+0x42>
    6dae:	4a14      	ldr	r2, [pc, #80]	; (6e00 <__aeabi_ui2d+0x68>)
    6db0:	1ad2      	subs	r2, r2, r3
    6db2:	4094      	lsls	r4, r2
    6db4:	2200      	movs	r2, #0
    6db6:	0324      	lsls	r4, r4, #12
    6db8:	055b      	lsls	r3, r3, #21
    6dba:	0b24      	lsrs	r4, r4, #12
    6dbc:	0d5b      	lsrs	r3, r3, #21
    6dbe:	2100      	movs	r1, #0
    6dc0:	0010      	movs	r0, r2
    6dc2:	0324      	lsls	r4, r4, #12
    6dc4:	0d0a      	lsrs	r2, r1, #20
    6dc6:	0b24      	lsrs	r4, r4, #12
    6dc8:	0512      	lsls	r2, r2, #20
    6dca:	4322      	orrs	r2, r4
    6dcc:	4c0d      	ldr	r4, [pc, #52]	; (6e04 <__aeabi_ui2d+0x6c>)
    6dce:	051b      	lsls	r3, r3, #20
    6dd0:	4022      	ands	r2, r4
    6dd2:	4313      	orrs	r3, r2
    6dd4:	005b      	lsls	r3, r3, #1
    6dd6:	0859      	lsrs	r1, r3, #1
    6dd8:	bd10      	pop	{r4, pc}
    6dda:	0021      	movs	r1, r4
    6ddc:	4091      	lsls	r1, r2
    6dde:	000a      	movs	r2, r1
    6de0:	210b      	movs	r1, #11
    6de2:	1a08      	subs	r0, r1, r0
    6de4:	40c4      	lsrs	r4, r0
    6de6:	055b      	lsls	r3, r3, #21
    6de8:	0324      	lsls	r4, r4, #12
    6dea:	0b24      	lsrs	r4, r4, #12
    6dec:	0d5b      	lsrs	r3, r3, #21
    6dee:	e7e6      	b.n	6dbe <__aeabi_ui2d+0x26>
    6df0:	2300      	movs	r3, #0
    6df2:	2400      	movs	r4, #0
    6df4:	2200      	movs	r2, #0
    6df6:	e7e2      	b.n	6dbe <__aeabi_ui2d+0x26>
    6df8:	0000041e 	.word	0x0000041e
    6dfc:	00000433 	.word	0x00000433
    6e00:	00000413 	.word	0x00000413
    6e04:	800fffff 	.word	0x800fffff

00006e08 <__aeabi_f2d>:
    6e08:	0041      	lsls	r1, r0, #1
    6e0a:	0e09      	lsrs	r1, r1, #24
    6e0c:	1c4b      	adds	r3, r1, #1
    6e0e:	b570      	push	{r4, r5, r6, lr}
    6e10:	b2db      	uxtb	r3, r3
    6e12:	0246      	lsls	r6, r0, #9
    6e14:	0a75      	lsrs	r5, r6, #9
    6e16:	0fc4      	lsrs	r4, r0, #31
    6e18:	2b01      	cmp	r3, #1
    6e1a:	dd14      	ble.n	6e46 <__aeabi_f2d+0x3e>
    6e1c:	23e0      	movs	r3, #224	; 0xe0
    6e1e:	009b      	lsls	r3, r3, #2
    6e20:	076d      	lsls	r5, r5, #29
    6e22:	0b36      	lsrs	r6, r6, #12
    6e24:	18cb      	adds	r3, r1, r3
    6e26:	2100      	movs	r1, #0
    6e28:	0d0a      	lsrs	r2, r1, #20
    6e2a:	0028      	movs	r0, r5
    6e2c:	0512      	lsls	r2, r2, #20
    6e2e:	4d1c      	ldr	r5, [pc, #112]	; (6ea0 <__aeabi_f2d+0x98>)
    6e30:	4332      	orrs	r2, r6
    6e32:	055b      	lsls	r3, r3, #21
    6e34:	402a      	ands	r2, r5
    6e36:	085b      	lsrs	r3, r3, #1
    6e38:	4313      	orrs	r3, r2
    6e3a:	005b      	lsls	r3, r3, #1
    6e3c:	07e4      	lsls	r4, r4, #31
    6e3e:	085b      	lsrs	r3, r3, #1
    6e40:	4323      	orrs	r3, r4
    6e42:	0019      	movs	r1, r3
    6e44:	bd70      	pop	{r4, r5, r6, pc}
    6e46:	2900      	cmp	r1, #0
    6e48:	d114      	bne.n	6e74 <__aeabi_f2d+0x6c>
    6e4a:	2d00      	cmp	r5, #0
    6e4c:	d01e      	beq.n	6e8c <__aeabi_f2d+0x84>
    6e4e:	0028      	movs	r0, r5
    6e50:	f000 f8b6 	bl	6fc0 <__clzsi2>
    6e54:	280a      	cmp	r0, #10
    6e56:	dc1c      	bgt.n	6e92 <__aeabi_f2d+0x8a>
    6e58:	230b      	movs	r3, #11
    6e5a:	002a      	movs	r2, r5
    6e5c:	1a1b      	subs	r3, r3, r0
    6e5e:	40da      	lsrs	r2, r3
    6e60:	0003      	movs	r3, r0
    6e62:	3315      	adds	r3, #21
    6e64:	409d      	lsls	r5, r3
    6e66:	4b0f      	ldr	r3, [pc, #60]	; (6ea4 <__aeabi_f2d+0x9c>)
    6e68:	0312      	lsls	r2, r2, #12
    6e6a:	1a1b      	subs	r3, r3, r0
    6e6c:	055b      	lsls	r3, r3, #21
    6e6e:	0b16      	lsrs	r6, r2, #12
    6e70:	0d5b      	lsrs	r3, r3, #21
    6e72:	e7d8      	b.n	6e26 <__aeabi_f2d+0x1e>
    6e74:	2d00      	cmp	r5, #0
    6e76:	d006      	beq.n	6e86 <__aeabi_f2d+0x7e>
    6e78:	0b32      	lsrs	r2, r6, #12
    6e7a:	2680      	movs	r6, #128	; 0x80
    6e7c:	0336      	lsls	r6, r6, #12
    6e7e:	076d      	lsls	r5, r5, #29
    6e80:	4316      	orrs	r6, r2
    6e82:	4b09      	ldr	r3, [pc, #36]	; (6ea8 <__aeabi_f2d+0xa0>)
    6e84:	e7cf      	b.n	6e26 <__aeabi_f2d+0x1e>
    6e86:	4b08      	ldr	r3, [pc, #32]	; (6ea8 <__aeabi_f2d+0xa0>)
    6e88:	2600      	movs	r6, #0
    6e8a:	e7cc      	b.n	6e26 <__aeabi_f2d+0x1e>
    6e8c:	2300      	movs	r3, #0
    6e8e:	2600      	movs	r6, #0
    6e90:	e7c9      	b.n	6e26 <__aeabi_f2d+0x1e>
    6e92:	0003      	movs	r3, r0
    6e94:	002a      	movs	r2, r5
    6e96:	3b0b      	subs	r3, #11
    6e98:	409a      	lsls	r2, r3
    6e9a:	2500      	movs	r5, #0
    6e9c:	e7e3      	b.n	6e66 <__aeabi_f2d+0x5e>
    6e9e:	46c0      	nop			; (mov r8, r8)
    6ea0:	800fffff 	.word	0x800fffff
    6ea4:	00000389 	.word	0x00000389
    6ea8:	000007ff 	.word	0x000007ff

00006eac <__aeabi_d2f>:
    6eac:	b5f0      	push	{r4, r5, r6, r7, lr}
    6eae:	004c      	lsls	r4, r1, #1
    6eb0:	0d64      	lsrs	r4, r4, #21
    6eb2:	030b      	lsls	r3, r1, #12
    6eb4:	1c62      	adds	r2, r4, #1
    6eb6:	0f45      	lsrs	r5, r0, #29
    6eb8:	0a5b      	lsrs	r3, r3, #9
    6eba:	0552      	lsls	r2, r2, #21
    6ebc:	432b      	orrs	r3, r5
    6ebe:	0fc9      	lsrs	r1, r1, #31
    6ec0:	00c5      	lsls	r5, r0, #3
    6ec2:	0d52      	lsrs	r2, r2, #21
    6ec4:	2a01      	cmp	r2, #1
    6ec6:	dd28      	ble.n	6f1a <__aeabi_d2f+0x6e>
    6ec8:	4a3a      	ldr	r2, [pc, #232]	; (6fb4 <__aeabi_d2f+0x108>)
    6eca:	18a6      	adds	r6, r4, r2
    6ecc:	2efe      	cmp	r6, #254	; 0xfe
    6ece:	dc1b      	bgt.n	6f08 <__aeabi_d2f+0x5c>
    6ed0:	2e00      	cmp	r6, #0
    6ed2:	dd3e      	ble.n	6f52 <__aeabi_d2f+0xa6>
    6ed4:	0180      	lsls	r0, r0, #6
    6ed6:	0002      	movs	r2, r0
    6ed8:	1e50      	subs	r0, r2, #1
    6eda:	4182      	sbcs	r2, r0
    6edc:	0f6d      	lsrs	r5, r5, #29
    6ede:	432a      	orrs	r2, r5
    6ee0:	00db      	lsls	r3, r3, #3
    6ee2:	4313      	orrs	r3, r2
    6ee4:	075a      	lsls	r2, r3, #29
    6ee6:	d004      	beq.n	6ef2 <__aeabi_d2f+0x46>
    6ee8:	220f      	movs	r2, #15
    6eea:	401a      	ands	r2, r3
    6eec:	2a04      	cmp	r2, #4
    6eee:	d000      	beq.n	6ef2 <__aeabi_d2f+0x46>
    6ef0:	3304      	adds	r3, #4
    6ef2:	2280      	movs	r2, #128	; 0x80
    6ef4:	04d2      	lsls	r2, r2, #19
    6ef6:	401a      	ands	r2, r3
    6ef8:	d05a      	beq.n	6fb0 <__aeabi_d2f+0x104>
    6efa:	3601      	adds	r6, #1
    6efc:	2eff      	cmp	r6, #255	; 0xff
    6efe:	d003      	beq.n	6f08 <__aeabi_d2f+0x5c>
    6f00:	019b      	lsls	r3, r3, #6
    6f02:	0a5b      	lsrs	r3, r3, #9
    6f04:	b2f4      	uxtb	r4, r6
    6f06:	e001      	b.n	6f0c <__aeabi_d2f+0x60>
    6f08:	24ff      	movs	r4, #255	; 0xff
    6f0a:	2300      	movs	r3, #0
    6f0c:	0258      	lsls	r0, r3, #9
    6f0e:	05e4      	lsls	r4, r4, #23
    6f10:	0a40      	lsrs	r0, r0, #9
    6f12:	07c9      	lsls	r1, r1, #31
    6f14:	4320      	orrs	r0, r4
    6f16:	4308      	orrs	r0, r1
    6f18:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6f1a:	2c00      	cmp	r4, #0
    6f1c:	d007      	beq.n	6f2e <__aeabi_d2f+0x82>
    6f1e:	431d      	orrs	r5, r3
    6f20:	d0f2      	beq.n	6f08 <__aeabi_d2f+0x5c>
    6f22:	2080      	movs	r0, #128	; 0x80
    6f24:	00db      	lsls	r3, r3, #3
    6f26:	0480      	lsls	r0, r0, #18
    6f28:	4303      	orrs	r3, r0
    6f2a:	26ff      	movs	r6, #255	; 0xff
    6f2c:	e7da      	b.n	6ee4 <__aeabi_d2f+0x38>
    6f2e:	432b      	orrs	r3, r5
    6f30:	d003      	beq.n	6f3a <__aeabi_d2f+0x8e>
    6f32:	2305      	movs	r3, #5
    6f34:	08db      	lsrs	r3, r3, #3
    6f36:	2cff      	cmp	r4, #255	; 0xff
    6f38:	d003      	beq.n	6f42 <__aeabi_d2f+0x96>
    6f3a:	025b      	lsls	r3, r3, #9
    6f3c:	0a5b      	lsrs	r3, r3, #9
    6f3e:	b2e4      	uxtb	r4, r4
    6f40:	e7e4      	b.n	6f0c <__aeabi_d2f+0x60>
    6f42:	2b00      	cmp	r3, #0
    6f44:	d032      	beq.n	6fac <__aeabi_d2f+0x100>
    6f46:	2080      	movs	r0, #128	; 0x80
    6f48:	03c0      	lsls	r0, r0, #15
    6f4a:	4303      	orrs	r3, r0
    6f4c:	025b      	lsls	r3, r3, #9
    6f4e:	0a5b      	lsrs	r3, r3, #9
    6f50:	e7dc      	b.n	6f0c <__aeabi_d2f+0x60>
    6f52:	0032      	movs	r2, r6
    6f54:	3217      	adds	r2, #23
    6f56:	db14      	blt.n	6f82 <__aeabi_d2f+0xd6>
    6f58:	2280      	movs	r2, #128	; 0x80
    6f5a:	271e      	movs	r7, #30
    6f5c:	0412      	lsls	r2, r2, #16
    6f5e:	4313      	orrs	r3, r2
    6f60:	1bbf      	subs	r7, r7, r6
    6f62:	2f1f      	cmp	r7, #31
    6f64:	dc0f      	bgt.n	6f86 <__aeabi_d2f+0xda>
    6f66:	4a14      	ldr	r2, [pc, #80]	; (6fb8 <__aeabi_d2f+0x10c>)
    6f68:	4694      	mov	ip, r2
    6f6a:	4464      	add	r4, ip
    6f6c:	002a      	movs	r2, r5
    6f6e:	40a5      	lsls	r5, r4
    6f70:	002e      	movs	r6, r5
    6f72:	40a3      	lsls	r3, r4
    6f74:	1e75      	subs	r5, r6, #1
    6f76:	41ae      	sbcs	r6, r5
    6f78:	40fa      	lsrs	r2, r7
    6f7a:	4333      	orrs	r3, r6
    6f7c:	4313      	orrs	r3, r2
    6f7e:	2600      	movs	r6, #0
    6f80:	e7b0      	b.n	6ee4 <__aeabi_d2f+0x38>
    6f82:	2400      	movs	r4, #0
    6f84:	e7d5      	b.n	6f32 <__aeabi_d2f+0x86>
    6f86:	2202      	movs	r2, #2
    6f88:	4252      	negs	r2, r2
    6f8a:	1b96      	subs	r6, r2, r6
    6f8c:	001a      	movs	r2, r3
    6f8e:	40f2      	lsrs	r2, r6
    6f90:	2f20      	cmp	r7, #32
    6f92:	d009      	beq.n	6fa8 <__aeabi_d2f+0xfc>
    6f94:	4809      	ldr	r0, [pc, #36]	; (6fbc <__aeabi_d2f+0x110>)
    6f96:	4684      	mov	ip, r0
    6f98:	4464      	add	r4, ip
    6f9a:	40a3      	lsls	r3, r4
    6f9c:	432b      	orrs	r3, r5
    6f9e:	1e5d      	subs	r5, r3, #1
    6fa0:	41ab      	sbcs	r3, r5
    6fa2:	2600      	movs	r6, #0
    6fa4:	4313      	orrs	r3, r2
    6fa6:	e79d      	b.n	6ee4 <__aeabi_d2f+0x38>
    6fa8:	2300      	movs	r3, #0
    6faa:	e7f7      	b.n	6f9c <__aeabi_d2f+0xf0>
    6fac:	2300      	movs	r3, #0
    6fae:	e7ad      	b.n	6f0c <__aeabi_d2f+0x60>
    6fb0:	0034      	movs	r4, r6
    6fb2:	e7bf      	b.n	6f34 <__aeabi_d2f+0x88>
    6fb4:	fffffc80 	.word	0xfffffc80
    6fb8:	fffffc82 	.word	0xfffffc82
    6fbc:	fffffca2 	.word	0xfffffca2

00006fc0 <__clzsi2>:
    6fc0:	211c      	movs	r1, #28
    6fc2:	2301      	movs	r3, #1
    6fc4:	041b      	lsls	r3, r3, #16
    6fc6:	4298      	cmp	r0, r3
    6fc8:	d301      	bcc.n	6fce <__clzsi2+0xe>
    6fca:	0c00      	lsrs	r0, r0, #16
    6fcc:	3910      	subs	r1, #16
    6fce:	0a1b      	lsrs	r3, r3, #8
    6fd0:	4298      	cmp	r0, r3
    6fd2:	d301      	bcc.n	6fd8 <__clzsi2+0x18>
    6fd4:	0a00      	lsrs	r0, r0, #8
    6fd6:	3908      	subs	r1, #8
    6fd8:	091b      	lsrs	r3, r3, #4
    6fda:	4298      	cmp	r0, r3
    6fdc:	d301      	bcc.n	6fe2 <__clzsi2+0x22>
    6fde:	0900      	lsrs	r0, r0, #4
    6fe0:	3904      	subs	r1, #4
    6fe2:	a202      	add	r2, pc, #8	; (adr r2, 6fec <__clzsi2+0x2c>)
    6fe4:	5c10      	ldrb	r0, [r2, r0]
    6fe6:	1840      	adds	r0, r0, r1
    6fe8:	4770      	bx	lr
    6fea:	46c0      	nop			; (mov r8, r8)
    6fec:	02020304 	.word	0x02020304
    6ff0:	01010101 	.word	0x01010101
	...

00006ffc <__libc_init_array>:
    6ffc:	b570      	push	{r4, r5, r6, lr}
    6ffe:	2600      	movs	r6, #0
    7000:	4d0c      	ldr	r5, [pc, #48]	; (7034 <__libc_init_array+0x38>)
    7002:	4c0d      	ldr	r4, [pc, #52]	; (7038 <__libc_init_array+0x3c>)
    7004:	1b64      	subs	r4, r4, r5
    7006:	10a4      	asrs	r4, r4, #2
    7008:	42a6      	cmp	r6, r4
    700a:	d109      	bne.n	7020 <__libc_init_array+0x24>
    700c:	2600      	movs	r6, #0
    700e:	f000 fa57 	bl	74c0 <_init>
    7012:	4d0a      	ldr	r5, [pc, #40]	; (703c <__libc_init_array+0x40>)
    7014:	4c0a      	ldr	r4, [pc, #40]	; (7040 <__libc_init_array+0x44>)
    7016:	1b64      	subs	r4, r4, r5
    7018:	10a4      	asrs	r4, r4, #2
    701a:	42a6      	cmp	r6, r4
    701c:	d105      	bne.n	702a <__libc_init_array+0x2e>
    701e:	bd70      	pop	{r4, r5, r6, pc}
    7020:	00b3      	lsls	r3, r6, #2
    7022:	58eb      	ldr	r3, [r5, r3]
    7024:	4798      	blx	r3
    7026:	3601      	adds	r6, #1
    7028:	e7ee      	b.n	7008 <__libc_init_array+0xc>
    702a:	00b3      	lsls	r3, r6, #2
    702c:	58eb      	ldr	r3, [r5, r3]
    702e:	4798      	blx	r3
    7030:	3601      	adds	r6, #1
    7032:	e7f2      	b.n	701a <__libc_init_array+0x1e>
    7034:	000074cc 	.word	0x000074cc
    7038:	000074cc 	.word	0x000074cc
    703c:	000074cc 	.word	0x000074cc
    7040:	000074d0 	.word	0x000074d0
    7044:	42000800 	.word	0x42000800
    7048:	42000c00 	.word	0x42000c00
    704c:	42001000 	.word	0x42001000
    7050:	42001400 	.word	0x42001400
    7054:	00000e7e 	.word	0x00000e7e
    7058:	00000e7a 	.word	0x00000e7a
    705c:	00000e7a 	.word	0x00000e7a
    7060:	00000ee0 	.word	0x00000ee0
    7064:	00000ee0 	.word	0x00000ee0
    7068:	00000e92 	.word	0x00000e92
    706c:	00000e84 	.word	0x00000e84
    7070:	00000e98 	.word	0x00000e98
    7074:	00000ece 	.word	0x00000ece
    7078:	000010a0 	.word	0x000010a0
    707c:	00001080 	.word	0x00001080
    7080:	00001080 	.word	0x00001080
    7084:	0000110c 	.word	0x0000110c
    7088:	00001092 	.word	0x00001092
    708c:	000010ae 	.word	0x000010ae
    7090:	00001084 	.word	0x00001084
    7094:	000010bc 	.word	0x000010bc
    7098:	000010fc 	.word	0x000010fc

0000709c <_tcc_apbcmasks>:
    709c:	00000100 00000200 00000400              ............

000070a8 <_tcc_cc_nums>:
    70a8:	00020204                                ....

000070ac <_tcc_gclk_ids>:
    70ac:	001b1a1a                                ....

000070b0 <_tcc_maxs>:
    70b0:	00ffffff 00ffffff 0000ffff              ............

000070bc <_tcc_ow_nums>:
    70bc:	00020408                                ....

000070c0 <_tcc_intflag>:
    70c0:	00000001 00000002 00000004 00000008     ................
    70d0:	00001000 00002000 00004000 00008000     ..... ...@......
    70e0:	00010000 00020000 00040000 00080000     ................
    70f0:	42002c00 42003000 42003400 00002d38     .,.B.0.B.4.B8-..
    7100:	00002d4e 00002d54 00002d5a 00002d60     N-..T-..Z-..`-..

00007110 <accelerometer_registers_to_configure>:
    7110:	40225f20 08250024 06326030 00000133      _"@$.%.0`2.3...

00007120 <sinkPins>:
    7120:	17181912 00000011                       ........

00007128 <sourcePins>:
    7128:	0b0e0f10 04050607 13161b1c              ............

00007134 <tc_interrupt_vectors.13034>:
    7134:	00141312                                ....

00007138 <tccAddress>:
    7138:	2000014c 2000014c 20000210 20000210     L.. L.. ... ... 
    7148:	2000014c 2000014c 2000014c 20000210     L.. L.. L.. ... 
    7158:	20000210 2000014c 2000014c 2000014c     ... L.. L.. L.. 
    7168:	20000210 20000210 2000014c 2000014c     ... ... L.. L.. 
    7178:	2000014c 20000210 20000210 2000014c     L.. ... ... L.. 
    7188:	2000014c 2000014c 20000210 20000210     L.. L.. ... ... 
    7198:	2000014c 2000014c 2000014c 20000210     L.. L.. L.. ... 
    71a8:	20000210 2000014c 2000014c 2000014c     ... L.. L.. L.. 
    71b8:	20000210 20000210 2000014c 2000014c     ... ... L.. L.. 
    71c8:	2000014c 20000210 20000210 2000014c     L.. ... ... L.. 
    71d8:	2000014c 2000014c 20000210 20000210     L.. L.. ... ... 
    71e8:	2000014c 2000014c 2000014c 20000210     L.. L.. L.. ... 
    71f8:	20000210 2000014c 2000014c 2000014c     ... L.. L.. L.. 
    7208:	20000210 20000210 2000014c 2000014c     ... ... L.. L.. 
    7218:	2000014c 20000210 20000210 2000014c     L.. ... ... L.. 

00007228 <npio2_hw>:
    7228:	3ff921fb 400921fb 4012d97c 401921fb     .!.?.!.@|..@.!.@
    7238:	401f6a7a 4022d97c 4025fdbb 402921fb     zj.@|."@..%@.!)@
    7248:	402c463a 402f6a7a 4031475c 4032d97c     :F,@zj/@\G1@|.2@
    7258:	40346b9c 4035fdbb 40378fdb 403921fb     .k4@..5@..7@.!9@
    7268:	403ab41b 403c463a 403dd85a 403f6a7a     ..:@:F<@Z.=@zj?@
    7278:	40407e4c 4041475c 4042106c 4042d97c     L~@@\GA@l.B@|.B@
    7288:	4043a28c 40446b9c 404534ac 4045fdbb     ..C@.kD@.4E@..E@
    7298:	4046c6cb 40478fdb 404858eb 404921fb     ..F@..G@.XH@.!I@

000072a8 <two_over_pi>:
    72a8:	00a2f983 006e4e44 001529fc 002757d1     ....DNn..)...W'.
    72b8:	00f534dd 00c0db62 0095993c 00439041     .4..b...<...A.C.
    72c8:	00fe5163 00abdebb 00c561b7 00246e3a     cQ.......a..:n$.
    72d8:	00424dd2 00e00649 002eea09 00d1921c     .MB.I...........
    72e8:	00fe1deb 001cb129 00a73ee8 008235f5     ....)....>...5..
    72f8:	002ebb44 0084e99c 007026b4 005f7e41     D........&p.A~_.
    7308:	003991d6 00398353 0039f49c 00845f8b     ..9.S.9...9.._..
    7318:	00bdf928 003b1ff8 0097ffde 0005980f     (.....;.........
    7328:	00ef2f11 008b5a0a 006d1f6d 00367ecf     ./...Z..m.m..~6.
    7338:	0027cb09 00b74f46 003f669e 005fea2d     ..'.FO...f?.-._.
    7348:	007527ba 00c7ebe5 00f17b3d 000739f7     .'u.....={...9..
    7358:	008a5292 00ea6bfb 005fb11f 008d5d08     .R...k...._..]..
    7368:	00560330 0046fc7b 006babf0 00cfbc20     0.V.{.F...k. ...
    7378:	009af436 001da9e3 0091615e 00e61b08     6.......^a......
    7388:	00659985 005f14a0 0068408d 00ffd880     ..e..._..@h.....
    7398:	004d7327 00310606 001556ca 0073a8c9     'sM...1..V....s.
    73a8:	0060e27b 00c08c6b                       {.`.k...

000073b0 <PIo2>:
    73b0:	40000000 3ff921fb 00000000 3e74442d     ...@.!.?....-Dt>
    73c0:	80000000 3cf84698 60000000 3b78cc51     .....F.<...`Q.x;
    73d0:	80000000 39f01b83 40000000 387a2520     .......9...@ %z8
    73e0:	80000000 36e38222 00000000 3569f31d     ...."..6......i5

000073f0 <init_jk>:
    73f0:	00000002 00000003 00000004 00000006     ................
    7400:	00004d40 00004c90 00004c90 00004c8e     @M...L...L...L..
    7410:	00004d32 00004d32 00004d28 00004c8e     2M..2M..(M...L..
    7420:	00004d32 00004d28 00004d32 00004c8e     2M..(M..2M...L..
    7430:	00004d38 00004d38 00004d38 00004dc8     8M..8M..8M...M..
    7440:	00005b10 00005af2 00005aac 000059ca     .[...Z...Z...Y..
    7450:	00005aac 00005ae4 00005aac 000059ca     .Z...Z...Z...Y..
    7460:	00005af2 00005af2 00005ae4 000059ca     .Z...Z...Z...Y..
    7470:	000059c2 000059c2 000059c2 00005d28     .Y...Y...Y..(]..
    7480:	00006370 00006230 00006230 0000622c     pc..0b..0b..,b..
    7490:	00006348 00006348 0000633a 0000622c     Hc..Hc..:c..,b..
    74a0:	00006348 0000633a 00006348 0000622c     Hc..:c..Hc..,b..
    74b0:	00006350 00006350 00006350 00006554     Pc..Pc..Pc..Te..

000074c0 <_init>:
    74c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    74c2:	46c0      	nop			; (mov r8, r8)
    74c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    74c6:	bc08      	pop	{r3}
    74c8:	469e      	mov	lr, r3
    74ca:	4770      	bx	lr

000074cc <__init_array_start>:
    74cc:	000000dd 	.word	0x000000dd

000074d0 <_fini>:
    74d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    74d2:	46c0      	nop			; (mov r8, r8)
    74d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    74d6:	bc08      	pop	{r3}
    74d8:	469e      	mov	lr, r3
    74da:	4770      	bx	lr

000074dc <__fini_array_start>:
    74dc:	000000b5 	.word	0x000000b5
